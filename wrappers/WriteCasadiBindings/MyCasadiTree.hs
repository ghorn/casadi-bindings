{-# OPTIONS_GHC -Wall #-}

module WriteCasadiBindings.MyCasadiTree ( classes, tools, enums ) where

import WriteCasadiBindings.Types
import WriteCasadiBindings.Buildbot.CasadiTree ( tools, enums )

classes :: [Class]
classes = [ sxfunction
          , mxfunction
          , fx
          , sharedobject
          , printableobject
          , crssparsity
          , generictype
          , iointerfacefx
          , optionsfunctionality
          , ipoptsolver
          , sxmatrix
          , ioscheme
          , dmatrix
          , mx
          , casadioptions
          , callback
          , customevaluate
          , externalfunction
          , csparse
          , sx
          , casadimeta
          , functor
          , customfunction
          ]


matrixMethods :: [Method]
matrixMethods =
  [ Method (Name "size1") valCInt [] Normal (Doc "")
  , Method (Name "size2") valCInt [] Normal (Doc "")
  , Method (Name "size") valCInt [] Normal (Doc "")
  , Method (Name "numel") valCInt [] Normal (Doc "")
  ]

customfunction :: Class
customfunction = Class CustomFunction methods docs
  where
    methods =
      [
        Method (Name "checkNode") valCBool [] Normal (Doc "\n\nCheck if the pointer points towards a valid object.\n\n") ,
        Method (Name "CustomFunction") valCustomFunction [] Constructor (Doc "\n\n>  CasADi::CustomFunction::CustomFunction(const CustomEvaluate &c_fcn, const std::vector< CRSSparsity > &inputscheme, const std::vector< CRSSparsity > &outputscheme)\n\n>  CasADi::CustomFunction::CustomFunction(const CustomEvaluate &c_fcn, const IOSchemeVector< CRSSparsity > &inputscheme, const std::vector< CRSSparsity > &outputscheme)\n\n>  CasADi::CustomFunction::CustomFunction(const CustomEvaluate &c_fcn, const std::vector< CRSSparsity > &inputscheme, const IOSchemeVector< CRSSparsity > &outputscheme)\n\n>  CasADi::CustomFunction::CustomFunction(const CustomEvaluate &c_fcn, const IOSchemeVector< CRSSparsity > &inputscheme, const IOSchemeVector< CRSSparsity > &outputscheme)\n------------------------------------------------------------------------\n\nCreate a function with input/output schemes given.\n\n>  CasADi::CustomFunction::CustomFunction()\n------------------------------------------------------------------------\n\ndefault constructor\n\n>  CasADi::CustomFunction::CustomFunction(const CustomEvaluate &c_fcn)\n------------------------------------------------------------------------\n\nCreate a function, user sets inputs outputs manually.\n\n") ,
        Method (Name "CustomFunction'") valCustomFunction [constrefCustomEvaluate,constrefCRSSparsityVec,constrefCRSSparsityVec] Constructor (Doc "\n\n>  CasADi::CustomFunction::CustomFunction(const CustomEvaluate &c_fcn, const std::vector< CRSSparsity > &inputscheme, const std::vector< CRSSparsity > &outputscheme)\n\n>  CasADi::CustomFunction::CustomFunction(const CustomEvaluate &c_fcn, const IOSchemeVector< CRSSparsity > &inputscheme, const std::vector< CRSSparsity > &outputscheme)\n\n>  CasADi::CustomFunction::CustomFunction(const CustomEvaluate &c_fcn, const std::vector< CRSSparsity > &inputscheme, const IOSchemeVector< CRSSparsity > &outputscheme)\n\n>  CasADi::CustomFunction::CustomFunction(const CustomEvaluate &c_fcn, const IOSchemeVector< CRSSparsity > &inputscheme, const IOSchemeVector< CRSSparsity > &outputscheme)\n------------------------------------------------------------------------\n\nCreate a function with input/output schemes given.\n\n>  CasADi::CustomFunction::CustomFunction()\n------------------------------------------------------------------------\n\ndefault constructor\n\n>  CasADi::CustomFunction::CustomFunction(const CustomEvaluate &c_fcn)\n------------------------------------------------------------------------\n\nCreate a function, user sets inputs outputs manually.\n\n") ,
        Method (Name "CustomFunction'''''") valCustomFunction [constrefCustomEvaluate] Constructor (Doc "\n\n>  CasADi::CustomFunction::CustomFunction(const CustomEvaluate &c_fcn, const std::vector< CRSSparsity > &inputscheme, const std::vector< CRSSparsity > &outputscheme)\n\n>  CasADi::CustomFunction::CustomFunction(const CustomEvaluate &c_fcn, const IOSchemeVector< CRSSparsity > &inputscheme, const std::vector< CRSSparsity > &outputscheme)\n\n>  CasADi::CustomFunction::CustomFunction(const CustomEvaluate &c_fcn, const std::vector< CRSSparsity > &inputscheme, const IOSchemeVector< CRSSparsity > &outputscheme)\n\n>  CasADi::CustomFunction::CustomFunction(const CustomEvaluate &c_fcn, const IOSchemeVector< CRSSparsity > &inputscheme, const IOSchemeVector< CRSSparsity > &outputscheme)\n------------------------------------------------------------------------\n\nCreate a function with input/output schemes given.\n\n>  CasADi::CustomFunction::CustomFunction()\n------------------------------------------------------------------------\n\ndefault constructor\n\n>  CasADi::CustomFunction::CustomFunction(const CustomEvaluate &c_fcn)\n------------------------------------------------------------------------\n\nCreate a function, user sets inputs outputs manually.\n\n") 
      ]
    docs = Doc "\n\nInterface to a custom function.\n\nNote: max_number_of_fwd_dir and max_number_of_adj_dir will be default zero\n\nJoel Andersson\n\n>List of available options\n+--------------+--------------+--------------+--------------+--------------+\n|      Id      |     Type     |   Default    | Description  |   Used in    |\n+==============+==============+==============+==============+==============+\n| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::FXIn |\n|              |              |              | calculate    | ternal       |\n|              |              |              | the          |              |\n|              |              |              | Jacobians.   |              |\n|              |              |              | (forward:    |              |\n|              |              |              | only forward |              |\n|              |              |              | mode|reverse |              |\n|              |              |              | : only       |              |\n|              |              |              | adjoint mode |              |\n|              |              |              | |automatic:  |              |\n|              |              |              | a heuristic  |              |\n|              |              |              | decides      |              |\n|              |              |              | which is     |              |\n|              |              |              | more         |              |\n|              |              |              | appropriate) |              |\n+--------------+--------------+--------------+--------------+--------------+\n| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::FXIn |\n|              |              |              | indicate     | ternal       |\n|              |              |              | wether       |              |\n|              |              |              | statistics   |              |\n|              |              |              | must be      |              |\n|              |              |              | gathered     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::FXIn |\n|              |              |              | exceptions   | ternal       |\n|              |              |              | when the     |              |\n|              |              |              | numerical    |              |\n|              |              |              | values of    |              |\n|              |              |              | the inputs   |              |\n|              |              |              | don't make   |              |\n|              |              |              | sense        |              |\n+--------------+--------------+--------------+--------------+--------------+\n| jacobian_gen | OT_JACOBIANG | GenericType( | Function     | CasADi::FXIn |\n| erator       | ENERATOR     | )            | that returns | ternal       |\n|              |              |              | a Jacobian   |              |\n|              |              |              | function     |              |\n|              |              |              | given a set  |              |\n|              |              |              | of desired   |              |\n|              |              |              | Jacobian     |              |\n|              |              |              | blocks,      |              |\n|              |              |              | overrides    |              |\n|              |              |              | internal     |              |\n|              |              |              | routines.    |              |\n|              |              |              | Check docume |              |\n|              |              |              | ntation of J |              |\n|              |              |              | acobianGener |              |\n|              |              |              | ator .       |              |\n+--------------+--------------+--------------+--------------+--------------+\n| max_number_o | OT_INTEGER   | optimized_nu | Allow \"numbe | CasADi::FXIn |\n| f_adj_dir    |              | m_dir        | r_of_adj_dir | ternal       |\n|              |              |              | \" to grow    |              |\n|              |              |              | until it     |              |\n|              |              |              | reaches this |              |\n|              |              |              | number       |              |\n+--------------+--------------+--------------+--------------+--------------+\n| max_number_o | OT_INTEGER   | optimized_nu | Allow \"numbe | CasADi::FXIn |\n| f_fwd_dir    |              | m_dir        | r_of_fwd_dir | ternal       |\n|              |              |              | \" to grow    |              |\n|              |              |              | until it     |              |\n|              |              |              | reaches this |              |\n|              |              |              | number       |              |\n+--------------+--------------+--------------+--------------+--------------+\n| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::FXIn |\n|              | TOR          | )            | be activated | ternal       |\n|              |              |              | (inputs|outp |              |\n|              |              |              | uts)         |              |\n+--------------+--------------+--------------+--------------+--------------+\n| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |\n|              |              | red_object\"  | object       | onsFunctiona |\n|              |              |              |              | lityNode     |\n+--------------+--------------+--------------+--------------+--------------+\n| number_of_ad | OT_INTEGER   | 1            | number of    | CasADi::FXIn |\n| j_dir        |              |              | adjoint      | ternal       |\n|              |              |              | derivatives  |              |\n|              |              |              | to be        |              |\n|              |              |              | calculated s |              |\n|              |              |              | imultanously |              |\n+--------------+--------------+--------------+--------------+--------------+\n| number_of_fw | OT_INTEGER   | 1            | number of    | CasADi::FXIn |\n| d_dir        |              |              | forward      | ternal       |\n|              |              |              | derivatives  |              |\n|              |              |              | to be        |              |\n|              |              |              | calculated s |              |\n|              |              |              | imultanously |              |\n+--------------+--------------+--------------+--------------+--------------+\n| numeric_hess | OT_BOOLEAN   | false        | Calculate    | CasADi::FXIn |\n| ian          |              |              | Hessians     | ternal       |\n|              |              |              | numerically  |              |\n|              |              |              | (using       |              |\n|              |              |              | directional  |              |\n|              |              |              | derivatives) |              |\n|              |              |              | rather than  |              |\n|              |              |              | with the     |              |\n|              |              |              | built-in     |              |\n|              |              |              | method       |              |\n+--------------+--------------+--------------+--------------+--------------+\n| numeric_jaco | OT_BOOLEAN   | false        | Calculate    | CasADi::FXIn |\n| bian         |              |              | Jacobians    | ternal       |\n|              |              |              | numerically  |              |\n|              |              |              | (using       |              |\n|              |              |              | directional  |              |\n|              |              |              | derivatives) |              |\n|              |              |              | rather than  |              |\n|              |              |              | with the     |              |\n|              |              |              | built-in     |              |\n|              |              |              | method       |              |\n+--------------+--------------+--------------+--------------+--------------+\n| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::FXIn |\n| heck         |              |              | exceptions   | ternal       |\n|              |              |              | when NaN or  |              |\n|              |              |              | Inf appears  |              |\n|              |              |              | during       |              |\n|              |              |              | evaluation   |              |\n+--------------+--------------+--------------+--------------+--------------+\n| sparse       | OT_BOOLEAN   | true         | function is  | CasADi::FXIn |\n|              |              |              | sparse       | ternal       |\n+--------------+--------------+--------------+--------------+--------------+\n| sparsity_gen | OT_SPARSITYG | GenericType( | Function     | CasADi::FXIn |\n| erator       | ENERATOR     | )            | that         | ternal       |\n|              |              |              | provides     |              |\n|              |              |              | sparsity for |              |\n|              |              |              | a given      |              |\n|              |              |              | input output |              |\n|              |              |              | block,       |              |\n|              |              |              | overrides    |              |\n|              |              |              | internal     |              |\n|              |              |              | routines.    |              |\n|              |              |              | Check docume |              |\n|              |              |              | ntation of S |              |\n|              |              |              | parsityGener |              |\n|              |              |              | ator .       |              |\n+--------------+--------------+--------------+--------------+--------------+\n| store_jacobi | OT_BOOLEAN   | false        | keep         | CasADi::FXIn |\n| ans          |              |              | references   | ternal       |\n|              |              |              | to generated |              |\n|              |              |              | Jacobians in |              |\n|              |              |              | order to     |              |\n|              |              |              | avoid        |              |\n|              |              |              | generating   |              |\n|              |              |              | identical    |              |\n|              |              |              | Jacobians    |              |\n|              |              |              | multiple     |              |\n|              |              |              | times        |              |\n+--------------+--------------+--------------+--------------+--------------+\n| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::FXIn |\n|              |              | )            | defined      | ternal       |\n|              |              |              | field that   |              |\n|              |              |              | can be used  |              |\n|              |              |              | to identify  |              |\n|              |              |              | the function |              |\n|              |              |              | or pass      |              |\n|              |              |              | additional   |              |\n|              |              |              | information  |              |\n+--------------+--------------+--------------+--------------+--------------+\n| verbose      | OT_BOOLEAN   | false        | verbose      | CasADi::FXIn |\n|              |              |              | evaluation   | ternal       |\n|              |              |              | for          |              |\n|              |              |              | debugging    |              |\n+--------------+--------------+--------------+--------------+--------------+\n\nDiagrams\n\nC++ includes: custom_function.hpp "


functor :: Class
functor = Class Functor methods docs
  where
    methods =
      [

      ]
    docs = Doc "\n\nInternal class for Functor.\n\nJoris Gillis\n\nC++ includes: functor.hpp "

casadimeta :: Class
casadimeta = Class CasadiMeta methods docs
  where
    methods =
      [
        Method (Name "getVersion") valStdString [] Static (Doc "") ,
        Method (Name "getGitRevision") valStdString [] Static (Doc "") ,
        Method (Name "getGitDescribe") valStdString [] Static (Doc "") ,
        Method (Name "getFeatureList") valStdString [] Static (Doc "") ,
        Method (Name "getBuildType") valStdString [] Static (Doc "") ,
        Method (Name "getCompilerId") valStdString [] Static (Doc "") ,
        Method (Name "getCompiler") valStdString [] Static (Doc "") ,
        Method (Name "getCompilerFlags") valStdString [] Static (Doc "") 
      ]
    docs = Doc "\n\nCollects global CasADi meta information.\n\nJoris Gillis\n\nC++ includes: casadi_meta.hpp "
      

sx :: Class
sx = Class SX methods docs
  where
    methods =
      [
        Method (Name "binary") valSX [valCInt,constrefSX,constrefSX] Static (Doc "") ,
        Method (Name "unary") valSX [valCInt,constrefSX] Static (Doc "") ,
        Method (Name "__nonzero__") valCBool [] Normal (Doc "\n\nCheck the truth value of this node Introduced to catch bool(x) situations in\npython.\n\n") ,
        Method (Name "isLeaf") valCBool [] Normal (Doc "\n\ncheck if this SX is a leaf of the SX graph\n\nAn SX qualifies as leaf when it has no dependencies.\n\n") ,
        Method (Name "isConstant") valCBool [] Normal (Doc "") ,
        Method (Name "isInteger") valCBool [] Normal (Doc "") ,
        Method (Name "isSymbolic") valCBool [] Normal (Doc "") ,
        Method (Name "hasDep") valCBool [] Normal (Doc "") ,
        Method (Name "isCommutative") valCBool [] Normal (Doc "\n\nCheck wether a binary SX is commutative.\n\n") ,
        Method (Name "isZero") valCBool [] Normal (Doc "") ,
        Method (Name "isOne") valCBool [] Normal (Doc "") ,
        Method (Name "isMinusOne") valCBool [] Normal (Doc "") ,
        Method (Name "isNan") valCBool [] Normal (Doc "") ,
        Method (Name "isInf") valCBool [] Normal (Doc "") ,
        Method (Name "isMinusInf") valCBool [] Normal (Doc "") ,
        Method (Name "getOp") valCInt [] Normal (Doc "") ,
        Method (Name "isOp") valCBool [valCInt] Normal (Doc "") ,
        Method (Name "isEqual") valCBool [constrefSX,valCInt] Normal (Doc "\n\nCheck if two nodes are equivalent up to a given depth. Depth=0 checks if the\nexpressions are identical, i.e. points to the same node.\n\na = x*x b = x*x\n\na.isEqual(b,0) will return false, but a.isEqual(b,1) will return true\n\n") ,
        Method (Name "isEqual'") valCBool [constrefSX] Normal (Doc "\n\nCheck if two nodes are equivalent up to a given depth. Depth=0 checks if the\nexpressions are identical, i.e. points to the same node.\n\na = x*x b = x*x\n\na.isEqual(b,0) will return false, but a.isEqual(b,1) will return true\n\n") ,
        Method (Name "isNonNegative") valCBool [] Normal (Doc "\n\nCheck if a value is always nonnegative (false negatives are allowed)\n\n") ,
        Method (Name "getValue") valCDouble [] Normal (Doc "") ,
        Method (Name "getIntValue") valCInt [] Normal (Doc "") ,
        Method (Name "getDep") valSX [valCInt] Normal (Doc "") ,
        Method (Name "getDep'") valSX [] Normal (Doc "") ,
        Method (Name "isDoubled") valCBool [] Normal (Doc "\n\nCheck if the node is the sum of two equal expressions.\n\n") ,
        Method (Name "getNdeps") valCInt [] Normal (Doc "\n\nGet the number of dependencies of a binary SX.\n\n") ,
        Method (Name "__hash__") valCLong [] Normal (Doc "\n\nReturns a number that is unique for a given SXNode. If the SX does not point\nto any node, 0 is returned.\n\n") ,
        Method (Name "operator -") valSX [] Normal (Doc "") ,
        Method (Name "__add__") valSX [constrefSX] Normal (Doc "") ,
        Method (Name "__sub__") valSX [constrefSX] Normal (Doc "") ,
        Method (Name "__mul__") valSX [constrefSX] Normal (Doc "") ,
        Method (Name "__div__") valSX [constrefSX] Normal (Doc "") ,
        Method (Name "__lt__") valSX [constrefSX] Normal (Doc "") ,
        Method (Name "__le__") valSX [constrefSX] Normal (Doc "") ,
        Method (Name "__eq__") valSX [constrefSX] Normal (Doc "") ,
        Method (Name "__ne__") valSX [constrefSX] Normal (Doc "") ,
        Method (Name "__truediv__") valSX [constrefSX] Normal (Doc "\n\nDivision (with future.division in effect)\n\n") ,
        Method (Name "__pow__") valSX [constrefSX] Normal (Doc "") ,
        Method (Name "__constpow__") valSX [constrefSX] Normal (Doc "") ,
        Method (Name "__mrdivide__") valSX [constrefSX] Normal (Doc "") ,
        Method (Name "__mpower__") valSX [constrefSX] Normal (Doc "") ,
        Method (Name "trans") valSX [] Normal (Doc "") ,
        Method (Name "mul") valSX [constrefSX] Normal (Doc "\n\nThe following functions serves two purposes: Numpy compatibility and to\nallow unambigous access.\n\n") ,
        Method (Name "exp") valSX [] Normal (Doc "") ,
        Method (Name "log") valSX [] Normal (Doc "") ,
        Method (Name "sqrt") valSX [] Normal (Doc "") ,
        Method (Name "sq") valSX [] Normal (Doc "") ,
        Method (Name "sin") valSX [] Normal (Doc "") ,
        Method (Name "cos") valSX [] Normal (Doc "") ,
        Method (Name "tan") valSX [] Normal (Doc "") ,
        Method (Name "arcsin") valSX [] Normal (Doc "") ,
        Method (Name "arccos") valSX [] Normal (Doc "") ,
        Method (Name "arctan") valSX [] Normal (Doc "") ,
        Method (Name "floor") valSX [] Normal (Doc "") ,
        Method (Name "ceil") valSX [] Normal (Doc "") ,
        Method (Name "erf") valSX [] Normal (Doc "") ,
        Method (Name "erfinv") valSX [] Normal (Doc "") ,
        Method (Name "fabs") valSX [] Normal (Doc "") ,
        Method (Name "fmin") valSX [constrefSX] Normal (Doc "") ,
        Method (Name "fmax") valSX [constrefSX] Normal (Doc "") ,
        Method (Name "inv") valSX [] Normal (Doc "") ,
        Method (Name "sinh") valSX [] Normal (Doc "") ,
        Method (Name "cosh") valSX [] Normal (Doc "") ,
        Method (Name "tanh") valSX [] Normal (Doc "") ,
        Method (Name "arcsinh") valSX [] Normal (Doc "") ,
        Method (Name "arccosh") valSX [] Normal (Doc "") ,
        Method (Name "arctanh") valSX [] Normal (Doc " ") ,
        Method (Name "arctan2") valSX [constrefSX] Normal (Doc "") ,
        Method (Name "log10") valSX [] Normal (Doc "") ,
        Method (Name "printme") valSX [constrefSX] Normal (Doc "") ,
        Method (Name "sign") valSX [] Normal (Doc "") ,
        Method (Name "constpow") valSX [constrefSX] Normal (Doc "") ,
        Method (Name "logic_not") valSX [] Normal (Doc "") ,
        Method (Name "logic_and") valSX [constrefSX] Normal (Doc "") ,
        Method (Name "logic_or") valSX [constrefSX] Normal (Doc "") ,
        Method (Name "if_else_zero") valSX [constrefSX] Normal (Doc "") ,
        Method (Name "fmin'") valSXMatrix [constrefSXMatrix] Normal (Doc "") ,
        Method (Name "fmax'") valSXMatrix [constrefSXMatrix] Normal (Doc "") ,
        Method (Name "constpow'") valSXMatrix [constrefSXMatrix] Normal (Doc "") ,
        Method (Name "arctan2'") valSXMatrix [constrefSXMatrix] Normal (Doc "") ,
        Method (Name "getTemp") valCInt [] Normal (Doc "") ,
        Method (Name "setTemp") valCVoid [valCInt] Normal (Doc "") ,
        Method (Name "marked") valCBool [] Normal (Doc "") ,
        Method (Name "mark") valCVoid [] Normal (Doc "") ,
        Method (Name "assignIfDuplicate") valCVoid [constrefSX,valCInt] Normal (Doc "\n\nAssign to another expression, if a duplicate. Check for equality up to a\ngiven depth.\n\n") ,
        Method (Name "assignIfDuplicate'") valCVoid [constrefSX] Normal (Doc "\n\nAssign to another expression, if a duplicate. Check for equality up to a\ngiven depth.\n\n") ,
        Method (Name "setMaxNumCallsInPrint") valCVoid [valCLong] Static (Doc "") ,
        Method (Name "setMaxNumCallsInPrint'") valCVoid [] Static (Doc "") ,
        Method (Name "getMaxNumCallsInPrint") valCLong [] Static (Doc "") ,
        Method (Name "setEqualityCheckingDepth") valCVoid [valCInt] Static (Doc "") ,
        Method (Name "setEqualityCheckingDepth'") valCVoid [] Static (Doc "") ,
        Method (Name "getEqualityCheckingDepth") valCInt [] Static (Doc "") ,
        Method (Name "isNull") valCBool [] Normal (Doc "\n\nSX nodes are not allowed to be null.\n\n") ,
        Method (Name "SX") valSX [] Constructor (Doc "\n\n>  CasADi::SX::SX()\n------------------------------------------------------------------------\n\nConstructors.\n\nDefault constructor (not-a-number)\n\nObject is initialised as not-a-number.\n\n>  CasADi::SX::SX(double val)\n------------------------------------------------------------------------\n\nNumerical constant constructor.\n\nParameters:\n-----------\n\nval:  Numerical value\n\n>  CasADi::SX::SX(const std::string &name)\n------------------------------------------------------------------------\n\nSymbolic constructor.\n\nParameters:\n-----------\n\nname:  Name of the symbol\n\nThis is the name that wil be used by the \"operator<<\" and \"toSTring\"\nmethods. The name is not used as identifier; you may construct distinct SX\nobjects with non-unique names.\n\n>  CasADi::SX::SX(SXNode *node, bool dummy)\n------------------------------------------------------------------------\n\nSymbolic constructor.\n\nParameters:\n-----------\n\nName:  of the symbol\n\nThis is the name that wil be used by the \"operator<<\" and \"toSTring\"\nmethods. The name is not used as identifier; you may construct distinct SX\nobjects with non-unique names.Create an expression from a node: extra dummy\nargument to avoid ambigousity for 0/NULL\n\n>  CasADi::SX::SX(const SX &scalar)\n------------------------------------------------------------------------\n\nCopy constructor.\n\n") ,
        Method (Name "SX'") valSX [valCDouble] Constructor (Doc "\n\n>  CasADi::SX::SX()\n------------------------------------------------------------------------\n\nConstructors.\n\nDefault constructor (not-a-number)\n\nObject is initialised as not-a-number.\n\n>  CasADi::SX::SX(double val)\n------------------------------------------------------------------------\n\nNumerical constant constructor.\n\nParameters:\n-----------\n\nval:  Numerical value\n\n>  CasADi::SX::SX(const std::string &name)\n------------------------------------------------------------------------\n\nSymbolic constructor.\n\nParameters:\n-----------\n\nname:  Name of the symbol\n\nThis is the name that wil be used by the \"operator<<\" and \"toSTring\"\nmethods. The name is not used as identifier; you may construct distinct SX\nobjects with non-unique names.\n\n>  CasADi::SX::SX(SXNode *node, bool dummy)\n------------------------------------------------------------------------\n\nSymbolic constructor.\n\nParameters:\n-----------\n\nName:  of the symbol\n\nThis is the name that wil be used by the \"operator<<\" and \"toSTring\"\nmethods. The name is not used as identifier; you may construct distinct SX\nobjects with non-unique names.Create an expression from a node: extra dummy\nargument to avoid ambigousity for 0/NULL\n\n>  CasADi::SX::SX(const SX &scalar)\n------------------------------------------------------------------------\n\nCopy constructor.\n\n") ,
        Method (Name "SX''") valSX [constrefStdString] Constructor (Doc "\n\n>  CasADi::SX::SX()\n------------------------------------------------------------------------\n\nConstructors.\n\nDefault constructor (not-a-number)\n\nObject is initialised as not-a-number.\n\n>  CasADi::SX::SX(double val)\n------------------------------------------------------------------------\n\nNumerical constant constructor.\n\nParameters:\n-----------\n\nval:  Numerical value\n\n>  CasADi::SX::SX(const std::string &name)\n------------------------------------------------------------------------\n\nSymbolic constructor.\n\nParameters:\n-----------\n\nname:  Name of the symbol\n\nThis is the name that wil be used by the \"operator<<\" and \"toSTring\"\nmethods. The name is not used as identifier; you may construct distinct SX\nobjects with non-unique names.\n\n>  CasADi::SX::SX(SXNode *node, bool dummy)\n------------------------------------------------------------------------\n\nSymbolic constructor.\n\nParameters:\n-----------\n\nName:  of the symbol\n\nThis is the name that wil be used by the \"operator<<\" and \"toSTring\"\nmethods. The name is not used as identifier; you may construct distinct SX\nobjects with non-unique names.Create an expression from a node: extra dummy\nargument to avoid ambigousity for 0/NULL\n\n>  CasADi::SX::SX(const SX &scalar)\n------------------------------------------------------------------------\n\nCopy constructor.\n\n") 
      ]
    docs = Doc "\n\nThe basic scalar symbolic class of CasADi.\n\nJoel Andersson\n\nC++ includes: sx.hpp "


csparse :: Class
csparse = Class CSparse methods docs
  where
    methods =
      [
        Method (Name "checkNode") valCBool [] Normal (Doc "\n\nCheck if the node is pointing to the right type of object.\n\n") ,
        Method (Name "CSparse") valCSparse [] Constructor (Doc "\n\n>  CasADi::CSparse::CSparse()\n------------------------------------------------------------------------\n\nDefault (empty) constructor.\n\n>  CasADi::CSparse::CSparse(const CRSSparsity &sp, int nrhs=1)\n------------------------------------------------------------------------\n\nCreate a linear solver given a sparsity pattern.\n\n") ,
        Method (Name "CSparse'") valCSparse [constrefCRSSparsity,valCInt] Constructor (Doc "\n\n>  CasADi::CSparse::CSparse()\n------------------------------------------------------------------------\n\nDefault (empty) constructor.\n\n>  CasADi::CSparse::CSparse(const CRSSparsity &sp, int nrhs=1)\n------------------------------------------------------------------------\n\nCreate a linear solver given a sparsity pattern.\n\n") ,
        Method (Name "CSparse''") valCSparse [constrefCRSSparsity] Constructor (Doc "\n\n>  CasADi::CSparse::CSparse()\n------------------------------------------------------------------------\n\nDefault (empty) constructor.\n\n>  CasADi::CSparse::CSparse(const CRSSparsity &sp, int nrhs=1)\n------------------------------------------------------------------------\n\nCreate a linear solver given a sparsity pattern.\n\n") 
      ]
    docs = Doc "\n\nLinearSolver with CSparse Interface.\n\nSolves the linear system X*A = B or X*A^T = B for X with A square and non-\nsingular\n\nIf A is structurally singular, an error will be thrown during init. If A is\nnumerically singular, the prepare step will fail.\n\nNote: the transposed form is equivalent to A X^T = B^T which is the same as\nA x = b with x = X^T, b = B^T\n\nCSparse is an CasADi::FX mapping from 2 inputs [ A (matrix),b (vector)] to\none output [x (vector)].\n\nThe usual procedure to use CSparse is:  init()\n\nset the first input (A)\n\nprepare()\n\nset the second input (b)\n\nsolve()\n\nRepeat steps 4 and 5 to work with other b vectors.\n\nThe method evaluate() combines the prepare() and solve() step and is\ntherefore more expensive if A is invariant.\n\n>Input scheme: CasADi::LinsolInput (LINSOL_NUM_IN = 4) [linsolIn]\n+-----------+-------+------------------------------------------------+\n| Full name | Short |                  Description                   |\n+===========+=======+================================================+\n| LINSOL_A  | A     | The square matrix A: sparse, (n x n). .        |\n+-----------+-------+------------------------------------------------+\n| LINSOL_B  | B     | The right-hand-side matrix b: dense, (m x n) . |\n+-----------+-------+------------------------------------------------+\n\n>Output scheme: CasADi::LinsolOutput (LINSOL_NUM_OUT = 2) [linsolOut]\n+-----------+-------+----------------------------------------------+\n| Full name | Short |                 Description                  |\n+===========+=======+==============================================+\n| LINSOL_X  | X     | Solution to the linear system of equations . |\n+-----------+-------+----------------------------------------------+\n\n>List of available options\n+--------------+--------------+--------------+--------------+--------------+\n|      Id      |     Type     |   Default    | Description  |   Used in    |\n+==============+==============+==============+==============+==============+\n| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::FXIn |\n|              |              |              | calculate    | ternal       |\n|              |              |              | the          |              |\n|              |              |              | Jacobians.   |              |\n|              |              |              | (forward:    |              |\n|              |              |              | only forward |              |\n|              |              |              | mode|reverse |              |\n|              |              |              | : only       |              |\n|              |              |              | adjoint mode |              |\n|              |              |              | |automatic:  |              |\n|              |              |              | a heuristic  |              |\n|              |              |              | decides      |              |\n|              |              |              | which is     |              |\n|              |              |              | more         |              |\n|              |              |              | appropriate) |              |\n+--------------+--------------+--------------+--------------+--------------+\n| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::FXIn |\n|              |              |              | indicate     | ternal       |\n|              |              |              | wether       |              |\n|              |              |              | statistics   |              |\n|              |              |              | must be      |              |\n|              |              |              | gathered     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::FXIn |\n|              |              |              | exceptions   | ternal       |\n|              |              |              | when the     |              |\n|              |              |              | numerical    |              |\n|              |              |              | values of    |              |\n|              |              |              | the inputs   |              |\n|              |              |              | don't make   |              |\n|              |              |              | sense        |              |\n+--------------+--------------+--------------+--------------+--------------+\n| jacobian_gen | OT_JACOBIANG | GenericType( | Function     | CasADi::FXIn |\n| erator       | ENERATOR     | )            | that returns | ternal       |\n|              |              |              | a Jacobian   |              |\n|              |              |              | function     |              |\n|              |              |              | given a set  |              |\n|              |              |              | of desired   |              |\n|              |              |              | Jacobian     |              |\n|              |              |              | blocks,      |              |\n|              |              |              | overrides    |              |\n|              |              |              | internal     |              |\n|              |              |              | routines.    |              |\n|              |              |              | Check docume |              |\n|              |              |              | ntation of J |              |\n|              |              |              | acobianGener |              |\n|              |              |              | ator .       |              |\n+--------------+--------------+--------------+--------------+--------------+\n| max_number_o | OT_INTEGER   | optimized_nu | Allow \"numbe | CasADi::FXIn |\n| f_adj_dir    |              | m_dir        | r_of_adj_dir | ternal       |\n|              |              |              | \" to grow    |              |\n|              |              |              | until it     |              |\n|              |              |              | reaches this |              |\n|              |              |              | number       |              |\n+--------------+--------------+--------------+--------------+--------------+\n| max_number_o | OT_INTEGER   | optimized_nu | Allow \"numbe | CasADi::FXIn |\n| f_fwd_dir    |              | m_dir        | r_of_fwd_dir | ternal       |\n|              |              |              | \" to grow    |              |\n|              |              |              | until it     |              |\n|              |              |              | reaches this |              |\n|              |              |              | number       |              |\n+--------------+--------------+--------------+--------------+--------------+\n| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::FXIn |\n|              | TOR          | )            | be activated | ternal       |\n|              |              |              | (inputs|outp |              |\n|              |              |              | uts)         |              |\n+--------------+--------------+--------------+--------------+--------------+\n| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |\n|              |              | red_object\"  | object       | onsFunctiona |\n|              |              |              |              | lityNode     |\n+--------------+--------------+--------------+--------------+--------------+\n| number_of_ad | OT_INTEGER   | 1            | number of    | CasADi::FXIn |\n| j_dir        |              |              | adjoint      | ternal       |\n|              |              |              | derivatives  |              |\n|              |              |              | to be        |              |\n|              |              |              | calculated s |              |\n|              |              |              | imultanously |              |\n+--------------+--------------+--------------+--------------+--------------+\n| number_of_fw | OT_INTEGER   | 1            | number of    | CasADi::FXIn |\n| d_dir        |              |              | forward      | ternal       |\n|              |              |              | derivatives  |              |\n|              |              |              | to be        |              |\n|              |              |              | calculated s |              |\n|              |              |              | imultanously |              |\n+--------------+--------------+--------------+--------------+--------------+\n| numeric_hess | OT_BOOLEAN   | false        | Calculate    | CasADi::FXIn |\n| ian          |              |              | Hessians     | ternal       |\n|              |              |              | numerically  |              |\n|              |              |              | (using       |              |\n|              |              |              | directional  |              |\n|              |              |              | derivatives) |              |\n|              |              |              | rather than  |              |\n|              |              |              | with the     |              |\n|              |              |              | built-in     |              |\n|              |              |              | method       |              |\n+--------------+--------------+--------------+--------------+--------------+\n| numeric_jaco | OT_BOOLEAN   | false        | Calculate    | CasADi::FXIn |\n| bian         |              |              | Jacobians    | ternal       |\n|              |              |              | numerically  |              |\n|              |              |              | (using       |              |\n|              |              |              | directional  |              |\n|              |              |              | derivatives) |              |\n|              |              |              | rather than  |              |\n|              |              |              | with the     |              |\n|              |              |              | built-in     |              |\n|              |              |              | method       |              |\n+--------------+--------------+--------------+--------------+--------------+\n| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::FXIn |\n| heck         |              |              | exceptions   | ternal       |\n|              |              |              | when NaN or  |              |\n|              |              |              | Inf appears  |              |\n|              |              |              | during       |              |\n|              |              |              | evaluation   |              |\n+--------------+--------------+--------------+--------------+--------------+\n| sparse       | OT_BOOLEAN   | true         | function is  | CasADi::FXIn |\n|              |              |              | sparse       | ternal       |\n+--------------+--------------+--------------+--------------+--------------+\n| sparsity_gen | OT_SPARSITYG | GenericType( | Function     | CasADi::FXIn |\n| erator       | ENERATOR     | )            | that         | ternal       |\n|              |              |              | provides     |              |\n|              |              |              | sparsity for |              |\n|              |              |              | a given      |              |\n|              |              |              | input output |              |\n|              |              |              | block,       |              |\n|              |              |              | overrides    |              |\n|              |              |              | internal     |              |\n|              |              |              | routines.    |              |\n|              |              |              | Check docume |              |\n|              |              |              | ntation of S |              |\n|              |              |              | parsityGener |              |\n|              |              |              | ator .       |              |\n+--------------+--------------+--------------+--------------+--------------+\n| store_jacobi | OT_BOOLEAN   | false        | keep         | CasADi::FXIn |\n| ans          |              |              | references   | ternal       |\n|              |              |              | to generated |              |\n|              |              |              | Jacobians in |              |\n|              |              |              | order to     |              |\n|              |              |              | avoid        |              |\n|              |              |              | generating   |              |\n|              |              |              | identical    |              |\n|              |              |              | Jacobians    |              |\n|              |              |              | multiple     |              |\n|              |              |              | times        |              |\n+--------------+--------------+--------------+--------------+--------------+\n| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::FXIn |\n|              |              | )            | defined      | ternal       |\n|              |              |              | field that   |              |\n|              |              |              | can be used  |              |\n|              |              |              | to identify  |              |\n|              |              |              | the function |              |\n|              |              |              | or pass      |              |\n|              |              |              | additional   |              |\n|              |              |              | information  |              |\n+--------------+--------------+--------------+--------------+--------------+\n| verbose      | OT_BOOLEAN   | false        | verbose      | CasADi::FXIn |\n|              |              |              | evaluation   | ternal       |\n|              |              |              | for          |              |\n|              |              |              | debugging    |              |\n+--------------+--------------+--------------+--------------+--------------+\n\nDiagrams\n\nC++ includes: csparse.hpp "
externalfunction :: Class
externalfunction = Class ExternalFunction methods docs
  where
    methods =
      [
        Method (Name "checkNode") valCBool [] Normal (Doc "\n\nCheck if the pointer points towards a valid object.\n\n") ,
        Method (Name "ExternalFunction") valExternalFunction [] Constructor (Doc "\n\n>  CasADi::ExternalFunction::ExternalFunction()\n------------------------------------------------------------------------\n\nCONSTRUCTORS:\n\ndefault constructor\n\n>  CasADi::ExternalFunction::ExternalFunction(const std::string &bin_name)\n------------------------------------------------------------------------\n\nCreate an empty function.\n\n") ,
        Method (Name "ExternalFunction'") valExternalFunction [constrefStdString] Constructor (Doc "\n\n>  CasADi::ExternalFunction::ExternalFunction()\n------------------------------------------------------------------------\n\nCONSTRUCTORS:\n\ndefault constructor\n\n>  CasADi::ExternalFunction::ExternalFunction(const std::string &bin_name)\n------------------------------------------------------------------------\n\nCreate an empty function.\n\n") 
      ]
    docs = Doc "\n\nInterface for a function that is not implemented by CasADi symbolics.\n\nJoel Andersson\n\n>List of available options\n+--------------+--------------+--------------+--------------+--------------+\n|      Id      |     Type     |   Default    | Description  |   Used in    |\n+==============+==============+==============+==============+==============+\n| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::FXIn |\n|              |              |              | calculate    | ternal       |\n|              |              |              | the          |              |\n|              |              |              | Jacobians.   |              |\n|              |              |              | (forward:    |              |\n|              |              |              | only forward |              |\n|              |              |              | mode|reverse |              |\n|              |              |              | : only       |              |\n|              |              |              | adjoint mode |              |\n|              |              |              | |automatic:  |              |\n|              |              |              | a heuristic  |              |\n|              |              |              | decides      |              |\n|              |              |              | which is     |              |\n|              |              |              | more         |              |\n|              |              |              | appropriate) |              |\n+--------------+--------------+--------------+--------------+--------------+\n| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::FXIn |\n|              |              |              | indicate     | ternal       |\n|              |              |              | wether       |              |\n|              |              |              | statistics   |              |\n|              |              |              | must be      |              |\n|              |              |              | gathered     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::FXIn |\n|              |              |              | exceptions   | ternal       |\n|              |              |              | when the     |              |\n|              |              |              | numerical    |              |\n|              |              |              | values of    |              |\n|              |              |              | the inputs   |              |\n|              |              |              | don't make   |              |\n|              |              |              | sense        |              |\n+--------------+--------------+--------------+--------------+--------------+\n| jacobian_gen | OT_JACOBIANG | GenericType( | Function     | CasADi::FXIn |\n| erator       | ENERATOR     | )            | that returns | ternal       |\n|              |              |              | a Jacobian   |              |\n|              |              |              | function     |              |\n|              |              |              | given a set  |              |\n|              |              |              | of desired   |              |\n|              |              |              | Jacobian     |              |\n|              |              |              | blocks,      |              |\n|              |              |              | overrides    |              |\n|              |              |              | internal     |              |\n|              |              |              | routines.    |              |\n|              |              |              | Check docume |              |\n|              |              |              | ntation of J |              |\n|              |              |              | acobianGener |              |\n|              |              |              | ator .       |              |\n+--------------+--------------+--------------+--------------+--------------+\n| max_number_o | OT_INTEGER   | optimized_nu | Allow \"numbe | CasADi::FXIn |\n| f_adj_dir    |              | m_dir        | r_of_adj_dir | ternal       |\n|              |              |              | \" to grow    |              |\n|              |              |              | until it     |              |\n|              |              |              | reaches this |              |\n|              |              |              | number       |              |\n+--------------+--------------+--------------+--------------+--------------+\n| max_number_o | OT_INTEGER   | optimized_nu | Allow \"numbe | CasADi::FXIn |\n| f_fwd_dir    |              | m_dir        | r_of_fwd_dir | ternal       |\n|              |              |              | \" to grow    |              |\n|              |              |              | until it     |              |\n|              |              |              | reaches this |              |\n|              |              |              | number       |              |\n+--------------+--------------+--------------+--------------+--------------+\n| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::FXIn |\n|              | TOR          | )            | be activated | ternal       |\n|              |              |              | (inputs|outp |              |\n|              |              |              | uts)         |              |\n+--------------+--------------+--------------+--------------+--------------+\n| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |\n|              |              | red_object\"  | object       | onsFunctiona |\n|              |              |              |              | lityNode     |\n+--------------+--------------+--------------+--------------+--------------+\n| number_of_ad | OT_INTEGER   | 1            | number of    | CasADi::FXIn |\n| j_dir        |              |              | adjoint      | ternal       |\n|              |              |              | derivatives  |              |\n|              |              |              | to be        |              |\n|              |              |              | calculated s |              |\n|              |              |              | imultanously |              |\n+--------------+--------------+--------------+--------------+--------------+\n| number_of_fw | OT_INTEGER   | 1            | number of    | CasADi::FXIn |\n| d_dir        |              |              | forward      | ternal       |\n|              |              |              | derivatives  |              |\n|              |              |              | to be        |              |\n|              |              |              | calculated s |              |\n|              |              |              | imultanously |              |\n+--------------+--------------+--------------+--------------+--------------+\n| numeric_hess | OT_BOOLEAN   | false        | Calculate    | CasADi::FXIn |\n| ian          |              |              | Hessians     | ternal       |\n|              |              |              | numerically  |              |\n|              |              |              | (using       |              |\n|              |              |              | directional  |              |\n|              |              |              | derivatives) |              |\n|              |              |              | rather than  |              |\n|              |              |              | with the     |              |\n|              |              |              | built-in     |              |\n|              |              |              | method       |              |\n+--------------+--------------+--------------+--------------+--------------+\n| numeric_jaco | OT_BOOLEAN   | false        | Calculate    | CasADi::FXIn |\n| bian         |              |              | Jacobians    | ternal       |\n|              |              |              | numerically  |              |\n|              |              |              | (using       |              |\n|              |              |              | directional  |              |\n|              |              |              | derivatives) |              |\n|              |              |              | rather than  |              |\n|              |              |              | with the     |              |\n|              |              |              | built-in     |              |\n|              |              |              | method       |              |\n+--------------+--------------+--------------+--------------+--------------+\n| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::FXIn |\n| heck         |              |              | exceptions   | ternal       |\n|              |              |              | when NaN or  |              |\n|              |              |              | Inf appears  |              |\n|              |              |              | during       |              |\n|              |              |              | evaluation   |              |\n+--------------+--------------+--------------+--------------+--------------+\n| sparse       | OT_BOOLEAN   | true         | function is  | CasADi::FXIn |\n|              |              |              | sparse       | ternal       |\n+--------------+--------------+--------------+--------------+--------------+\n| sparsity_gen | OT_SPARSITYG | GenericType( | Function     | CasADi::FXIn |\n| erator       | ENERATOR     | )            | that         | ternal       |\n|              |              |              | provides     |              |\n|              |              |              | sparsity for |              |\n|              |              |              | a given      |              |\n|              |              |              | input output |              |\n|              |              |              | block,       |              |\n|              |              |              | overrides    |              |\n|              |              |              | internal     |              |\n|              |              |              | routines.    |              |\n|              |              |              | Check docume |              |\n|              |              |              | ntation of S |              |\n|              |              |              | parsityGener |              |\n|              |              |              | ator .       |              |\n+--------------+--------------+--------------+--------------+--------------+\n| store_jacobi | OT_BOOLEAN   | false        | keep         | CasADi::FXIn |\n| ans          |              |              | references   | ternal       |\n|              |              |              | to generated |              |\n|              |              |              | Jacobians in |              |\n|              |              |              | order to     |              |\n|              |              |              | avoid        |              |\n|              |              |              | generating   |              |\n|              |              |              | identical    |              |\n|              |              |              | Jacobians    |              |\n|              |              |              | multiple     |              |\n|              |              |              | times        |              |\n+--------------+--------------+--------------+--------------+--------------+\n| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::FXIn |\n|              |              | )            | defined      | ternal       |\n|              |              |              | field that   |              |\n|              |              |              | can be used  |              |\n|              |              |              | to identify  |              |\n|              |              |              | the function |              |\n|              |              |              | or pass      |              |\n|              |              |              | additional   |              |\n|              |              |              | information  |              |\n+--------------+--------------+--------------+--------------+--------------+\n| verbose      | OT_BOOLEAN   | false        | verbose      | CasADi::FXIn |\n|              |              |              | evaluation   | ternal       |\n|              |              |              | for          |              |\n|              |              |              | debugging    |              |\n+--------------+--------------+--------------+--------------+--------------+\n\nDiagrams\n\nC++ includes: external_function.hpp "


customevaluate :: Class
customevaluate = Class CustomEvaluate methods docs
  where
    methods =
      [
        Method (Name "CustomEvaluate") valCustomEvaluate [] Constructor (Doc "\n\n>  CasADi::CustomEvaluate::CustomEvaluate()\n------------------------------------------------------------------------\n\nDefault constructor.\n\n>  CasADi::CustomEvaluate::CustomEvaluate(CustomEvaluateCPtr ptr)\n------------------------------------------------------------------------\n\nConstruct from C pointer.\n\n") 
      ]
    docs = Doc "\n\nCustomEvaluate.\n\nIn C++, supply a CustomEvaluateCPtr function pointer\n\nIn python, supply a callable, annotated with pyevaluate decorator\n\nC++ includes: functor.hpp "
      

callback :: Class
callback = Class Callback methods docs
  where
    methods =
      [
        Method (Name "Callback") valCallback [] Constructor (Doc "\n\n>  CasADi::Callback::Callback()\n------------------------------------------------------------------------\n\nDefault constructor.\n\n>  CasADi::Callback::Callback(CallbackCPtr ptr)\n------------------------------------------------------------------------\n\nConstruct from C pointer.\n\n") 
      ]
    docs = Doc "\n\nCallback.\n\nIn C++, supply a CallbackCPtr function pointer\n\nIn python, supply a callable, annotated with pycallback decorator\n\nC++ includes: functor.hpp "

casadioptions :: Class
casadioptions = Class CasadiOptions methods docs
  where
    methods =
      [
        Method (Name "setCatchErrorsPython") valCVoid [valCBool] Static (Doc "") ,
        Method (Name "getCatchErrorsPython") valCBool [] Static (Doc "") ,
        Method (Name "setSimplificationOnTheFly") valCVoid [valCBool] Static (Doc "") ,
        Method (Name "getSimplificationOnTheFly") valCBool [] Static (Doc "") ,
        Method (Name "startProfiling") valCVoid [constrefStdString] Static (Doc "") ,
        Method (Name "stopProfiling") valCVoid [] Static (Doc "") 
      ]
    docs = Doc "\n\nCollects global CasADi options.\n\nNote to developers: use sparingly. Global options are - in general - a\nrather bad idea\n\nthis class must never be instantiated. Access its static members directly\n\nJoris Gillis\n\nC++ includes: casadi_options.hpp "

mx :: Class
mx = Class MX methods docs
  where
    methods =
      matrixMethods ++ [
        Method (Name "__nonzero__") valCBool [] Normal (Doc "\n\nReturns the truth value of an MX expression.\n\n") ,
        Method (Name "sparsityRef") valCRSSparsity [] Normal (Doc "\n\nAccess the sparsity, make a copy if there are multiple references to it.\n\n") ,
        Method (Name "erase") valCVoid [constrefCIntVec,constrefCIntVec] Normal (Doc "\n\nErase a submatrix.\n\n") ,
        Method (Name "enlarge") valCVoid [valCInt,valCInt,constrefCIntVec,constrefCIntVec] Normal (Doc "\n\nEnlarge matrix Make the matrix larger by inserting empty rows and columns,\nkeeping the existing non-zeros.\n\n") ,
        Method (Name "operator -") valMX [] Normal (Doc "") ,
        Method (Name "getDep") valMX [valCInt] Normal (Doc "\n\nGet the nth dependency as MX.\n\n") ,
        Method (Name "getDep'") valMX [] Normal (Doc "\n\nGet the nth dependency as MX.\n\n") ,
        Method (Name "getNumOutputs") valCInt [] Normal (Doc "\n\nNumber of outputs.\n\n") ,
        Method (Name "getOutput") valMX [valCInt] Normal (Doc "\n\nGet an output.\n\n") ,
        Method (Name "getOutput'") valMX [] Normal (Doc "\n\nGet an output.\n\n") ,
        Method (Name "getNdeps") valCInt [] Normal (Doc "\n\nGet the number of dependencies of a binary SX.\n\n") ,
        Method (Name "getName") valStdString [] Normal (Doc "\n\nGet the name.\n\n") ,
        Method (Name "getValue") valCDouble [] Normal (Doc "\n\nGet the value (only for scalar constant nodes)\n\n") ,
        Method (Name "getMatrixValue") valDMatrix [] Normal (Doc "\n\nGet the value (only for constant nodes)\n\n") ,
        Method (Name "isSymbolic") valCBool [] Normal (Doc "\n\nCheck if symbolic.\n\n") ,
        Method (Name "isConstant") valCBool [] Normal (Doc "\n\nCheck if constant.\n\n") ,
        Method (Name "isEvaluation") valCBool [] Normal (Doc "\n\nCheck if evaluation.\n\n") ,
        Method (Name "isEvaluationOutput") valCBool [] Normal (Doc "\n\nCheck if evaluation output.\n\n") ,
        Method (Name "getEvaluationOutput") valCInt [] Normal (Doc "\n\nGet the index of evaluation output - only valid when isEvaluationoutput() is\ntrue.\n\n") ,
        Method (Name "isOperation") valCBool [valCInt] Normal (Doc "\n\nIs it a certain operation.\n\n") ,
        Method (Name "isMultiplication") valCBool [] Normal (Doc "\n\nCheck if multiplication.\n\n") ,
        Method (Name "isCommutative") valCBool [] Normal (Doc "\n\nCheck if commutative operation.\n\n") ,
        Method (Name "isNorm") valCBool [] Normal (Doc "\n\nCheck if norm.\n\n") ,
        Method (Name "getFunction") valFX [] Normal (Doc "\n\nGet function.\n\n") ,
        Method (Name "isBinary") valCBool [] Normal (Doc "\n\nIs binary operation.\n\n") ,
        Method (Name "isUnary") valCBool [] Normal (Doc "\n\nIs unary operation.\n\n") ,
        Method (Name "getOp") valCInt [] Normal (Doc "\n\nGet operation type.\n\n") ,
        Method (Name "isEqual") valCBool [constrefMX,valCInt] Normal (Doc "\n\n>  bool CasADi::MX::isEqual(const MX &y, int depth=0) const \n------------------------------------------------------------------------\n\nCheck if two nodes are equivalent up to a given depth. Depth=0 checks if the\nexpressions are identical, i.e. points to the same node.\n\na = x*x b = x*x\n\na.isEqual(b,0) will return false, but a.isEqual(b,1) will return true\n\n") ,
        Method (Name "isEqual'") valCBool [constrefMX] Normal (Doc "\n\n>  bool CasADi::MX::isEqual(const MX &y, int depth=0) const \n------------------------------------------------------------------------\n\nCheck if two nodes are equivalent up to a given depth. Depth=0 checks if the\nexpressions are identical, i.e. points to the same node.\n\na = x*x b = x*x\n\na.isEqual(b,0) will return false, but a.isEqual(b,1) will return true\n\n") ,
        Method (Name "__hash__") valCLong [] Normal (Doc "\n\nReturns a number that is unique for a given MXNode. If the MX does not point\nto any node, 0 is returned.\n\n") ,
        Method (Name "getTemp") valCInt [] Normal (Doc "\n\nGet the temporary variable.\n\n") ,
        Method (Name "setTemp") valCVoid [valCInt] Normal (Doc "\n\nSet the temporary variable.\n\n") ,
        Method (Name "binary") valMX [valCInt,constrefMX,constrefMX] Static (Doc "\n\nCreate nodes by their ID.\n\n") ,
        Method (Name "unary") valMX [valCInt,constrefMX] Static (Doc "\n\nCreate nodes by their ID.\n\n") ,
        Method (Name "sparse") valMX [valCInt,valCInt] Static (Doc "\n\nSparse matrix of all zeros.\n\n") ,
        Method (Name "sparse'") valMX [valCInt] Static (Doc "\n\nSparse matrix of all zeros.\n\n") ,
        Method (Name "zeros") valMX [constrefCRSSparsity] Static (Doc "\n\nDense matrix of all zeros.\n\n") ,
        Method (Name "zeros'") valMX [valCInt,valCInt] Static (Doc "\n\nDense matrix of all zeros.\n\n") ,
        Method (Name "zeros''") valMX [valCInt] Static (Doc "\n\nDense matrix of all zeros.\n\n") ,
        Method (Name "ones") valMX [constrefCRSSparsity] Static (Doc "\n\nMatrix of all ones.\n\n") ,
        Method (Name "ones'") valMX [valCInt,valCInt] Static (Doc "\n\nMatrix of all ones.\n\n") ,
        Method (Name "ones''") valMX [valCInt] Static (Doc "\n\nMatrix of all ones.\n\n") ,
        Method (Name "inf") valMX [constrefCRSSparsity] Static (Doc "\n\ncreate a matrix with all inf\n\n") ,
        Method (Name "inf'") valMX [valCInt,valCInt] Static (Doc "\n\ncreate a matrix with all inf\n\n") ,
        Method (Name "inf''") valMX [valCInt] Static (Doc "\n\ncreate a matrix with all inf\n\n") ,
        Method (Name "inf'''") valMX [] Static (Doc "\n\ncreate a matrix with all inf\n\n") ,
        Method (Name "nan") valMX [constrefCRSSparsity] Static (Doc "\n\ncreate a matrix with all nan\n\n") ,
        Method (Name "nan'") valMX [valCInt,valCInt] Static (Doc "\n\ncreate a matrix with all nan\n\n") ,
        Method (Name "nan''") valMX [valCInt] Static (Doc "\n\ncreate a matrix with all nan\n\n") ,
        Method (Name "nan'''") valMX [] Static (Doc "\n\ncreate a matrix with all nan\n\n") ,
        Method (Name "repmat") valMX [constrefMX,valCInt,valCInt] Static (Doc "\n\ncreate a matrix by repeating an existing matrix\n\n") ,
        Method (Name "repmat'") valMX [constrefMX,valCInt] Static (Doc "\n\ncreate a matrix by repeating an existing matrix\n\n") ,
        Method (Name "eye") valMX [valCInt] Static (Doc "") ,
        Method (Name "getNZ") valMX [valCInt] Normal (Doc "") ,
        Method (Name "getNZ'") valMX [constrefCIntVec] Normal (Doc "") ,
        Method (Name "append") valCVoid [constrefMX] Normal (Doc "\n\nAppend a matrix to the end.\n\n") ,
        Method (Name "__add__") valMX [constrefMX] Normal (Doc "") ,
        Method (Name "__sub__") valMX [constrefMX] Normal (Doc "") ,
        Method (Name "__mul__") valMX [constrefMX] Normal (Doc "") ,
        Method (Name "__div__") valMX [constrefMX] Normal (Doc "") ,
        Method (Name "__lt__") valMX [constrefMX] Normal (Doc "") ,
        Method (Name "__le__") valMX [constrefMX] Normal (Doc "") ,
        Method (Name "__eq__") valMX [constrefMX] Normal (Doc "") ,
        Method (Name "__ne__") valMX [constrefMX] Normal (Doc "") ,
        Method (Name "__truediv__") valMX [constrefMX] Normal (Doc "\n\nDivision (with future.division in effect)\n\n") ,
        Method (Name "__pow__") valMX [constrefMX] Normal (Doc "") ,
        Method (Name "__constpow__") valMX [constrefMX] Normal (Doc "") ,
        Method (Name "__mrdivide__") valMX [constrefMX] Normal (Doc "") ,
        Method (Name "__mpower__") valMX [constrefMX] Normal (Doc "") ,
        Method (Name "mul") valMX [constrefMX,constrefCRSSparsity] Normal (Doc "") ,
        Method (Name "mul'") valMX [constrefMX] Normal (Doc "") ,
        Method (Name "mul_full") valMX [constrefMX,constrefCRSSparsity] Normal (Doc "") ,
        Method (Name "mul_full'") valMX [constrefMX] Normal (Doc "") ,
        Method (Name "inner_prod") valMX [constrefMX] Normal (Doc "") ,
        Method (Name "outer_prod") valMX [constrefMX] Normal (Doc "") ,
        Method (Name "constpow") valMX [constrefMX] Normal (Doc "") ,
        Method (Name "fmin") valMX [constrefMX] Normal (Doc "") ,
        Method (Name "fmax") valMX [constrefMX] Normal (Doc "") ,
        Method (Name "printme") valMX [constrefMX] Normal (Doc "") ,
        Method (Name "arctan2") valMX [constrefMX] Normal (Doc "") ,
        Method (Name "logic_and") valMX [constrefMX] Normal (Doc "") ,
        Method (Name "logic_or") valMX [constrefMX] Normal (Doc "") ,
        Method (Name "if_else_zero") valMX [constrefMX] Normal (Doc "") ,
        Method (Name "exp") valMX [] Normal (Doc "") ,
        Method (Name "log") valMX [] Normal (Doc "") ,
        Method (Name "log10") valMX [] Normal (Doc "") ,
        Method (Name "sqrt") valMX [] Normal (Doc "") ,
        Method (Name "sin") valMX [] Normal (Doc "") ,
        Method (Name "cos") valMX [] Normal (Doc "") ,
        Method (Name "tan") valMX [] Normal (Doc "") ,
        Method (Name "arcsin") valMX [] Normal (Doc "") ,
        Method (Name "arccos") valMX [] Normal (Doc "") ,
        Method (Name "arctan") valMX [] Normal (Doc "") ,
        Method (Name "floor") valMX [] Normal (Doc " ") ,
        Method (Name "ceil") valMX [] Normal (Doc "") ,
        Method (Name "fabs") valMX [] Normal (Doc "") ,
        Method (Name "sign") valMX [] Normal (Doc "") ,
        Method (Name "erfinv") valMX [] Normal (Doc "") ,
        Method (Name "erf") valMX [] Normal (Doc "") ,
        Method (Name "sinh") valMX [] Normal (Doc "") ,
        Method (Name "cosh") valMX [] Normal (Doc "") ,
        Method (Name "tanh") valMX [] Normal (Doc "") ,
        Method (Name "arcsinh") valMX [] Normal (Doc "") ,
        Method (Name "arccosh") valMX [] Normal (Doc "") ,
        Method (Name "arctanh") valMX [] Normal (Doc "") ,
        Method (Name "logic_not") valMX [] Normal (Doc "") ,
        Method (Name "attachAssert") valMX [constrefMX,constrefStdString] Normal (Doc "\n\nreturns itself, but with an assertion attached\n\nIf y does not evaluate to 1, a runtime error is raised\n\n") ,
        Method (Name "attachAssert'") valMX [constrefMX] Normal (Doc "\n\nreturns itself, but with an assertion attached\n\nIf y does not evaluate to 1, a runtime error is raised\n\n") ,
        Method (Name "setSparse") valMX [constrefCRSSparsity,valCBool] Normal (Doc "\n\nSet sparse.\n\n") ,
        Method (Name "setSparse'") valMX [constrefCRSSparsity] Normal (Doc "\n\nSet sparse.\n\n") ,
        Method (Name "makeDense") valMX [constrefMX] Normal (Doc "\n\nMake dense.\n\n") ,
        Method (Name "makeDense'") valMX [] Normal (Doc "\n\nMake dense.\n\n") ,
        Method (Name "lift") valCVoid [constrefMX] Normal (Doc "\n\nLift an expression.\n\n") ,
        Method (Name "setMaxNumCallsInPrint") valCVoid [valCLong] Static (Doc "") ,
        Method (Name "setMaxNumCallsInPrint'") valCVoid [] Static (Doc "") ,
        Method (Name "getMaxNumCallsInPrint") valCLong [] Static (Doc "") ,
        Method (Name "setEqualityCheckingDepth") valCVoid [valCInt] Static (Doc "") ,
        Method (Name "setEqualityCheckingDepth'") valCVoid [] Static (Doc "") ,
        Method (Name "getEqualityCheckingDepth") valCInt [] Static (Doc "") ,
        Method (Name "MX") valMX [] Constructor (Doc "\n\n>  CasADi::MX::MX()\n------------------------------------------------------------------------\n\nDefault constructor.\n\n>  CasADi::MX::MX(const std::string &name, int n=1, int m=1)\n\n>  CasADi::MX::MX(const std::string &name, const std::pair< int, int > &nm)\n\n>  CasADi::MX::MX(const std::string &name, const CRSSparsity &sp)\n------------------------------------------------------------------------\n\nConstruct a symbolic matrix (matrix variable)\n\n>  CasADi::MX::MX(const CRSSparsity &sp, const MX &val=0)\n------------------------------------------------------------------------\n\nConstruct MX with a given sparsity.\n\n>  CasADi::MX::MX(double x)\n------------------------------------------------------------------------\n\nCreate scalar constant (also implicit type conversion)\n\n>  CasADi::MX::MX(const MX &x)\n------------------------------------------------------------------------\n\nCopy constructor.\n\n>  CasADi::MX::MX(const std::vector< double > &x)\n------------------------------------------------------------------------\n\nCreate vector constant (also implicit type conversion)\n\n>  CasADi::MX::MX(const Matrix< double > &x)\n------------------------------------------------------------------------\n\nCreate sparse matrix constant (also implicit type conversion)\n\n>  CasADi::MX::MX(int nrow, int ncol)\n------------------------------------------------------------------------\n\nMatrix with all zeros.\n\n>  CasADi::MX::MX(int nrow, int ncol, const MX &val)\n------------------------------------------------------------------------\n\nDense matrix filled with value val.\n\n") ,
        Method (Name "MX'") valMX [constrefStdString,valCInt,valCInt] Constructor (Doc "\n\n>  CasADi::MX::MX()\n------------------------------------------------------------------------\n\nDefault constructor.\n\n>  CasADi::MX::MX(const std::string &name, int n=1, int m=1)\n\n>  CasADi::MX::MX(const std::string &name, const std::pair< int, int > &nm)\n\n>  CasADi::MX::MX(const std::string &name, const CRSSparsity &sp)\n------------------------------------------------------------------------\n\nConstruct a symbolic matrix (matrix variable)\n\n>  CasADi::MX::MX(const CRSSparsity &sp, const MX &val=0)\n------------------------------------------------------------------------\n\nConstruct MX with a given sparsity.\n\n>  CasADi::MX::MX(double x)\n------------------------------------------------------------------------\n\nCreate scalar constant (also implicit type conversion)\n\n>  CasADi::MX::MX(const MX &x)\n------------------------------------------------------------------------\n\nCopy constructor.\n\n>  CasADi::MX::MX(const std::vector< double > &x)\n------------------------------------------------------------------------\n\nCreate vector constant (also implicit type conversion)\n\n>  CasADi::MX::MX(const Matrix< double > &x)\n------------------------------------------------------------------------\n\nCreate sparse matrix constant (also implicit type conversion)\n\n>  CasADi::MX::MX(int nrow, int ncol)\n------------------------------------------------------------------------\n\nMatrix with all zeros.\n\n>  CasADi::MX::MX(int nrow, int ncol, const MX &val)\n------------------------------------------------------------------------\n\nDense matrix filled with value val.\n\n") ,
        Method (Name "MX''") valMX [constrefStdString,valCInt] Constructor (Doc "\n\n>  CasADi::MX::MX()\n------------------------------------------------------------------------\n\nDefault constructor.\n\n>  CasADi::MX::MX(const std::string &name, int n=1, int m=1)\n\n>  CasADi::MX::MX(const std::string &name, const std::pair< int, int > &nm)\n\n>  CasADi::MX::MX(const std::string &name, const CRSSparsity &sp)\n------------------------------------------------------------------------\n\nConstruct a symbolic matrix (matrix variable)\n\n>  CasADi::MX::MX(const CRSSparsity &sp, const MX &val=0)\n------------------------------------------------------------------------\n\nConstruct MX with a given sparsity.\n\n>  CasADi::MX::MX(double x)\n------------------------------------------------------------------------\n\nCreate scalar constant (also implicit type conversion)\n\n>  CasADi::MX::MX(const MX &x)\n------------------------------------------------------------------------\n\nCopy constructor.\n\n>  CasADi::MX::MX(const std::vector< double > &x)\n------------------------------------------------------------------------\n\nCreate vector constant (also implicit type conversion)\n\n>  CasADi::MX::MX(const Matrix< double > &x)\n------------------------------------------------------------------------\n\nCreate sparse matrix constant (also implicit type conversion)\n\n>  CasADi::MX::MX(int nrow, int ncol)\n------------------------------------------------------------------------\n\nMatrix with all zeros.\n\n>  CasADi::MX::MX(int nrow, int ncol, const MX &val)\n------------------------------------------------------------------------\n\nDense matrix filled with value val.\n\n") ,
        Method (Name "MX'''") valMX [constrefStdString] Constructor (Doc "\n\n>  CasADi::MX::MX()\n------------------------------------------------------------------------\n\nDefault constructor.\n\n>  CasADi::MX::MX(const std::string &name, int n=1, int m=1)\n\n>  CasADi::MX::MX(const std::string &name, const std::pair< int, int > &nm)\n\n>  CasADi::MX::MX(const std::string &name, const CRSSparsity &sp)\n------------------------------------------------------------------------\n\nConstruct a symbolic matrix (matrix variable)\n\n>  CasADi::MX::MX(const CRSSparsity &sp, const MX &val=0)\n------------------------------------------------------------------------\n\nConstruct MX with a given sparsity.\n\n>  CasADi::MX::MX(double x)\n------------------------------------------------------------------------\n\nCreate scalar constant (also implicit type conversion)\n\n>  CasADi::MX::MX(const MX &x)\n------------------------------------------------------------------------\n\nCopy constructor.\n\n>  CasADi::MX::MX(const std::vector< double > &x)\n------------------------------------------------------------------------\n\nCreate vector constant (also implicit type conversion)\n\n>  CasADi::MX::MX(const Matrix< double > &x)\n------------------------------------------------------------------------\n\nCreate sparse matrix constant (also implicit type conversion)\n\n>  CasADi::MX::MX(int nrow, int ncol)\n------------------------------------------------------------------------\n\nMatrix with all zeros.\n\n>  CasADi::MX::MX(int nrow, int ncol, const MX &val)\n------------------------------------------------------------------------\n\nDense matrix filled with value val.\n\n") ,
        Method (Name "MX''''") valMX [constrefStdString,constrefCRSSparsity] Constructor (Doc "\n\n>  CasADi::MX::MX()\n------------------------------------------------------------------------\n\nDefault constructor.\n\n>  CasADi::MX::MX(const std::string &name, int n=1, int m=1)\n\n>  CasADi::MX::MX(const std::string &name, const std::pair< int, int > &nm)\n\n>  CasADi::MX::MX(const std::string &name, const CRSSparsity &sp)\n------------------------------------------------------------------------\n\nConstruct a symbolic matrix (matrix variable)\n\n>  CasADi::MX::MX(const CRSSparsity &sp, const MX &val=0)\n------------------------------------------------------------------------\n\nConstruct MX with a given sparsity.\n\n>  CasADi::MX::MX(double x)\n------------------------------------------------------------------------\n\nCreate scalar constant (also implicit type conversion)\n\n>  CasADi::MX::MX(const MX &x)\n------------------------------------------------------------------------\n\nCopy constructor.\n\n>  CasADi::MX::MX(const std::vector< double > &x)\n------------------------------------------------------------------------\n\nCreate vector constant (also implicit type conversion)\n\n>  CasADi::MX::MX(const Matrix< double > &x)\n------------------------------------------------------------------------\n\nCreate sparse matrix constant (also implicit type conversion)\n\n>  CasADi::MX::MX(int nrow, int ncol)\n------------------------------------------------------------------------\n\nMatrix with all zeros.\n\n>  CasADi::MX::MX(int nrow, int ncol, const MX &val)\n------------------------------------------------------------------------\n\nDense matrix filled with value val.\n\n") ,
        Method (Name "MX'''''") valMX [constrefCRSSparsity,constrefMX] Constructor (Doc "\n\n>  CasADi::MX::MX()\n------------------------------------------------------------------------\n\nDefault constructor.\n\n>  CasADi::MX::MX(const std::string &name, int n=1, int m=1)\n\n>  CasADi::MX::MX(const std::string &name, const std::pair< int, int > &nm)\n\n>  CasADi::MX::MX(const std::string &name, const CRSSparsity &sp)\n------------------------------------------------------------------------\n\nConstruct a symbolic matrix (matrix variable)\n\n>  CasADi::MX::MX(const CRSSparsity &sp, const MX &val=0)\n------------------------------------------------------------------------\n\nConstruct MX with a given sparsity.\n\n>  CasADi::MX::MX(double x)\n------------------------------------------------------------------------\n\nCreate scalar constant (also implicit type conversion)\n\n>  CasADi::MX::MX(const MX &x)\n------------------------------------------------------------------------\n\nCopy constructor.\n\n>  CasADi::MX::MX(const std::vector< double > &x)\n------------------------------------------------------------------------\n\nCreate vector constant (also implicit type conversion)\n\n>  CasADi::MX::MX(const Matrix< double > &x)\n------------------------------------------------------------------------\n\nCreate sparse matrix constant (also implicit type conversion)\n\n>  CasADi::MX::MX(int nrow, int ncol)\n------------------------------------------------------------------------\n\nMatrix with all zeros.\n\n>  CasADi::MX::MX(int nrow, int ncol, const MX &val)\n------------------------------------------------------------------------\n\nDense matrix filled with value val.\n\n") ,
        Method (Name "MX''''''") valMX [constrefCRSSparsity] Constructor (Doc "\n\n>  CasADi::MX::MX()\n------------------------------------------------------------------------\n\nDefault constructor.\n\n>  CasADi::MX::MX(const std::string &name, int n=1, int m=1)\n\n>  CasADi::MX::MX(const std::string &name, const std::pair< int, int > &nm)\n\n>  CasADi::MX::MX(const std::string &name, const CRSSparsity &sp)\n------------------------------------------------------------------------\n\nConstruct a symbolic matrix (matrix variable)\n\n>  CasADi::MX::MX(const CRSSparsity &sp, const MX &val=0)\n------------------------------------------------------------------------\n\nConstruct MX with a given sparsity.\n\n>  CasADi::MX::MX(double x)\n------------------------------------------------------------------------\n\nCreate scalar constant (also implicit type conversion)\n\n>  CasADi::MX::MX(const MX &x)\n------------------------------------------------------------------------\n\nCopy constructor.\n\n>  CasADi::MX::MX(const std::vector< double > &x)\n------------------------------------------------------------------------\n\nCreate vector constant (also implicit type conversion)\n\n>  CasADi::MX::MX(const Matrix< double > &x)\n------------------------------------------------------------------------\n\nCreate sparse matrix constant (also implicit type conversion)\n\n>  CasADi::MX::MX(int nrow, int ncol)\n------------------------------------------------------------------------\n\nMatrix with all zeros.\n\n>  CasADi::MX::MX(int nrow, int ncol, const MX &val)\n------------------------------------------------------------------------\n\nDense matrix filled with value val.\n\n") ,
        Method (Name "MX'''''''") valMX [valCDouble] Constructor (Doc "\n\n>  CasADi::MX::MX()\n------------------------------------------------------------------------\n\nDefault constructor.\n\n>  CasADi::MX::MX(const std::string &name, int n=1, int m=1)\n\n>  CasADi::MX::MX(const std::string &name, const std::pair< int, int > &nm)\n\n>  CasADi::MX::MX(const std::string &name, const CRSSparsity &sp)\n------------------------------------------------------------------------\n\nConstruct a symbolic matrix (matrix variable)\n\n>  CasADi::MX::MX(const CRSSparsity &sp, const MX &val=0)\n------------------------------------------------------------------------\n\nConstruct MX with a given sparsity.\n\n>  CasADi::MX::MX(double x)\n------------------------------------------------------------------------\n\nCreate scalar constant (also implicit type conversion)\n\n>  CasADi::MX::MX(const MX &x)\n------------------------------------------------------------------------\n\nCopy constructor.\n\n>  CasADi::MX::MX(const std::vector< double > &x)\n------------------------------------------------------------------------\n\nCreate vector constant (also implicit type conversion)\n\n>  CasADi::MX::MX(const Matrix< double > &x)\n------------------------------------------------------------------------\n\nCreate sparse matrix constant (also implicit type conversion)\n\n>  CasADi::MX::MX(int nrow, int ncol)\n------------------------------------------------------------------------\n\nMatrix with all zeros.\n\n>  CasADi::MX::MX(int nrow, int ncol, const MX &val)\n------------------------------------------------------------------------\n\nDense matrix filled with value val.\n\n") ,
        Method (Name "MX''''''''") valMX [constrefMX] Constructor (Doc "\n\n>  CasADi::MX::MX()\n------------------------------------------------------------------------\n\nDefault constructor.\n\n>  CasADi::MX::MX(const std::string &name, int n=1, int m=1)\n\n>  CasADi::MX::MX(const std::string &name, const std::pair< int, int > &nm)\n\n>  CasADi::MX::MX(const std::string &name, const CRSSparsity &sp)\n------------------------------------------------------------------------\n\nConstruct a symbolic matrix (matrix variable)\n\n>  CasADi::MX::MX(const CRSSparsity &sp, const MX &val=0)\n------------------------------------------------------------------------\n\nConstruct MX with a given sparsity.\n\n>  CasADi::MX::MX(double x)\n------------------------------------------------------------------------\n\nCreate scalar constant (also implicit type conversion)\n\n>  CasADi::MX::MX(const MX &x)\n------------------------------------------------------------------------\n\nCopy constructor.\n\n>  CasADi::MX::MX(const std::vector< double > &x)\n------------------------------------------------------------------------\n\nCreate vector constant (also implicit type conversion)\n\n>  CasADi::MX::MX(const Matrix< double > &x)\n------------------------------------------------------------------------\n\nCreate sparse matrix constant (also implicit type conversion)\n\n>  CasADi::MX::MX(int nrow, int ncol)\n------------------------------------------------------------------------\n\nMatrix with all zeros.\n\n>  CasADi::MX::MX(int nrow, int ncol, const MX &val)\n------------------------------------------------------------------------\n\nDense matrix filled with value val.\n\n") ,
        Method (Name "MX'''''''''") valMX [constrefCDoubleVec] Constructor (Doc "\n\n>  CasADi::MX::MX()\n------------------------------------------------------------------------\n\nDefault constructor.\n\n>  CasADi::MX::MX(const std::string &name, int n=1, int m=1)\n\n>  CasADi::MX::MX(const std::string &name, const std::pair< int, int > &nm)\n\n>  CasADi::MX::MX(const std::string &name, const CRSSparsity &sp)\n------------------------------------------------------------------------\n\nConstruct a symbolic matrix (matrix variable)\n\n>  CasADi::MX::MX(const CRSSparsity &sp, const MX &val=0)\n------------------------------------------------------------------------\n\nConstruct MX with a given sparsity.\n\n>  CasADi::MX::MX(double x)\n------------------------------------------------------------------------\n\nCreate scalar constant (also implicit type conversion)\n\n>  CasADi::MX::MX(const MX &x)\n------------------------------------------------------------------------\n\nCopy constructor.\n\n>  CasADi::MX::MX(const std::vector< double > &x)\n------------------------------------------------------------------------\n\nCreate vector constant (also implicit type conversion)\n\n>  CasADi::MX::MX(const Matrix< double > &x)\n------------------------------------------------------------------------\n\nCreate sparse matrix constant (also implicit type conversion)\n\n>  CasADi::MX::MX(int nrow, int ncol)\n------------------------------------------------------------------------\n\nMatrix with all zeros.\n\n>  CasADi::MX::MX(int nrow, int ncol, const MX &val)\n------------------------------------------------------------------------\n\nDense matrix filled with value val.\n\n") ,
        Method (Name "MX''''''''''") valMX [constrefDMatrix] Constructor (Doc "\n\n>  CasADi::MX::MX()\n------------------------------------------------------------------------\n\nDefault constructor.\n\n>  CasADi::MX::MX(const std::string &name, int n=1, int m=1)\n\n>  CasADi::MX::MX(const std::string &name, const std::pair< int, int > &nm)\n\n>  CasADi::MX::MX(const std::string &name, const CRSSparsity &sp)\n------------------------------------------------------------------------\n\nConstruct a symbolic matrix (matrix variable)\n\n>  CasADi::MX::MX(const CRSSparsity &sp, const MX &val=0)\n------------------------------------------------------------------------\n\nConstruct MX with a given sparsity.\n\n>  CasADi::MX::MX(double x)\n------------------------------------------------------------------------\n\nCreate scalar constant (also implicit type conversion)\n\n>  CasADi::MX::MX(const MX &x)\n------------------------------------------------------------------------\n\nCopy constructor.\n\n>  CasADi::MX::MX(const std::vector< double > &x)\n------------------------------------------------------------------------\n\nCreate vector constant (also implicit type conversion)\n\n>  CasADi::MX::MX(const Matrix< double > &x)\n------------------------------------------------------------------------\n\nCreate sparse matrix constant (also implicit type conversion)\n\n>  CasADi::MX::MX(int nrow, int ncol)\n------------------------------------------------------------------------\n\nMatrix with all zeros.\n\n>  CasADi::MX::MX(int nrow, int ncol, const MX &val)\n------------------------------------------------------------------------\n\nDense matrix filled with value val.\n\n") ,
        Method (Name "MX'''''''''''") valMX [valCInt,valCInt] Constructor (Doc "\n\n>  CasADi::MX::MX()\n------------------------------------------------------------------------\n\nDefault constructor.\n\n>  CasADi::MX::MX(const std::string &name, int n=1, int m=1)\n\n>  CasADi::MX::MX(const std::string &name, const std::pair< int, int > &nm)\n\n>  CasADi::MX::MX(const std::string &name, const CRSSparsity &sp)\n------------------------------------------------------------------------\n\nConstruct a symbolic matrix (matrix variable)\n\n>  CasADi::MX::MX(const CRSSparsity &sp, const MX &val=0)\n------------------------------------------------------------------------\n\nConstruct MX with a given sparsity.\n\n>  CasADi::MX::MX(double x)\n------------------------------------------------------------------------\n\nCreate scalar constant (also implicit type conversion)\n\n>  CasADi::MX::MX(const MX &x)\n------------------------------------------------------------------------\n\nCopy constructor.\n\n>  CasADi::MX::MX(const std::vector< double > &x)\n------------------------------------------------------------------------\n\nCreate vector constant (also implicit type conversion)\n\n>  CasADi::MX::MX(const Matrix< double > &x)\n------------------------------------------------------------------------\n\nCreate sparse matrix constant (also implicit type conversion)\n\n>  CasADi::MX::MX(int nrow, int ncol)\n------------------------------------------------------------------------\n\nMatrix with all zeros.\n\n>  CasADi::MX::MX(int nrow, int ncol, const MX &val)\n------------------------------------------------------------------------\n\nDense matrix filled with value val.\n\n") ,
        Method (Name "MX''''''''''''") valMX [valCInt,valCInt,constrefMX] Constructor (Doc "\n\n>  CasADi::MX::MX()\n------------------------------------------------------------------------\n\nDefault constructor.\n\n>  CasADi::MX::MX(const std::string &name, int n=1, int m=1)\n\n>  CasADi::MX::MX(const std::string &name, const std::pair< int, int > &nm)\n\n>  CasADi::MX::MX(const std::string &name, const CRSSparsity &sp)\n------------------------------------------------------------------------\n\nConstruct a symbolic matrix (matrix variable)\n\n>  CasADi::MX::MX(const CRSSparsity &sp, const MX &val=0)\n------------------------------------------------------------------------\n\nConstruct MX with a given sparsity.\n\n>  CasADi::MX::MX(double x)\n------------------------------------------------------------------------\n\nCreate scalar constant (also implicit type conversion)\n\n>  CasADi::MX::MX(const MX &x)\n------------------------------------------------------------------------\n\nCopy constructor.\n\n>  CasADi::MX::MX(const std::vector< double > &x)\n------------------------------------------------------------------------\n\nCreate vector constant (also implicit type conversion)\n\n>  CasADi::MX::MX(const Matrix< double > &x)\n------------------------------------------------------------------------\n\nCreate sparse matrix constant (also implicit type conversion)\n\n>  CasADi::MX::MX(int nrow, int ncol)\n------------------------------------------------------------------------\n\nMatrix with all zeros.\n\n>  CasADi::MX::MX(int nrow, int ncol, const MX &val)\n------------------------------------------------------------------------\n\nDense matrix filled with value val.\n\n") 
      ]
    docs = Doc "\n\nMX - Matrix expression The MX class is used to build up trees made up from\nMXNodes. It is a more general graph representation than the scalar\nexpression, SX, and much less efficient for small objects. On the other\nhand, the class allows much more general operations than does SX, in\nparticular matrix valued operations and calls to arbitrary differentiable\nfunctions.\n\nThe MX class is designed to have identical syntax with the Matrix<> template\nclass, and uses Matrix<double> as its internal representation of the values\nat a node. By keeping the syntaxes identical, it is possible to switch from\none class to the other, as well as inlining MX functions to SX functions.\n\nNote that an operation is always \"lazy\", making a matrix multiplication\nwill create a matrix multiplication node, not perform the actual\nmultiplication.\n\nJoel Andersson\n\nC++ includes: mx.hpp "


dmatrix :: Class
dmatrix = Class DMatrix methods docs
  where
    methods =
      matrixMethods ++ [
        Method (Name "sanityCheck") valCVoid [valCBool] Normal (Doc "\n\nCheck if the dimensions and rowind,col vectors are compatible.\n\nParameters:\n-----------\n\ncomplete:  set to true to also check elementwise throws an error as possible\nresult\n\n") ,
        Method (Name "sanityCheck'") valCVoid [] Normal (Doc "\n\nCheck if the dimensions and rowind,col vectors are compatible.\n\nParameters:\n-----------\n\ncomplete:  set to true to also check elementwise throws an error as possible\nresult\n\n") ,
        Method (Name "vector") valCBool [] Normal (Doc "\n\nublas vector\n\nCheck type of matrix\n\n") ,
        Method (Name "at") valCDouble [valCInt] Normal (Doc "\n\n>  const T& CasADi::Matrix< T >::at(int k) const \n------------------------------------------------------------------------\n\nGet a non-zero element.\n\n>  T& CasADi::Matrix< T >::at(int k)\n------------------------------------------------------------------------\n\nAccess a non-zero element.\n\n") ,
        Method (Name "elem") valCDouble [valCInt,valCInt] Normal (Doc "\n\n>  const T & CasADi::Matrix< T >::elem(int i, int j=0) const \n------------------------------------------------------------------------\n\nget an element\n\n>  T & CasADi::Matrix< T >::elem(int i, int j=0)\n------------------------------------------------------------------------\n\nget a reference to an element\n\n") ,
        Method (Name "elem'") valCDouble [valCInt] Normal (Doc "\n\n>  const T & CasADi::Matrix< T >::elem(int i, int j=0) const \n------------------------------------------------------------------------\n\nget an element\n\n>  T & CasADi::Matrix< T >::elem(int i, int j=0)\n------------------------------------------------------------------------\n\nget a reference to an element\n\n") ,
        Method (Name "hasNZ") valCBool [valCInt,valCInt] Normal (Doc "\n\nReturns true if the matrix has a non-zero at location i,j.\n\n") ,
        Method (Name "__nonzero__") valCBool [] Normal (Doc "\n\nReturns the truth value of a Matrix.\n\n") ,
        Method (Name "append") valCVoid [constrefDMatrix] Normal (Doc "\n\nAppend a matrix to the end.\n\n") ,
        Method (Name "operator +") valDMatrix [] Normal (Doc "") ,
        Method (Name "operator -") valDMatrix [] Normal (Doc "") ,
        Method (Name "binary") valDMatrix [valCInt,constrefDMatrix,constrefDMatrix] Static (Doc "\n\nCreate nodes by their ID.\n\n") ,
        Method (Name "unary") valDMatrix [valCInt,constrefDMatrix] Static (Doc "\n\nCreate nodes by their ID.\n\n") ,
        Method (Name "scalar_matrix") valDMatrix [valCInt,constrefDMatrix,constrefDMatrix] Static (Doc "\n\nCreate nodes by their ID.\n\n") ,
        Method (Name "matrix_scalar") valDMatrix [valCInt,constrefDMatrix,constrefDMatrix] Static (Doc "\n\nCreate nodes by their ID.\n\n") ,
        Method (Name "matrix_matrix") valDMatrix [valCInt,constrefDMatrix,constrefDMatrix] Static (Doc "\n\nCreate nodes by their ID.\n\n") ,
        Method (Name "__add__") valDMatrix [constrefDMatrix] Normal (Doc "\n\nElementwise operations Octave/Python naming.\n\n") ,
        Method (Name "__sub__") valDMatrix [constrefDMatrix] Normal (Doc "\n\nElementwise operations Octave/Python naming.\n\n") ,
        Method (Name "__mul__") valDMatrix [constrefDMatrix] Normal (Doc "\n\nElementwise operations Octave/Python naming.\n\n") ,
        Method (Name "__div__") valDMatrix [constrefDMatrix] Normal (Doc "\n\nElementwise operations Octave/Python naming.\n\n") ,
        Method (Name "__lt__") valDMatrix [constrefDMatrix] Normal (Doc "\n\nElementwise operations Octave/Python naming.\n\n") ,
        Method (Name "__le__") valDMatrix [constrefDMatrix] Normal (Doc "\n\nElementwise operations Octave/Python naming.\n\n") ,
        Method (Name "__eq__") valDMatrix [constrefDMatrix] Normal (Doc "\n\nElementwise operations Octave/Python naming.\n\n") ,
        Method (Name "__ne__") valDMatrix [constrefDMatrix] Normal (Doc "\n\nElementwise operations Octave/Python naming.\n\n") ,
        Method (Name "__truediv__") valDMatrix [constrefDMatrix] Normal (Doc "\n\nElementwise operations Octave/Python naming.\n\n") ,
        Method (Name "__pow__") valDMatrix [constrefDMatrix] Normal (Doc "\n\nElementwise operations Octave/Python naming.\n\n") ,
        Method (Name "__constpow__") valDMatrix [constrefDMatrix] Normal (Doc "\n\nElementwise operations Octave/Python naming.\n\n") ,
        Method (Name "__mpower__") valDMatrix [constrefDMatrix] Normal (Doc "\n\nElementwise operations Octave/Python naming.\n\n") ,
        Method (Name "__mrdivide__") valDMatrix [constrefDMatrix] Normal (Doc "\n\nElementwise operations Octave/Python naming.\n\n") ,
        Method (Name "mul_full") valDMatrix [constrefDMatrix,constrefCRSSparsity] Normal (Doc "\n\nMatrix-matrix product.\n\n") ,
        Method (Name "mul_full'") valDMatrix [constrefDMatrix] Normal (Doc "\n\nMatrix-matrix product.\n\n") ,
        Method (Name "mul") valDMatrix [constrefDMatrix,constrefCRSSparsity] Normal (Doc "\n\nMatrix-matrix product.\n\n") ,
        Method (Name "mul'") valDMatrix [constrefDMatrix] Normal (Doc "\n\nMatrix-matrix product.\n\n") ,
        Method (Name "mul_no_alloc_nn") valCVoid [constrefDMatrix,constrefDMatrix,refDMatrix] Static (Doc "") ,
        Method (Name "mul_no_alloc_nt") valCVoid [constrefDMatrix,constrefDMatrix,refDMatrix] Static (Doc "") ,
        Method (Name "mul_no_alloc_tn") valCVoid [constrefDMatrix,constrefDMatrix,refDMatrix] Static (Doc "") ,
        Method (Name "mul_no_alloc_nn'") valCVoid [constrefDMatrix,constrefCDoubleVec,refCDoubleVec] Static (Doc "") ,
        Method (Name "mul_no_alloc_tn'") valCVoid [constrefDMatrix,constrefCDoubleVec,refCDoubleVec] Static (Doc "") ,
        Method (Name "quad_form") valCDouble [constrefDMatrix,constrefCDoubleVec] Static (Doc "") ,
        Method (Name "trans") valDMatrix [] Normal (Doc "\n\nMatrix transpose.\n\n") ,
        Method (Name "sin") valDMatrix [] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "cos") valDMatrix [] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "tan") valDMatrix [] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "arcsin") valDMatrix [] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "arccos") valDMatrix [] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "arctan") valDMatrix [] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "exp") valDMatrix [] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "log") valDMatrix [] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "sqrt") valDMatrix [] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "floor") valDMatrix [] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "ceil") valDMatrix [] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "fabs") valDMatrix [] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "sign") valDMatrix [] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "erfinv") valDMatrix [] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "fmin") valDMatrix [constrefDMatrix] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "fmax") valDMatrix [constrefDMatrix] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "erf") valDMatrix [] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "sinh") valDMatrix [] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "cosh") valDMatrix [] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "tanh") valDMatrix [] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "arcsinh") valDMatrix [] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "arccosh") valDMatrix [] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "arctanh") valDMatrix [] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "arctan2") valDMatrix [constrefDMatrix] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "log10") valDMatrix [] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "printme") valDMatrix [constrefDMatrix] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "logic_not") valDMatrix [] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "logic_and") valDMatrix [constrefDMatrix] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "logic_or") valDMatrix [constrefDMatrix] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "if_else_zero") valDMatrix [constrefDMatrix] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "className") valStdString [] Static (Doc "\n\nPrinting.\n\n") ,
        Method (Name "printScalar") valCVoid [refStdOstream] Normal (Doc "\n\nPrinting.\n\n") ,
        Method (Name "printScalar'") valCVoid [] Normal (Doc "\n\nPrinting.\n\n") ,
        Method (Name "printVector") valCVoid [refStdOstream] Normal (Doc "\n\nPrinting.\n\n") ,
        Method (Name "printVector'") valCVoid [] Normal (Doc "\n\nPrinting.\n\n") ,
        Method (Name "printMatrix") valCVoid [refStdOstream] Normal (Doc "\n\nPrinting.\n\n") ,
        Method (Name "printMatrix'") valCVoid [] Normal (Doc "\n\nPrinting.\n\n") ,
        Method (Name "printSparse") valCVoid [refStdOstream] Normal (Doc "\n\nPrinting.\n\n") ,
        Method (Name "printSparse'") valCVoid [] Normal (Doc "\n\nPrinting.\n\n") ,
        Method (Name "printDense") valCVoid [refStdOstream] Normal (Doc "\n\nPrinting.\n\n") ,
        Method (Name "printDense'") valCVoid [] Normal (Doc "\n\nPrinting.\n\n") ,
        Method (Name "col") valCInt [valCInt] Normal (Doc "") ,
        Method (Name "rowind") valCInt [valCInt] Normal (Doc "") ,
        Method (Name "clear") valCVoid [] Normal (Doc "") ,
        Method (Name "resize") valCVoid [valCInt,valCInt] Normal (Doc "") ,
        Method (Name "reserve") valCVoid [valCInt] Normal (Doc "") ,
        Method (Name "reserve'") valCVoid [valCInt,valCInt] Normal (Doc "") ,
        Method (Name "erase") valCVoid [constrefCIntVec,constrefCIntVec] Normal (Doc "\n\nErase a submatrix Erase rows and/or columns of a matrix.\n\n") ,
        Method (Name "remove") valCVoid [constrefCIntVec,constrefCIntVec] Normal (Doc "\n\nRemove rows or columns Rremove/delete rows and/or columns of a matrix.\n\n") ,
        Method (Name "enlarge") valCVoid [valCInt,valCInt,constrefCIntVec,constrefCIntVec] Normal (Doc "\n\nEnlarge matrix Make the matrix larger by inserting empty rows and columns,\nkeeping the existing non-zeros.\n\n") ,
        Method (Name "data") valCDoubleVec [] Normal (Doc "\n\n>  std::vector< T > & CasADi::Matrix< T >::data()\n------------------------------------------------------------------------\n\nAccess the non-zero elements.\n\n>  const std::vector< T > & CasADi::Matrix< T >::data() const \n------------------------------------------------------------------------\n\nConst access the non-zero elements.\n\n") ,
        Method (Name "sparsityRef") valCRSSparsity [] Normal (Doc "\n\nAccess the sparsity, make a copy if there are multiple references to it.\n\n") ,
        Method (Name "set") valCVoid [valCDouble,valenumSparsity] Normal (Doc "\n\n>  void CasADi::Matrix< T >::set(T val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nSet the non-zero elements, scalar.\n\n>  void CasADi::Matrix< T >::set(const std::vector< T > &val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nSet the non-zero elements, vector.\n\n>  void CasADi::Matrix< T >::set(const Matrix< T > &val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nSet the non-zero elements, Matrix.\n\n>  void CasADi::Matrix< T >::set(const T *val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nLegacy - use setArray instead.\n\n") ,
        Method (Name "set'") valCVoid [valCDouble] Normal (Doc "\n\n>  void CasADi::Matrix< T >::set(T val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nSet the non-zero elements, scalar.\n\n>  void CasADi::Matrix< T >::set(const std::vector< T > &val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nSet the non-zero elements, vector.\n\n>  void CasADi::Matrix< T >::set(const Matrix< T > &val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nSet the non-zero elements, Matrix.\n\n>  void CasADi::Matrix< T >::set(const T *val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nLegacy - use setArray instead.\n\n") ,
        Method (Name "get") valCVoid [refCDouble,valenumSparsity] Normal (Doc "\n\n>  void CasADi::Matrix< T >::get(T &val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nGet the non-zero elements, scalar.\n\n>  void CasADi::Matrix< T >::get(std::vector< T > &val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nGet the non-zero elements, vector.\n\n>  void CasADi::Matrix< T >::get(Matrix< T > &val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nGet the non-zero elements, Matrix.\n\n>  void CasADi::Matrix< T >::get(T *val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nLegacy - use getArray instead.\n\n") ,
        Method (Name "get'") valCVoid [refCDouble] Normal (Doc "\n\n>  void CasADi::Matrix< T >::get(T &val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nGet the non-zero elements, scalar.\n\n>  void CasADi::Matrix< T >::get(std::vector< T > &val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nGet the non-zero elements, vector.\n\n>  void CasADi::Matrix< T >::get(Matrix< T > &val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nGet the non-zero elements, Matrix.\n\n>  void CasADi::Matrix< T >::get(T *val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nLegacy - use getArray instead.\n\n") ,
        Method (Name "set''") valCVoid [constrefCDoubleVec,valenumSparsity] Normal (Doc "\n\n>  void CasADi::Matrix< T >::set(T val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nSet the non-zero elements, scalar.\n\n>  void CasADi::Matrix< T >::set(const std::vector< T > &val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nSet the non-zero elements, vector.\n\n>  void CasADi::Matrix< T >::set(const Matrix< T > &val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nSet the non-zero elements, Matrix.\n\n>  void CasADi::Matrix< T >::set(const T *val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nLegacy - use setArray instead.\n\n") ,
        Method (Name "set'''") valCVoid [constrefCDoubleVec] Normal (Doc "\n\n>  void CasADi::Matrix< T >::set(T val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nSet the non-zero elements, scalar.\n\n>  void CasADi::Matrix< T >::set(const std::vector< T > &val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nSet the non-zero elements, vector.\n\n>  void CasADi::Matrix< T >::set(const Matrix< T > &val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nSet the non-zero elements, Matrix.\n\n>  void CasADi::Matrix< T >::set(const T *val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nLegacy - use setArray instead.\n\n") ,
        Method (Name "get''") valCVoid [refCDoubleVec,valenumSparsity] Normal (Doc "\n\n>  void CasADi::Matrix< T >::get(T &val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nGet the non-zero elements, scalar.\n\n>  void CasADi::Matrix< T >::get(std::vector< T > &val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nGet the non-zero elements, vector.\n\n>  void CasADi::Matrix< T >::get(Matrix< T > &val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nGet the non-zero elements, Matrix.\n\n>  void CasADi::Matrix< T >::get(T *val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nLegacy - use getArray instead.\n\n") ,
        Method (Name "get'''") valCVoid [refCDoubleVec] Normal (Doc "\n\n>  void CasADi::Matrix< T >::get(T &val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nGet the non-zero elements, scalar.\n\n>  void CasADi::Matrix< T >::get(std::vector< T > &val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nGet the non-zero elements, vector.\n\n>  void CasADi::Matrix< T >::get(Matrix< T > &val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nGet the non-zero elements, Matrix.\n\n>  void CasADi::Matrix< T >::get(T *val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nLegacy - use getArray instead.\n\n") ,
        Method (Name "set''''") valCVoid [constrefDMatrix,valenumSparsity] Normal (Doc "\n\n>  void CasADi::Matrix< T >::set(T val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nSet the non-zero elements, scalar.\n\n>  void CasADi::Matrix< T >::set(const std::vector< T > &val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nSet the non-zero elements, vector.\n\n>  void CasADi::Matrix< T >::set(const Matrix< T > &val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nSet the non-zero elements, Matrix.\n\n>  void CasADi::Matrix< T >::set(const T *val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nLegacy - use setArray instead.\n\n") ,
        Method (Name "set'''''") valCVoid [constrefDMatrix] Normal (Doc "\n\n>  void CasADi::Matrix< T >::set(T val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nSet the non-zero elements, scalar.\n\n>  void CasADi::Matrix< T >::set(const std::vector< T > &val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nSet the non-zero elements, vector.\n\n>  void CasADi::Matrix< T >::set(const Matrix< T > &val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nSet the non-zero elements, Matrix.\n\n>  void CasADi::Matrix< T >::set(const T *val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nLegacy - use setArray instead.\n\n") ,
        Method (Name "get''''") valCVoid [refDMatrix,valenumSparsity] Normal (Doc "\n\n>  void CasADi::Matrix< T >::get(T &val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nGet the non-zero elements, scalar.\n\n>  void CasADi::Matrix< T >::get(std::vector< T > &val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nGet the non-zero elements, vector.\n\n>  void CasADi::Matrix< T >::get(Matrix< T > &val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nGet the non-zero elements, Matrix.\n\n>  void CasADi::Matrix< T >::get(T *val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nLegacy - use getArray instead.\n\n") ,
        Method (Name "get'''''") valCVoid [refDMatrix] Normal (Doc "\n\n>  void CasADi::Matrix< T >::get(T &val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nGet the non-zero elements, scalar.\n\n>  void CasADi::Matrix< T >::get(std::vector< T > &val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nGet the non-zero elements, vector.\n\n>  void CasADi::Matrix< T >::get(Matrix< T > &val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nGet the non-zero elements, Matrix.\n\n>  void CasADi::Matrix< T >::get(T *val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nLegacy - use getArray instead.\n\n") ,
        Method (Name "sparse") valDMatrix [valCInt,valCInt] Static (Doc "\n\n>  Matrix< T > CasADi::Matrix< T >::sparse(int nrow, int ncol=1)\n\n>  Matrix< T > CasADi::Matrix< T >::sparse(const std::pair< int, int > &nm)\n------------------------------------------------------------------------\n\ncreate a sparse matrix with all zeros\n\n>  Matrix< T > CasADi::Matrix< T >::sparse(const std::vector< int > &row, const std::vector< int > &col, const std::vector< T > &d, int n, int m)\n\n>  Matrix< T > CasADi::Matrix< T >::sparse(const std::vector< int > &row, const std::vector< int > &col, const std::vector< T > &d, const std::pair< int, int > &nm)\n------------------------------------------------------------------------\n\nConstruct a sparse matrix from triplet form.\n\n") ,
        Method (Name "sparse'") valDMatrix [valCInt] Static (Doc "\n\n>  Matrix< T > CasADi::Matrix< T >::sparse(int nrow, int ncol=1)\n\n>  Matrix< T > CasADi::Matrix< T >::sparse(const std::pair< int, int > &nm)\n------------------------------------------------------------------------\n\ncreate a sparse matrix with all zeros\n\n>  Matrix< T > CasADi::Matrix< T >::sparse(const std::vector< int > &row, const std::vector< int > &col, const std::vector< T > &d, int n, int m)\n\n>  Matrix< T > CasADi::Matrix< T >::sparse(const std::vector< int > &row, const std::vector< int > &col, const std::vector< T > &d, const std::pair< int, int > &nm)\n------------------------------------------------------------------------\n\nConstruct a sparse matrix from triplet form.\n\n") ,
        Method (Name "sparse''") valDMatrix [constrefCIntVec,constrefCIntVec,constrefCDoubleVec] Static (Doc "\n\n>  Matrix< T > CasADi::Matrix< T >::sparse(int nrow, int ncol=1)\n\n>  Matrix< T > CasADi::Matrix< T >::sparse(const std::pair< int, int > &nm)\n------------------------------------------------------------------------\n\ncreate a sparse matrix with all zeros\n\n>  Matrix< T > CasADi::Matrix< T >::sparse(const std::vector< int > &row, const std::vector< int > &col, const std::vector< T > &d, int n, int m)\n\n>  Matrix< T > CasADi::Matrix< T >::sparse(const std::vector< int > &row, const std::vector< int > &col, const std::vector< T > &d, const std::pair< int, int > &nm)\n------------------------------------------------------------------------\n\nConstruct a sparse matrix from triplet form.\n\n") ,
        Method (Name "sparse'''") valDMatrix [constrefCIntVec,constrefCIntVec,constrefCDoubleVec,valCInt,valCInt] Static (Doc "\n\n>  Matrix< T > CasADi::Matrix< T >::sparse(int nrow, int ncol=1)\n\n>  Matrix< T > CasADi::Matrix< T >::sparse(const std::pair< int, int > &nm)\n------------------------------------------------------------------------\n\ncreate a sparse matrix with all zeros\n\n>  Matrix< T > CasADi::Matrix< T >::sparse(const std::vector< int > &row, const std::vector< int > &col, const std::vector< T > &d, int n, int m)\n\n>  Matrix< T > CasADi::Matrix< T >::sparse(const std::vector< int > &row, const std::vector< int > &col, const std::vector< T > &d, const std::pair< int, int > &nm)\n------------------------------------------------------------------------\n\nConstruct a sparse matrix from triplet form.\n\n") ,
        Method (Name "zeros") valDMatrix [constrefCRSSparsity] Static (Doc "\n\ncreate a dense matrix with all zeros\n\n") ,
        Method (Name "zeros'") valDMatrix [valCInt,valCInt] Static (Doc "\n\ncreate a dense matrix with all zeros\n\n") ,
        Method (Name "zeros''") valDMatrix [valCInt] Static (Doc "\n\ncreate a dense matrix with all zeros\n\n") ,
        Method (Name "ones") valDMatrix [constrefCRSSparsity] Static (Doc "\n\ncreate a matrix with all ones\n\n") ,
        Method (Name "ones'") valDMatrix [valCInt,valCInt] Static (Doc "\n\ncreate a matrix with all ones\n\n") ,
        Method (Name "ones''") valDMatrix [valCInt] Static (Doc "\n\ncreate a matrix with all ones\n\n") ,
        Method (Name "inf") valDMatrix [constrefCRSSparsity] Static (Doc "\n\ncreate a matrix with all inf\n\n") ,
        Method (Name "inf'") valDMatrix [valCInt,valCInt] Static (Doc "\n\ncreate a matrix with all inf\n\n") ,
        Method (Name "inf''") valDMatrix [valCInt] Static (Doc "\n\ncreate a matrix with all inf\n\n") ,
        Method (Name "inf'''") valDMatrix [] Static (Doc "\n\ncreate a matrix with all inf\n\n") ,
        Method (Name "nan") valDMatrix [constrefCRSSparsity] Static (Doc "\n\ncreate a matrix with all nan\n\n") ,
        Method (Name "nan'") valDMatrix [valCInt,valCInt] Static (Doc "\n\ncreate a matrix with all nan\n\n") ,
        Method (Name "nan''") valDMatrix [valCInt] Static (Doc "\n\ncreate a matrix with all nan\n\n") ,
        Method (Name "nan'''") valDMatrix [] Static (Doc "\n\ncreate a matrix with all nan\n\n") ,
        Method (Name "repmat") valDMatrix [constrefDMatrix,valCInt,valCInt] Static (Doc "\n\ncreate a matrix by repeating an existing matrix\n\n") ,
        Method (Name "repmat'") valDMatrix [constrefDMatrix,valCInt] Static (Doc "\n\ncreate a matrix by repeating an existing matrix\n\n") ,
        Method (Name "eye") valDMatrix [valCInt] Static (Doc "") ,
        Method (Name "isNull") valCBool [] Normal (Doc "\n\nThe following function is used to ensure similarity to MX, which is\nreference counted.\n\n") ,
        Method (Name "setPrecision") valCVoid [valCInt] Static (Doc "\n\nSet the 'precision, width & scientific' used in printing and serializing to\nstreams.\n\n") ,
        Method (Name "setWidth") valCVoid [valCInt] Static (Doc "\n\nSet the 'precision, width & scientific' used in printing and serializing to\nstreams.\n\n") ,
        Method (Name "setScientific") valCVoid [valCBool] Static (Doc "\n\nSet the 'precision, width & scientific' used in printing and serializing to\nstreams.\n\n") ,
        Method (Name "DMatrix") valDMatrix [] Constructor (Doc "\n\n>  CasADi::Matrix< T >::Matrix()\n------------------------------------------------------------------------\n\nconstructors\n\nempty 0-by-0 matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< T > &m)\n------------------------------------------------------------------------\n\nCopy constructor.\n\n>  CasADi::Matrix< T >::Matrix(int n, int m)\n------------------------------------------------------------------------\n\nempty n-by-m matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const T &val)\n------------------------------------------------------------------------\n\ndense n-by-m matrix filled with val constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const std::vector< int > &col, const std::vector< int > &rowind, const std::vector< T > &d=std::vector< T >())\n------------------------------------------------------------------------\n\nsparse n-by-m matrix filled with given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< std::vector< T > > &m)\n------------------------------------------------------------------------\n\ndense matrix constructor with data given as vector of vectors\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const T &val=0)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const std::vector< T > &d)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity and non-zero elements.\n\n>  CasADi::Matrix< T >::Matrix(double val)\n------------------------------------------------------------------------\n\nThis constructor enables implicit type conversion from a numeric type.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x)\n------------------------------------------------------------------------\n\nConstruct from a vector.\n\nThanks to implicit conversion, you can pretend that Matrix(const SX& x);\nexists. Note: above remark applies only to C++, not python or octave\ninterfaces\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x, int n, int m)\n------------------------------------------------------------------------\n\nConstruct dense matrix from a vector with the elements in column major\nordering.\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< A > &x)\n------------------------------------------------------------------------\n\nCreate a matrix from a matrix with a different type of matrix entries\n(assuming that the scalar conversion is valid)\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x)\n------------------------------------------------------------------------\n\nCreate an expression from an stl vector.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x, int n, int m)\n------------------------------------------------------------------------\n\nCreate a non-vector expression from an stl vector.\n\n") ,
        Method (Name "DMatrix'") valDMatrix [constrefDMatrix] Constructor (Doc "\n\n>  CasADi::Matrix< T >::Matrix()\n------------------------------------------------------------------------\n\nconstructors\n\nempty 0-by-0 matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< T > &m)\n------------------------------------------------------------------------\n\nCopy constructor.\n\n>  CasADi::Matrix< T >::Matrix(int n, int m)\n------------------------------------------------------------------------\n\nempty n-by-m matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const T &val)\n------------------------------------------------------------------------\n\ndense n-by-m matrix filled with val constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const std::vector< int > &col, const std::vector< int > &rowind, const std::vector< T > &d=std::vector< T >())\n------------------------------------------------------------------------\n\nsparse n-by-m matrix filled with given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< std::vector< T > > &m)\n------------------------------------------------------------------------\n\ndense matrix constructor with data given as vector of vectors\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const T &val=0)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const std::vector< T > &d)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity and non-zero elements.\n\n>  CasADi::Matrix< T >::Matrix(double val)\n------------------------------------------------------------------------\n\nThis constructor enables implicit type conversion from a numeric type.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x)\n------------------------------------------------------------------------\n\nConstruct from a vector.\n\nThanks to implicit conversion, you can pretend that Matrix(const SX& x);\nexists. Note: above remark applies only to C++, not python or octave\ninterfaces\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x, int n, int m)\n------------------------------------------------------------------------\n\nConstruct dense matrix from a vector with the elements in column major\nordering.\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< A > &x)\n------------------------------------------------------------------------\n\nCreate a matrix from a matrix with a different type of matrix entries\n(assuming that the scalar conversion is valid)\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x)\n------------------------------------------------------------------------\n\nCreate an expression from an stl vector.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x, int n, int m)\n------------------------------------------------------------------------\n\nCreate a non-vector expression from an stl vector.\n\n") ,
        Method (Name "DMatrix''") valDMatrix [valCInt,valCInt] Constructor (Doc "\n\n>  CasADi::Matrix< T >::Matrix()\n------------------------------------------------------------------------\n\nconstructors\n\nempty 0-by-0 matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< T > &m)\n------------------------------------------------------------------------\n\nCopy constructor.\n\n>  CasADi::Matrix< T >::Matrix(int n, int m)\n------------------------------------------------------------------------\n\nempty n-by-m matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const T &val)\n------------------------------------------------------------------------\n\ndense n-by-m matrix filled with val constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const std::vector< int > &col, const std::vector< int > &rowind, const std::vector< T > &d=std::vector< T >())\n------------------------------------------------------------------------\n\nsparse n-by-m matrix filled with given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< std::vector< T > > &m)\n------------------------------------------------------------------------\n\ndense matrix constructor with data given as vector of vectors\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const T &val=0)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const std::vector< T > &d)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity and non-zero elements.\n\n>  CasADi::Matrix< T >::Matrix(double val)\n------------------------------------------------------------------------\n\nThis constructor enables implicit type conversion from a numeric type.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x)\n------------------------------------------------------------------------\n\nConstruct from a vector.\n\nThanks to implicit conversion, you can pretend that Matrix(const SX& x);\nexists. Note: above remark applies only to C++, not python or octave\ninterfaces\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x, int n, int m)\n------------------------------------------------------------------------\n\nConstruct dense matrix from a vector with the elements in column major\nordering.\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< A > &x)\n------------------------------------------------------------------------\n\nCreate a matrix from a matrix with a different type of matrix entries\n(assuming that the scalar conversion is valid)\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x)\n------------------------------------------------------------------------\n\nCreate an expression from an stl vector.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x, int n, int m)\n------------------------------------------------------------------------\n\nCreate a non-vector expression from an stl vector.\n\n") ,
        Method (Name "DMatrix'''") valDMatrix [valCInt,valCInt,constrefCDouble] Constructor (Doc "\n\n>  CasADi::Matrix< T >::Matrix()\n------------------------------------------------------------------------\n\nconstructors\n\nempty 0-by-0 matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< T > &m)\n------------------------------------------------------------------------\n\nCopy constructor.\n\n>  CasADi::Matrix< T >::Matrix(int n, int m)\n------------------------------------------------------------------------\n\nempty n-by-m matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const T &val)\n------------------------------------------------------------------------\n\ndense n-by-m matrix filled with val constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const std::vector< int > &col, const std::vector< int > &rowind, const std::vector< T > &d=std::vector< T >())\n------------------------------------------------------------------------\n\nsparse n-by-m matrix filled with given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< std::vector< T > > &m)\n------------------------------------------------------------------------\n\ndense matrix constructor with data given as vector of vectors\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const T &val=0)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const std::vector< T > &d)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity and non-zero elements.\n\n>  CasADi::Matrix< T >::Matrix(double val)\n------------------------------------------------------------------------\n\nThis constructor enables implicit type conversion from a numeric type.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x)\n------------------------------------------------------------------------\n\nConstruct from a vector.\n\nThanks to implicit conversion, you can pretend that Matrix(const SX& x);\nexists. Note: above remark applies only to C++, not python or octave\ninterfaces\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x, int n, int m)\n------------------------------------------------------------------------\n\nConstruct dense matrix from a vector with the elements in column major\nordering.\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< A > &x)\n------------------------------------------------------------------------\n\nCreate a matrix from a matrix with a different type of matrix entries\n(assuming that the scalar conversion is valid)\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x)\n------------------------------------------------------------------------\n\nCreate an expression from an stl vector.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x, int n, int m)\n------------------------------------------------------------------------\n\nCreate a non-vector expression from an stl vector.\n\n") ,
        Method (Name "DMatrix''''") valDMatrix [valCInt,valCInt,constrefCIntVec,constrefCIntVec,constrefCDoubleVec] Constructor (Doc "\n\n>  CasADi::Matrix< T >::Matrix()\n------------------------------------------------------------------------\n\nconstructors\n\nempty 0-by-0 matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< T > &m)\n------------------------------------------------------------------------\n\nCopy constructor.\n\n>  CasADi::Matrix< T >::Matrix(int n, int m)\n------------------------------------------------------------------------\n\nempty n-by-m matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const T &val)\n------------------------------------------------------------------------\n\ndense n-by-m matrix filled with val constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const std::vector< int > &col, const std::vector< int > &rowind, const std::vector< T > &d=std::vector< T >())\n------------------------------------------------------------------------\n\nsparse n-by-m matrix filled with given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< std::vector< T > > &m)\n------------------------------------------------------------------------\n\ndense matrix constructor with data given as vector of vectors\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const T &val=0)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const std::vector< T > &d)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity and non-zero elements.\n\n>  CasADi::Matrix< T >::Matrix(double val)\n------------------------------------------------------------------------\n\nThis constructor enables implicit type conversion from a numeric type.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x)\n------------------------------------------------------------------------\n\nConstruct from a vector.\n\nThanks to implicit conversion, you can pretend that Matrix(const SX& x);\nexists. Note: above remark applies only to C++, not python or octave\ninterfaces\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x, int n, int m)\n------------------------------------------------------------------------\n\nConstruct dense matrix from a vector with the elements in column major\nordering.\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< A > &x)\n------------------------------------------------------------------------\n\nCreate a matrix from a matrix with a different type of matrix entries\n(assuming that the scalar conversion is valid)\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x)\n------------------------------------------------------------------------\n\nCreate an expression from an stl vector.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x, int n, int m)\n------------------------------------------------------------------------\n\nCreate a non-vector expression from an stl vector.\n\n") ,
        Method (Name "DMatrix'''''") valDMatrix [valCInt,valCInt,constrefCIntVec,constrefCIntVec] Constructor (Doc "\n\n>  CasADi::Matrix< T >::Matrix()\n------------------------------------------------------------------------\n\nconstructors\n\nempty 0-by-0 matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< T > &m)\n------------------------------------------------------------------------\n\nCopy constructor.\n\n>  CasADi::Matrix< T >::Matrix(int n, int m)\n------------------------------------------------------------------------\n\nempty n-by-m matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const T &val)\n------------------------------------------------------------------------\n\ndense n-by-m matrix filled with val constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const std::vector< int > &col, const std::vector< int > &rowind, const std::vector< T > &d=std::vector< T >())\n------------------------------------------------------------------------\n\nsparse n-by-m matrix filled with given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< std::vector< T > > &m)\n------------------------------------------------------------------------\n\ndense matrix constructor with data given as vector of vectors\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const T &val=0)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const std::vector< T > &d)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity and non-zero elements.\n\n>  CasADi::Matrix< T >::Matrix(double val)\n------------------------------------------------------------------------\n\nThis constructor enables implicit type conversion from a numeric type.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x)\n------------------------------------------------------------------------\n\nConstruct from a vector.\n\nThanks to implicit conversion, you can pretend that Matrix(const SX& x);\nexists. Note: above remark applies only to C++, not python or octave\ninterfaces\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x, int n, int m)\n------------------------------------------------------------------------\n\nConstruct dense matrix from a vector with the elements in column major\nordering.\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< A > &x)\n------------------------------------------------------------------------\n\nCreate a matrix from a matrix with a different type of matrix entries\n(assuming that the scalar conversion is valid)\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x)\n------------------------------------------------------------------------\n\nCreate an expression from an stl vector.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x, int n, int m)\n------------------------------------------------------------------------\n\nCreate a non-vector expression from an stl vector.\n\n") ,
        Method (Name "DMatrix''''''") valDMatrix [constrefCDoubleVecVec] Constructor (Doc "\n\n>  CasADi::Matrix< T >::Matrix()\n------------------------------------------------------------------------\n\nconstructors\n\nempty 0-by-0 matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< T > &m)\n------------------------------------------------------------------------\n\nCopy constructor.\n\n>  CasADi::Matrix< T >::Matrix(int n, int m)\n------------------------------------------------------------------------\n\nempty n-by-m matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const T &val)\n------------------------------------------------------------------------\n\ndense n-by-m matrix filled with val constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const std::vector< int > &col, const std::vector< int > &rowind, const std::vector< T > &d=std::vector< T >())\n------------------------------------------------------------------------\n\nsparse n-by-m matrix filled with given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< std::vector< T > > &m)\n------------------------------------------------------------------------\n\ndense matrix constructor with data given as vector of vectors\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const T &val=0)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const std::vector< T > &d)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity and non-zero elements.\n\n>  CasADi::Matrix< T >::Matrix(double val)\n------------------------------------------------------------------------\n\nThis constructor enables implicit type conversion from a numeric type.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x)\n------------------------------------------------------------------------\n\nConstruct from a vector.\n\nThanks to implicit conversion, you can pretend that Matrix(const SX& x);\nexists. Note: above remark applies only to C++, not python or octave\ninterfaces\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x, int n, int m)\n------------------------------------------------------------------------\n\nConstruct dense matrix from a vector with the elements in column major\nordering.\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< A > &x)\n------------------------------------------------------------------------\n\nCreate a matrix from a matrix with a different type of matrix entries\n(assuming that the scalar conversion is valid)\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x)\n------------------------------------------------------------------------\n\nCreate an expression from an stl vector.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x, int n, int m)\n------------------------------------------------------------------------\n\nCreate a non-vector expression from an stl vector.\n\n") ,
        Method (Name "DMatrix'''''''") valDMatrix [constrefCRSSparsity,constrefCDouble] Constructor (Doc "\n\n>  CasADi::Matrix< T >::Matrix()\n------------------------------------------------------------------------\n\nconstructors\n\nempty 0-by-0 matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< T > &m)\n------------------------------------------------------------------------\n\nCopy constructor.\n\n>  CasADi::Matrix< T >::Matrix(int n, int m)\n------------------------------------------------------------------------\n\nempty n-by-m matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const T &val)\n------------------------------------------------------------------------\n\ndense n-by-m matrix filled with val constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const std::vector< int > &col, const std::vector< int > &rowind, const std::vector< T > &d=std::vector< T >())\n------------------------------------------------------------------------\n\nsparse n-by-m matrix filled with given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< std::vector< T > > &m)\n------------------------------------------------------------------------\n\ndense matrix constructor with data given as vector of vectors\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const T &val=0)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const std::vector< T > &d)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity and non-zero elements.\n\n>  CasADi::Matrix< T >::Matrix(double val)\n------------------------------------------------------------------------\n\nThis constructor enables implicit type conversion from a numeric type.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x)\n------------------------------------------------------------------------\n\nConstruct from a vector.\n\nThanks to implicit conversion, you can pretend that Matrix(const SX& x);\nexists. Note: above remark applies only to C++, not python or octave\ninterfaces\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x, int n, int m)\n------------------------------------------------------------------------\n\nConstruct dense matrix from a vector with the elements in column major\nordering.\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< A > &x)\n------------------------------------------------------------------------\n\nCreate a matrix from a matrix with a different type of matrix entries\n(assuming that the scalar conversion is valid)\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x)\n------------------------------------------------------------------------\n\nCreate an expression from an stl vector.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x, int n, int m)\n------------------------------------------------------------------------\n\nCreate a non-vector expression from an stl vector.\n\n") ,
        Method (Name "DMatrix''''''''") valDMatrix [constrefCRSSparsity] Constructor (Doc "\n\n>  CasADi::Matrix< T >::Matrix()\n------------------------------------------------------------------------\n\nconstructors\n\nempty 0-by-0 matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< T > &m)\n------------------------------------------------------------------------\n\nCopy constructor.\n\n>  CasADi::Matrix< T >::Matrix(int n, int m)\n------------------------------------------------------------------------\n\nempty n-by-m matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const T &val)\n------------------------------------------------------------------------\n\ndense n-by-m matrix filled with val constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const std::vector< int > &col, const std::vector< int > &rowind, const std::vector< T > &d=std::vector< T >())\n------------------------------------------------------------------------\n\nsparse n-by-m matrix filled with given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< std::vector< T > > &m)\n------------------------------------------------------------------------\n\ndense matrix constructor with data given as vector of vectors\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const T &val=0)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const std::vector< T > &d)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity and non-zero elements.\n\n>  CasADi::Matrix< T >::Matrix(double val)\n------------------------------------------------------------------------\n\nThis constructor enables implicit type conversion from a numeric type.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x)\n------------------------------------------------------------------------\n\nConstruct from a vector.\n\nThanks to implicit conversion, you can pretend that Matrix(const SX& x);\nexists. Note: above remark applies only to C++, not python or octave\ninterfaces\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x, int n, int m)\n------------------------------------------------------------------------\n\nConstruct dense matrix from a vector with the elements in column major\nordering.\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< A > &x)\n------------------------------------------------------------------------\n\nCreate a matrix from a matrix with a different type of matrix entries\n(assuming that the scalar conversion is valid)\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x)\n------------------------------------------------------------------------\n\nCreate an expression from an stl vector.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x, int n, int m)\n------------------------------------------------------------------------\n\nCreate a non-vector expression from an stl vector.\n\n") ,
        Method (Name "DMatrix'''''''''") valDMatrix [constrefCRSSparsity,constrefCDoubleVec] Constructor (Doc "\n\n>  CasADi::Matrix< T >::Matrix()\n------------------------------------------------------------------------\n\nconstructors\n\nempty 0-by-0 matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< T > &m)\n------------------------------------------------------------------------\n\nCopy constructor.\n\n>  CasADi::Matrix< T >::Matrix(int n, int m)\n------------------------------------------------------------------------\n\nempty n-by-m matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const T &val)\n------------------------------------------------------------------------\n\ndense n-by-m matrix filled with val constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const std::vector< int > &col, const std::vector< int > &rowind, const std::vector< T > &d=std::vector< T >())\n------------------------------------------------------------------------\n\nsparse n-by-m matrix filled with given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< std::vector< T > > &m)\n------------------------------------------------------------------------\n\ndense matrix constructor with data given as vector of vectors\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const T &val=0)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const std::vector< T > &d)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity and non-zero elements.\n\n>  CasADi::Matrix< T >::Matrix(double val)\n------------------------------------------------------------------------\n\nThis constructor enables implicit type conversion from a numeric type.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x)\n------------------------------------------------------------------------\n\nConstruct from a vector.\n\nThanks to implicit conversion, you can pretend that Matrix(const SX& x);\nexists. Note: above remark applies only to C++, not python or octave\ninterfaces\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x, int n, int m)\n------------------------------------------------------------------------\n\nConstruct dense matrix from a vector with the elements in column major\nordering.\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< A > &x)\n------------------------------------------------------------------------\n\nCreate a matrix from a matrix with a different type of matrix entries\n(assuming that the scalar conversion is valid)\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x)\n------------------------------------------------------------------------\n\nCreate an expression from an stl vector.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x, int n, int m)\n------------------------------------------------------------------------\n\nCreate a non-vector expression from an stl vector.\n\n") ,
        Method (Name "DMatrix''''''''''") valDMatrix [valCDouble] Constructor (Doc "\n\n>  CasADi::Matrix< T >::Matrix()\n------------------------------------------------------------------------\n\nconstructors\n\nempty 0-by-0 matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< T > &m)\n------------------------------------------------------------------------\n\nCopy constructor.\n\n>  CasADi::Matrix< T >::Matrix(int n, int m)\n------------------------------------------------------------------------\n\nempty n-by-m matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const T &val)\n------------------------------------------------------------------------\n\ndense n-by-m matrix filled with val constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const std::vector< int > &col, const std::vector< int > &rowind, const std::vector< T > &d=std::vector< T >())\n------------------------------------------------------------------------\n\nsparse n-by-m matrix filled with given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< std::vector< T > > &m)\n------------------------------------------------------------------------\n\ndense matrix constructor with data given as vector of vectors\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const T &val=0)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const std::vector< T > &d)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity and non-zero elements.\n\n>  CasADi::Matrix< T >::Matrix(double val)\n------------------------------------------------------------------------\n\nThis constructor enables implicit type conversion from a numeric type.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x)\n------------------------------------------------------------------------\n\nConstruct from a vector.\n\nThanks to implicit conversion, you can pretend that Matrix(const SX& x);\nexists. Note: above remark applies only to C++, not python or octave\ninterfaces\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x, int n, int m)\n------------------------------------------------------------------------\n\nConstruct dense matrix from a vector with the elements in column major\nordering.\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< A > &x)\n------------------------------------------------------------------------\n\nCreate a matrix from a matrix with a different type of matrix entries\n(assuming that the scalar conversion is valid)\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x)\n------------------------------------------------------------------------\n\nCreate an expression from an stl vector.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x, int n, int m)\n------------------------------------------------------------------------\n\nCreate a non-vector expression from an stl vector.\n\n") ,
        Method (Name "DMatrix'''''''''''") valDMatrix [constrefCDoubleVec] Constructor (Doc "\n\n>  CasADi::Matrix< T >::Matrix()\n------------------------------------------------------------------------\n\nconstructors\n\nempty 0-by-0 matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< T > &m)\n------------------------------------------------------------------------\n\nCopy constructor.\n\n>  CasADi::Matrix< T >::Matrix(int n, int m)\n------------------------------------------------------------------------\n\nempty n-by-m matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const T &val)\n------------------------------------------------------------------------\n\ndense n-by-m matrix filled with val constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const std::vector< int > &col, const std::vector< int > &rowind, const std::vector< T > &d=std::vector< T >())\n------------------------------------------------------------------------\n\nsparse n-by-m matrix filled with given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< std::vector< T > > &m)\n------------------------------------------------------------------------\n\ndense matrix constructor with data given as vector of vectors\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const T &val=0)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const std::vector< T > &d)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity and non-zero elements.\n\n>  CasADi::Matrix< T >::Matrix(double val)\n------------------------------------------------------------------------\n\nThis constructor enables implicit type conversion from a numeric type.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x)\n------------------------------------------------------------------------\n\nConstruct from a vector.\n\nThanks to implicit conversion, you can pretend that Matrix(const SX& x);\nexists. Note: above remark applies only to C++, not python or octave\ninterfaces\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x, int n, int m)\n------------------------------------------------------------------------\n\nConstruct dense matrix from a vector with the elements in column major\nordering.\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< A > &x)\n------------------------------------------------------------------------\n\nCreate a matrix from a matrix with a different type of matrix entries\n(assuming that the scalar conversion is valid)\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x)\n------------------------------------------------------------------------\n\nCreate an expression from an stl vector.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x, int n, int m)\n------------------------------------------------------------------------\n\nCreate a non-vector expression from an stl vector.\n\n") ,
        Method (Name "DMatrix''''''''''''") valDMatrix [constrefCDoubleVec,valCInt,valCInt] Constructor (Doc "\n\n>  CasADi::Matrix< T >::Matrix()\n------------------------------------------------------------------------\n\nconstructors\n\nempty 0-by-0 matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< T > &m)\n------------------------------------------------------------------------\n\nCopy constructor.\n\n>  CasADi::Matrix< T >::Matrix(int n, int m)\n------------------------------------------------------------------------\n\nempty n-by-m matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const T &val)\n------------------------------------------------------------------------\n\ndense n-by-m matrix filled with val constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const std::vector< int > &col, const std::vector< int > &rowind, const std::vector< T > &d=std::vector< T >())\n------------------------------------------------------------------------\n\nsparse n-by-m matrix filled with given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< std::vector< T > > &m)\n------------------------------------------------------------------------\n\ndense matrix constructor with data given as vector of vectors\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const T &val=0)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const std::vector< T > &d)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity and non-zero elements.\n\n>  CasADi::Matrix< T >::Matrix(double val)\n------------------------------------------------------------------------\n\nThis constructor enables implicit type conversion from a numeric type.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x)\n------------------------------------------------------------------------\n\nConstruct from a vector.\n\nThanks to implicit conversion, you can pretend that Matrix(const SX& x);\nexists. Note: above remark applies only to C++, not python or octave\ninterfaces\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x, int n, int m)\n------------------------------------------------------------------------\n\nConstruct dense matrix from a vector with the elements in column major\nordering.\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< A > &x)\n------------------------------------------------------------------------\n\nCreate a matrix from a matrix with a different type of matrix entries\n(assuming that the scalar conversion is valid)\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x)\n------------------------------------------------------------------------\n\nCreate an expression from an stl vector.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x, int n, int m)\n------------------------------------------------------------------------\n\nCreate a non-vector expression from an stl vector.\n\n") 
      ]
    docs = Doc "\n\nGeneral sparse matrix class General sparse matrix class that is designed\nwith the idea that \"everything is a matrix\", that is, also scalars and\nvectors.  This philosophy makes it easy to use and to interface in\nparticularily with Python and Matlab/Octave. .\n\nThe syntax tries to stay as close as possible to the ublas syntax when it\ncomes to vector/matrix operations.\n\nIndex starts with 0.  Index flatten happens as follows: (i,j) -> k =\nj+i*size2()  Vectors are considered to be column vectors.\n\nThe storage format is a (modified) compressed row storage (CRS) format. This\nway, a vector element can always be accessed in constant time.\n\nMatrix<T> is polymorphic with a std::vector<T> that contain all non-\nidentical-zero elements.  The sparsity can be accessed with CRSSparsity&\nsparsity()\n\nJoel Andersson\n\nC++ includes: matrix.hpp "



ioscheme :: Class
ioscheme = Class IOScheme methods docs
  where
    methods =
      [
        Method (Name "checkNode") valCBool [] Normal (Doc "\n\nCheck if the node is pointing to the right type of object.\n\n") ,
        Method (Name "name") valStdString [] Normal (Doc "\n\nName of the scheme.\n\n") ,
        Method (Name "entryNames") valStdString [] Normal (Doc "\n\nList available entries.\n\n") ,
        Method (Name "index") valCInt [constrefStdString] Normal (Doc "\n\nGet index by entry name.\n\n") ,
        Method (Name "size") valCInt [] Normal (Doc "\n\nNumber of entries.\n\n") ,
        Method (Name "entry") valStdString [valCInt] Normal (Doc "\n\nGet the entry name by index.\n\n") ,
        Method (Name "entryLabel") valStdString [valCInt] Normal (Doc "\n\nGet the entry label by index If scheme is unknown, returns the index as a\nstring.\n\n") ,
        Method (Name "entryEnum") valStdString [valCInt] Normal (Doc "\n\nGet the entry enum name by index.\n\n") ,
        Method (Name "describeInput") valStdString [valCInt] Normal (Doc "\n\nDescribe the index as an input.\n\n") ,
        Method (Name "describeOutput") valStdString [valCInt] Normal (Doc "\n\nDescribe the index as an output.\n\n") ,
        Method (Name "describe") valStdString [valCInt] Normal (Doc "\n\nDescribe the index.\n\n") ,
        Method (Name "known") valCBool [] Normal (Doc "\n\nCheck wether the scheme is known.\n\n") ,
        Method (Name "compatibleSize") valCInt [valCInt] Normal (Doc "\n\nCheck wether this scheme is compatible with the given size.\n\n") ,
        Method (Name "IOScheme") valIOScheme [] Constructor (Doc "\n\n>  CasADi::IOScheme::IOScheme()\n------------------------------------------------------------------------\n\nDefault constructor.\n\n>  CasADi::IOScheme::IOScheme(InputOutputScheme scheme)\n------------------------------------------------------------------------\n\nConstructor with enum.\n\n>  CasADi::IOScheme::IOScheme(const std::vector< std::string > &entries)\n------------------------------------------------------------------------\n\nConstructor with entry names.\n\n") ,
        Method (Name "IOScheme'") valIOScheme [valenumInputOutputScheme] Constructor (Doc "\n\n>  CasADi::IOScheme::IOScheme()\n------------------------------------------------------------------------\n\nDefault constructor.\n\n>  CasADi::IOScheme::IOScheme(InputOutputScheme scheme)\n------------------------------------------------------------------------\n\nConstructor with enum.\n\n>  CasADi::IOScheme::IOScheme(const std::vector< std::string > &entries)\n------------------------------------------------------------------------\n\nConstructor with entry names.\n\n") ,
        Method (Name "IOScheme''") valIOScheme [constrefStdStringVec] Constructor (Doc "\n\n>  CasADi::IOScheme::IOScheme()\n------------------------------------------------------------------------\n\nDefault constructor.\n\n>  CasADi::IOScheme::IOScheme(InputOutputScheme scheme)\n------------------------------------------------------------------------\n\nConstructor with enum.\n\n>  CasADi::IOScheme::IOScheme(const std::vector< std::string > &entries)\n------------------------------------------------------------------------\n\nConstructor with entry names.\n\n") 
      ]
    docs = Doc "\n\nClass with mapping between names and indices.\n\nJoris Gillis\n\nC++ includes: io_scheme.hpp "


sxmatrix :: Class
sxmatrix = Class SXMatrix methods docs
  where
    methods =
      matrixMethods ++ [
        Method (Name "sanityCheck") valCVoid [valCBool] Normal (Doc "\n\nCheck if the dimensions and rowind,col vectors are compatible.\n\nParameters:\n-----------\n\ncomplete:  set to true to also check elementwise throws an error as possible\nresult\n\n") ,
        Method (Name "sanityCheck'") valCVoid [] Normal (Doc "\n\nCheck if the dimensions and rowind,col vectors are compatible.\n\nParameters:\n-----------\n\ncomplete:  set to true to also check elementwise throws an error as possible\nresult\n\n") ,
        Method (Name "vector") valCBool [] Normal (Doc "\n\nublas vector\n\nCheck type of matrix\n\n") ,
        Method (Name "at") valSX [valCInt] Normal (Doc "\n\n>  const T& CasADi::Matrix< T >::at(int k) const \n------------------------------------------------------------------------\n\nGet a non-zero element.\n\n>  T& CasADi::Matrix< T >::at(int k)\n------------------------------------------------------------------------\n\nAccess a non-zero element.\n\n") ,
        Method (Name "elem") valSX [valCInt,valCInt] Normal (Doc "\n\n>  const T & CasADi::Matrix< T >::elem(int i, int j=0) const \n------------------------------------------------------------------------\n\nget an element\n\n>  T & CasADi::Matrix< T >::elem(int i, int j=0)\n------------------------------------------------------------------------\n\nget a reference to an element\n\n") ,
        Method (Name "elem'") valSX [valCInt] Normal (Doc "\n\n>  const T & CasADi::Matrix< T >::elem(int i, int j=0) const \n------------------------------------------------------------------------\n\nget an element\n\n>  T & CasADi::Matrix< T >::elem(int i, int j=0)\n------------------------------------------------------------------------\n\nget a reference to an element\n\n") ,
        Method (Name "hasNZ") valCBool [valCInt,valCInt] Normal (Doc "\n\nReturns true if the matrix has a non-zero at location i,j.\n\n") ,
        Method (Name "__nonzero__") valCBool [] Normal (Doc "\n\nReturns the truth value of a Matrix.\n\n") ,
        Method (Name "append") valCVoid [constrefSXMatrix] Normal (Doc "\n\nAppend a matrix to the end.\n\n") ,
        Method (Name "operator +") valSXMatrix [] Normal (Doc "") ,
        Method (Name "operator -") valSXMatrix [] Normal (Doc "") ,
        Method (Name "binary") valSXMatrix [valCInt,constrefSXMatrix,constrefSXMatrix] Static (Doc "\n\nCreate nodes by their ID.\n\n") ,
        Method (Name "unary") valSXMatrix [valCInt,constrefSXMatrix] Static (Doc "\n\nCreate nodes by their ID.\n\n") ,
        Method (Name "scalar_matrix") valSXMatrix [valCInt,constrefSXMatrix,constrefSXMatrix] Static (Doc "\n\nCreate nodes by their ID.\n\n") ,
        Method (Name "matrix_scalar") valSXMatrix [valCInt,constrefSXMatrix,constrefSXMatrix] Static (Doc "\n\nCreate nodes by their ID.\n\n") ,
        Method (Name "matrix_matrix") valSXMatrix [valCInt,constrefSXMatrix,constrefSXMatrix] Static (Doc "\n\nCreate nodes by their ID.\n\n") ,
        Method (Name "__add__") valSXMatrix [constrefSXMatrix] Normal (Doc "\n\nElementwise operations Octave/Python naming.\n\n") ,
        Method (Name "__sub__") valSXMatrix [constrefSXMatrix] Normal (Doc "\n\nElementwise operations Octave/Python naming.\n\n") ,
        Method (Name "__mul__") valSXMatrix [constrefSXMatrix] Normal (Doc "\n\nElementwise operations Octave/Python naming.\n\n") ,
        Method (Name "__div__") valSXMatrix [constrefSXMatrix] Normal (Doc "\n\nElementwise operations Octave/Python naming.\n\n") ,
        Method (Name "__lt__") valSXMatrix [constrefSXMatrix] Normal (Doc "\n\nElementwise operations Octave/Python naming.\n\n") ,
        Method (Name "__le__") valSXMatrix [constrefSXMatrix] Normal (Doc "\n\nElementwise operations Octave/Python naming.\n\n") ,
        Method (Name "__eq__") valSXMatrix [constrefSXMatrix] Normal (Doc "\n\nElementwise operations Octave/Python naming.\n\n") ,
        Method (Name "__ne__") valSXMatrix [constrefSXMatrix] Normal (Doc "\n\nElementwise operations Octave/Python naming.\n\n") ,
        Method (Name "__truediv__") valSXMatrix [constrefSXMatrix] Normal (Doc "\n\nElementwise operations Octave/Python naming.\n\n") ,
        Method (Name "__pow__") valSXMatrix [constrefSXMatrix] Normal (Doc "\n\nElementwise operations Octave/Python naming.\n\n") ,
        Method (Name "__constpow__") valSXMatrix [constrefSXMatrix] Normal (Doc "\n\nElementwise operations Octave/Python naming.\n\n") ,
        Method (Name "__mpower__") valSXMatrix [constrefSXMatrix] Normal (Doc "\n\nElementwise operations Octave/Python naming.\n\n") ,
        Method (Name "__mrdivide__") valSXMatrix [constrefSXMatrix] Normal (Doc "\n\nElementwise operations Octave/Python naming.\n\n") ,
        Method (Name "mul_full") valSXMatrix [constrefSXMatrix,constrefCRSSparsity] Normal (Doc "\n\nMatrix-matrix product.\n\n") ,
        Method (Name "mul_full'") valSXMatrix [constrefSXMatrix] Normal (Doc "\n\nMatrix-matrix product.\n\n") ,
        Method (Name "mul") valSXMatrix [constrefSXMatrix,constrefCRSSparsity] Normal (Doc "\n\nMatrix-matrix product.\n\n") ,
        Method (Name "mul'") valSXMatrix [constrefSXMatrix] Normal (Doc "\n\nMatrix-matrix product.\n\n") ,
        Method (Name "mul_no_alloc_nn") valCVoid [constrefSXMatrix,constrefSXMatrix,refSXMatrix] Static (Doc "") ,
        Method (Name "mul_no_alloc_nt") valCVoid [constrefSXMatrix,constrefSXMatrix,refSXMatrix] Static (Doc "") ,
        Method (Name "mul_no_alloc_tn") valCVoid [constrefSXMatrix,constrefSXMatrix,refSXMatrix] Static (Doc "") ,
        Method (Name "mul_no_alloc_nn'") valCVoid [constrefSXMatrix,constrefSXVec,refSXVec] Static (Doc "") ,
        Method (Name "mul_no_alloc_tn'") valCVoid [constrefSXMatrix,constrefSXVec,refSXVec] Static (Doc "") ,
        Method (Name "quad_form") valSX [constrefSXMatrix,constrefSXVec] Static (Doc "") ,
        Method (Name "trans") valSXMatrix [] Normal (Doc "\n\nMatrix transpose.\n\n") ,
        Method (Name "sin") valSXMatrix [] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "cos") valSXMatrix [] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "tan") valSXMatrix [] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "arcsin") valSXMatrix [] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "arccos") valSXMatrix [] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "arctan") valSXMatrix [] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "exp") valSXMatrix [] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "log") valSXMatrix [] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "sqrt") valSXMatrix [] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "floor") valSXMatrix [] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "ceil") valSXMatrix [] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "fabs") valSXMatrix [] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "sign") valSXMatrix [] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "erfinv") valSXMatrix [] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "fmin") valSXMatrix [constrefSXMatrix] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "fmax") valSXMatrix [constrefSXMatrix] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "erf") valSXMatrix [] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "sinh") valSXMatrix [] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "cosh") valSXMatrix [] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "tanh") valSXMatrix [] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "arcsinh") valSXMatrix [] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "arccosh") valSXMatrix [] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "arctanh") valSXMatrix [] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "arctan2") valSXMatrix [constrefSXMatrix] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "log10") valSXMatrix [] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "printme") valSXMatrix [constrefSXMatrix] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "logic_not") valSXMatrix [] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "logic_and") valSXMatrix [constrefSXMatrix] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "logic_or") valSXMatrix [constrefSXMatrix] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "if_else_zero") valSXMatrix [constrefSXMatrix] Normal (Doc "\n\nOperations defined in the standard namespace for unambigous access and Numpy\ncompatibility.\n\n") ,
        Method (Name "className") valStdString [] Static (Doc "\n\nPrinting.\n\n") ,
        Method (Name "printScalar") valCVoid [refStdOstream] Normal (Doc "\n\nPrinting.\n\n") ,
        Method (Name "printScalar'") valCVoid [] Normal (Doc "\n\nPrinting.\n\n") ,
        Method (Name "printVector") valCVoid [refStdOstream] Normal (Doc "\n\nPrinting.\n\n") ,
        Method (Name "printVector'") valCVoid [] Normal (Doc "\n\nPrinting.\n\n") ,
        Method (Name "printMatrix") valCVoid [refStdOstream] Normal (Doc "\n\nPrinting.\n\n") ,
        Method (Name "printMatrix'") valCVoid [] Normal (Doc "\n\nPrinting.\n\n") ,
        Method (Name "printSparse") valCVoid [refStdOstream] Normal (Doc "\n\nPrinting.\n\n") ,
        Method (Name "printSparse'") valCVoid [] Normal (Doc "\n\nPrinting.\n\n") ,
        Method (Name "printDense") valCVoid [refStdOstream] Normal (Doc "\n\nPrinting.\n\n") ,
        Method (Name "printDense'") valCVoid [] Normal (Doc "\n\nPrinting.\n\n") ,
        Method (Name "col") valCInt [valCInt] Normal (Doc "") ,
        Method (Name "rowind") valCInt [valCInt] Normal (Doc "") ,
        Method (Name "clear") valCVoid [] Normal (Doc "") ,
        Method (Name "resize") valCVoid [valCInt,valCInt] Normal (Doc "") ,
        Method (Name "reserve") valCVoid [valCInt] Normal (Doc "") ,
        Method (Name "reserve'") valCVoid [valCInt,valCInt] Normal (Doc "") ,
        Method (Name "erase") valCVoid [constrefCIntVec,constrefCIntVec] Normal (Doc "\n\nErase a submatrix Erase rows and/or columns of a matrix.\n\n") ,
        Method (Name "remove") valCVoid [constrefCIntVec,constrefCIntVec] Normal (Doc "\n\nRemove rows or columns Rremove/delete rows and/or columns of a matrix.\n\n") ,
        Method (Name "enlarge") valCVoid [valCInt,valCInt,constrefCIntVec,constrefCIntVec] Normal (Doc "\n\nEnlarge matrix Make the matrix larger by inserting empty rows and columns,\nkeeping the existing non-zeros.\n\n") ,
        Method (Name "data") valSXVec [] Normal (Doc "\n\n>  std::vector< T > & CasADi::Matrix< T >::data()\n------------------------------------------------------------------------\n\nAccess the non-zero elements.\n\n>  const std::vector< T > & CasADi::Matrix< T >::data() const \n------------------------------------------------------------------------\n\nConst access the non-zero elements.\n\n") ,
        Method (Name "sparsityRef") valCRSSparsity [] Normal (Doc "\n\nAccess the sparsity, make a copy if there are multiple references to it.\n\n") ,
        Method (Name "set") valCVoid [valSX,valenumSparsity] Normal (Doc "\n\n>  void CasADi::Matrix< T >::set(T val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nSet the non-zero elements, scalar.\n\n>  void CasADi::Matrix< T >::set(const std::vector< T > &val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nSet the non-zero elements, vector.\n\n>  void CasADi::Matrix< T >::set(const Matrix< T > &val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nSet the non-zero elements, Matrix.\n\n>  void CasADi::Matrix< T >::set(const T *val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nLegacy - use setArray instead.\n\n") ,
        Method (Name "set'") valCVoid [valSX] Normal (Doc "\n\n>  void CasADi::Matrix< T >::set(T val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nSet the non-zero elements, scalar.\n\n>  void CasADi::Matrix< T >::set(const std::vector< T > &val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nSet the non-zero elements, vector.\n\n>  void CasADi::Matrix< T >::set(const Matrix< T > &val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nSet the non-zero elements, Matrix.\n\n>  void CasADi::Matrix< T >::set(const T *val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nLegacy - use setArray instead.\n\n") ,
        Method (Name "get") valCVoid [refSX,valenumSparsity] Normal (Doc "\n\n>  void CasADi::Matrix< T >::get(T &val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nGet the non-zero elements, scalar.\n\n>  void CasADi::Matrix< T >::get(std::vector< T > &val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nGet the non-zero elements, vector.\n\n>  void CasADi::Matrix< T >::get(Matrix< T > &val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nGet the non-zero elements, Matrix.\n\n>  void CasADi::Matrix< T >::get(T *val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nLegacy - use getArray instead.\n\n") ,
        Method (Name "get'") valCVoid [refSX] Normal (Doc "\n\n>  void CasADi::Matrix< T >::get(T &val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nGet the non-zero elements, scalar.\n\n>  void CasADi::Matrix< T >::get(std::vector< T > &val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nGet the non-zero elements, vector.\n\n>  void CasADi::Matrix< T >::get(Matrix< T > &val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nGet the non-zero elements, Matrix.\n\n>  void CasADi::Matrix< T >::get(T *val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nLegacy - use getArray instead.\n\n") ,
        Method (Name "set''") valCVoid [constrefSXVec,valenumSparsity] Normal (Doc "\n\n>  void CasADi::Matrix< T >::set(T val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nSet the non-zero elements, scalar.\n\n>  void CasADi::Matrix< T >::set(const std::vector< T > &val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nSet the non-zero elements, vector.\n\n>  void CasADi::Matrix< T >::set(const Matrix< T > &val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nSet the non-zero elements, Matrix.\n\n>  void CasADi::Matrix< T >::set(const T *val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nLegacy - use setArray instead.\n\n") ,
        Method (Name "set'''") valCVoid [constrefSXVec] Normal (Doc "\n\n>  void CasADi::Matrix< T >::set(T val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nSet the non-zero elements, scalar.\n\n>  void CasADi::Matrix< T >::set(const std::vector< T > &val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nSet the non-zero elements, vector.\n\n>  void CasADi::Matrix< T >::set(const Matrix< T > &val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nSet the non-zero elements, Matrix.\n\n>  void CasADi::Matrix< T >::set(const T *val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nLegacy - use setArray instead.\n\n") ,
        Method (Name "get''") valCVoid [refSXVec,valenumSparsity] Normal (Doc "\n\n>  void CasADi::Matrix< T >::get(T &val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nGet the non-zero elements, scalar.\n\n>  void CasADi::Matrix< T >::get(std::vector< T > &val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nGet the non-zero elements, vector.\n\n>  void CasADi::Matrix< T >::get(Matrix< T > &val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nGet the non-zero elements, Matrix.\n\n>  void CasADi::Matrix< T >::get(T *val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nLegacy - use getArray instead.\n\n") ,
        Method (Name "get'''") valCVoid [refSXVec] Normal (Doc "\n\n>  void CasADi::Matrix< T >::get(T &val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nGet the non-zero elements, scalar.\n\n>  void CasADi::Matrix< T >::get(std::vector< T > &val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nGet the non-zero elements, vector.\n\n>  void CasADi::Matrix< T >::get(Matrix< T > &val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nGet the non-zero elements, Matrix.\n\n>  void CasADi::Matrix< T >::get(T *val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nLegacy - use getArray instead.\n\n") ,
        Method (Name "set''''") valCVoid [constrefSXMatrix,valenumSparsity] Normal (Doc "\n\n>  void CasADi::Matrix< T >::set(T val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nSet the non-zero elements, scalar.\n\n>  void CasADi::Matrix< T >::set(const std::vector< T > &val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nSet the non-zero elements, vector.\n\n>  void CasADi::Matrix< T >::set(const Matrix< T > &val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nSet the non-zero elements, Matrix.\n\n>  void CasADi::Matrix< T >::set(const T *val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nLegacy - use setArray instead.\n\n") ,
        Method (Name "set'''''") valCVoid [constrefSXMatrix] Normal (Doc "\n\n>  void CasADi::Matrix< T >::set(T val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nSet the non-zero elements, scalar.\n\n>  void CasADi::Matrix< T >::set(const std::vector< T > &val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nSet the non-zero elements, vector.\n\n>  void CasADi::Matrix< T >::set(const Matrix< T > &val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nSet the non-zero elements, Matrix.\n\n>  void CasADi::Matrix< T >::set(const T *val, Sparsity sp=SPARSE)\n------------------------------------------------------------------------\n\nLegacy - use setArray instead.\n\n") ,
        Method (Name "get''''") valCVoid [refSXMatrix,valenumSparsity] Normal (Doc "\n\n>  void CasADi::Matrix< T >::get(T &val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nGet the non-zero elements, scalar.\n\n>  void CasADi::Matrix< T >::get(std::vector< T > &val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nGet the non-zero elements, vector.\n\n>  void CasADi::Matrix< T >::get(Matrix< T > &val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nGet the non-zero elements, Matrix.\n\n>  void CasADi::Matrix< T >::get(T *val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nLegacy - use getArray instead.\n\n") ,
        Method (Name "get'''''") valCVoid [refSXMatrix] Normal (Doc "\n\n>  void CasADi::Matrix< T >::get(T &val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nGet the non-zero elements, scalar.\n\n>  void CasADi::Matrix< T >::get(std::vector< T > &val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nGet the non-zero elements, vector.\n\n>  void CasADi::Matrix< T >::get(Matrix< T > &val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nGet the non-zero elements, Matrix.\n\n>  void CasADi::Matrix< T >::get(T *val, Sparsity sp=SPARSE) const \n------------------------------------------------------------------------\n\nLegacy - use getArray instead.\n\n") ,
        Method (Name "sparse") valSXMatrix [valCInt,valCInt] Static (Doc "\n\n>  Matrix< T > CasADi::Matrix< T >::sparse(int nrow, int ncol=1)\n\n>  Matrix< T > CasADi::Matrix< T >::sparse(const std::pair< int, int > &nm)\n------------------------------------------------------------------------\n\ncreate a sparse matrix with all zeros\n\n>  Matrix< T > CasADi::Matrix< T >::sparse(const std::vector< int > &row, const std::vector< int > &col, const std::vector< T > &d, int n, int m)\n\n>  Matrix< T > CasADi::Matrix< T >::sparse(const std::vector< int > &row, const std::vector< int > &col, const std::vector< T > &d, const std::pair< int, int > &nm)\n------------------------------------------------------------------------\n\nConstruct a sparse matrix from triplet form.\n\n") ,
        Method (Name "sparse'") valSXMatrix [valCInt] Static (Doc "\n\n>  Matrix< T > CasADi::Matrix< T >::sparse(int nrow, int ncol=1)\n\n>  Matrix< T > CasADi::Matrix< T >::sparse(const std::pair< int, int > &nm)\n------------------------------------------------------------------------\n\ncreate a sparse matrix with all zeros\n\n>  Matrix< T > CasADi::Matrix< T >::sparse(const std::vector< int > &row, const std::vector< int > &col, const std::vector< T > &d, int n, int m)\n\n>  Matrix< T > CasADi::Matrix< T >::sparse(const std::vector< int > &row, const std::vector< int > &col, const std::vector< T > &d, const std::pair< int, int > &nm)\n------------------------------------------------------------------------\n\nConstruct a sparse matrix from triplet form.\n\n") ,
        Method (Name "sparse''") valSXMatrix [constrefCIntVec,constrefCIntVec,constrefSXVec] Static (Doc "\n\n>  Matrix< T > CasADi::Matrix< T >::sparse(int nrow, int ncol=1)\n\n>  Matrix< T > CasADi::Matrix< T >::sparse(const std::pair< int, int > &nm)\n------------------------------------------------------------------------\n\ncreate a sparse matrix with all zeros\n\n>  Matrix< T > CasADi::Matrix< T >::sparse(const std::vector< int > &row, const std::vector< int > &col, const std::vector< T > &d, int n, int m)\n\n>  Matrix< T > CasADi::Matrix< T >::sparse(const std::vector< int > &row, const std::vector< int > &col, const std::vector< T > &d, const std::pair< int, int > &nm)\n------------------------------------------------------------------------\n\nConstruct a sparse matrix from triplet form.\n\n") ,
        Method (Name "sparse'''") valSXMatrix [constrefCIntVec,constrefCIntVec,constrefSXVec,valCInt,valCInt] Static (Doc "\n\n>  Matrix< T > CasADi::Matrix< T >::sparse(int nrow, int ncol=1)\n\n>  Matrix< T > CasADi::Matrix< T >::sparse(const std::pair< int, int > &nm)\n------------------------------------------------------------------------\n\ncreate a sparse matrix with all zeros\n\n>  Matrix< T > CasADi::Matrix< T >::sparse(const std::vector< int > &row, const std::vector< int > &col, const std::vector< T > &d, int n, int m)\n\n>  Matrix< T > CasADi::Matrix< T >::sparse(const std::vector< int > &row, const std::vector< int > &col, const std::vector< T > &d, const std::pair< int, int > &nm)\n------------------------------------------------------------------------\n\nConstruct a sparse matrix from triplet form.\n\n") ,
        Method (Name "zeros") valSXMatrix [constrefCRSSparsity] Static (Doc "\n\ncreate a dense matrix with all zeros\n\n") ,
        Method (Name "zeros'") valSXMatrix [valCInt,valCInt] Static (Doc "\n\ncreate a dense matrix with all zeros\n\n") ,
        Method (Name "zeros''") valSXMatrix [valCInt] Static (Doc "\n\ncreate a dense matrix with all zeros\n\n") ,
        Method (Name "ones") valSXMatrix [constrefCRSSparsity] Static (Doc "\n\ncreate a matrix with all ones\n\n") ,
        Method (Name "ones'") valSXMatrix [valCInt,valCInt] Static (Doc "\n\ncreate a matrix with all ones\n\n") ,
        Method (Name "ones''") valSXMatrix [valCInt] Static (Doc "\n\ncreate a matrix with all ones\n\n") ,
        Method (Name "inf") valSXMatrix [constrefCRSSparsity] Static (Doc "\n\ncreate a matrix with all inf\n\n") ,
        Method (Name "inf'") valSXMatrix [valCInt,valCInt] Static (Doc "\n\ncreate a matrix with all inf\n\n") ,
        Method (Name "inf''") valSXMatrix [valCInt] Static (Doc "\n\ncreate a matrix with all inf\n\n") ,
        Method (Name "inf'''") valSXMatrix [] Static (Doc "\n\ncreate a matrix with all inf\n\n") ,
        Method (Name "nan") valSXMatrix [constrefCRSSparsity] Static (Doc "\n\ncreate a matrix with all nan\n\n") ,
        Method (Name "nan'") valSXMatrix [valCInt,valCInt] Static (Doc "\n\ncreate a matrix with all nan\n\n") ,
        Method (Name "nan''") valSXMatrix [valCInt] Static (Doc "\n\ncreate a matrix with all nan\n\n") ,
        Method (Name "nan'''") valSXMatrix [] Static (Doc "\n\ncreate a matrix with all nan\n\n") ,
        Method (Name "repmat") valSXMatrix [constrefSXMatrix,valCInt,valCInt] Static (Doc "\n\ncreate a matrix by repeating an existing matrix\n\n") ,
        Method (Name "repmat'") valSXMatrix [constrefSXMatrix,valCInt] Static (Doc "\n\ncreate a matrix by repeating an existing matrix\n\n") ,
        Method (Name "eye") valSXMatrix [valCInt] Static (Doc "") ,
        Method (Name "isNull") valCBool [] Normal (Doc "\n\nThe following function is used to ensure similarity to MX, which is\nreference counted.\n\n") ,
        Method (Name "setPrecision") valCVoid [valCInt] Static (Doc "\n\nSet the 'precision, width & scientific' used in printing and serializing to\nstreams.\n\n") ,
        Method (Name "setWidth") valCVoid [valCInt] Static (Doc "\n\nSet the 'precision, width & scientific' used in printing and serializing to\nstreams.\n\n") ,
        Method (Name "setScientific") valCVoid [valCBool] Static (Doc "\n\nSet the 'precision, width & scientific' used in printing and serializing to\nstreams.\n\n") ,
        Method (Name "SXMatrix") valSXMatrix [] Constructor (Doc "\n\n>  CasADi::Matrix< T >::Matrix()\n------------------------------------------------------------------------\n\nconstructors\n\nempty 0-by-0 matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< T > &m)\n------------------------------------------------------------------------\n\nCopy constructor.\n\n>  CasADi::Matrix< T >::Matrix(int n, int m)\n------------------------------------------------------------------------\n\nempty n-by-m matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const T &val)\n------------------------------------------------------------------------\n\ndense n-by-m matrix filled with val constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const std::vector< int > &col, const std::vector< int > &rowind, const std::vector< T > &d=std::vector< T >())\n------------------------------------------------------------------------\n\nsparse n-by-m matrix filled with given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< std::vector< T > > &m)\n------------------------------------------------------------------------\n\ndense matrix constructor with data given as vector of vectors\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const T &val=0)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const std::vector< T > &d)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity and non-zero elements.\n\n>  CasADi::Matrix< T >::Matrix(double val)\n------------------------------------------------------------------------\n\nThis constructor enables implicit type conversion from a numeric type.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x)\n------------------------------------------------------------------------\n\nConstruct from a vector.\n\nThanks to implicit conversion, you can pretend that Matrix(const SX& x);\nexists. Note: above remark applies only to C++, not python or octave\ninterfaces\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x, int n, int m)\n------------------------------------------------------------------------\n\nConstruct dense matrix from a vector with the elements in column major\nordering.\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< A > &x)\n------------------------------------------------------------------------\n\nCreate a matrix from a matrix with a different type of matrix entries\n(assuming that the scalar conversion is valid)\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x)\n------------------------------------------------------------------------\n\nCreate an expression from an stl vector.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x, int n, int m)\n------------------------------------------------------------------------\n\nCreate a non-vector expression from an stl vector.\n\n") ,
        Method (Name "SXMatrix'") valSXMatrix [constrefSXMatrix] Constructor (Doc "\n\n>  CasADi::Matrix< T >::Matrix()\n------------------------------------------------------------------------\n\nconstructors\n\nempty 0-by-0 matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< T > &m)\n------------------------------------------------------------------------\n\nCopy constructor.\n\n>  CasADi::Matrix< T >::Matrix(int n, int m)\n------------------------------------------------------------------------\n\nempty n-by-m matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const T &val)\n------------------------------------------------------------------------\n\ndense n-by-m matrix filled with val constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const std::vector< int > &col, const std::vector< int > &rowind, const std::vector< T > &d=std::vector< T >())\n------------------------------------------------------------------------\n\nsparse n-by-m matrix filled with given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< std::vector< T > > &m)\n------------------------------------------------------------------------\n\ndense matrix constructor with data given as vector of vectors\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const T &val=0)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const std::vector< T > &d)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity and non-zero elements.\n\n>  CasADi::Matrix< T >::Matrix(double val)\n------------------------------------------------------------------------\n\nThis constructor enables implicit type conversion from a numeric type.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x)\n------------------------------------------------------------------------\n\nConstruct from a vector.\n\nThanks to implicit conversion, you can pretend that Matrix(const SX& x);\nexists. Note: above remark applies only to C++, not python or octave\ninterfaces\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x, int n, int m)\n------------------------------------------------------------------------\n\nConstruct dense matrix from a vector with the elements in column major\nordering.\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< A > &x)\n------------------------------------------------------------------------\n\nCreate a matrix from a matrix with a different type of matrix entries\n(assuming that the scalar conversion is valid)\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x)\n------------------------------------------------------------------------\n\nCreate an expression from an stl vector.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x, int n, int m)\n------------------------------------------------------------------------\n\nCreate a non-vector expression from an stl vector.\n\n") ,
        Method (Name "SXMatrix''") valSXMatrix [valCInt,valCInt] Constructor (Doc "\n\n>  CasADi::Matrix< T >::Matrix()\n------------------------------------------------------------------------\n\nconstructors\n\nempty 0-by-0 matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< T > &m)\n------------------------------------------------------------------------\n\nCopy constructor.\n\n>  CasADi::Matrix< T >::Matrix(int n, int m)\n------------------------------------------------------------------------\n\nempty n-by-m matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const T &val)\n------------------------------------------------------------------------\n\ndense n-by-m matrix filled with val constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const std::vector< int > &col, const std::vector< int > &rowind, const std::vector< T > &d=std::vector< T >())\n------------------------------------------------------------------------\n\nsparse n-by-m matrix filled with given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< std::vector< T > > &m)\n------------------------------------------------------------------------\n\ndense matrix constructor with data given as vector of vectors\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const T &val=0)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const std::vector< T > &d)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity and non-zero elements.\n\n>  CasADi::Matrix< T >::Matrix(double val)\n------------------------------------------------------------------------\n\nThis constructor enables implicit type conversion from a numeric type.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x)\n------------------------------------------------------------------------\n\nConstruct from a vector.\n\nThanks to implicit conversion, you can pretend that Matrix(const SX& x);\nexists. Note: above remark applies only to C++, not python or octave\ninterfaces\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x, int n, int m)\n------------------------------------------------------------------------\n\nConstruct dense matrix from a vector with the elements in column major\nordering.\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< A > &x)\n------------------------------------------------------------------------\n\nCreate a matrix from a matrix with a different type of matrix entries\n(assuming that the scalar conversion is valid)\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x)\n------------------------------------------------------------------------\n\nCreate an expression from an stl vector.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x, int n, int m)\n------------------------------------------------------------------------\n\nCreate a non-vector expression from an stl vector.\n\n") ,
        Method (Name "SXMatrix'''") valSXMatrix [valCInt,valCInt,constrefSX] Constructor (Doc "\n\n>  CasADi::Matrix< T >::Matrix()\n------------------------------------------------------------------------\n\nconstructors\n\nempty 0-by-0 matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< T > &m)\n------------------------------------------------------------------------\n\nCopy constructor.\n\n>  CasADi::Matrix< T >::Matrix(int n, int m)\n------------------------------------------------------------------------\n\nempty n-by-m matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const T &val)\n------------------------------------------------------------------------\n\ndense n-by-m matrix filled with val constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const std::vector< int > &col, const std::vector< int > &rowind, const std::vector< T > &d=std::vector< T >())\n------------------------------------------------------------------------\n\nsparse n-by-m matrix filled with given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< std::vector< T > > &m)\n------------------------------------------------------------------------\n\ndense matrix constructor with data given as vector of vectors\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const T &val=0)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const std::vector< T > &d)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity and non-zero elements.\n\n>  CasADi::Matrix< T >::Matrix(double val)\n------------------------------------------------------------------------\n\nThis constructor enables implicit type conversion from a numeric type.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x)\n------------------------------------------------------------------------\n\nConstruct from a vector.\n\nThanks to implicit conversion, you can pretend that Matrix(const SX& x);\nexists. Note: above remark applies only to C++, not python or octave\ninterfaces\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x, int n, int m)\n------------------------------------------------------------------------\n\nConstruct dense matrix from a vector with the elements in column major\nordering.\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< A > &x)\n------------------------------------------------------------------------\n\nCreate a matrix from a matrix with a different type of matrix entries\n(assuming that the scalar conversion is valid)\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x)\n------------------------------------------------------------------------\n\nCreate an expression from an stl vector.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x, int n, int m)\n------------------------------------------------------------------------\n\nCreate a non-vector expression from an stl vector.\n\n") ,
        Method (Name "SXMatrix''''") valSXMatrix [valCInt,valCInt,constrefCIntVec,constrefCIntVec,constrefSXVec] Constructor (Doc "\n\n>  CasADi::Matrix< T >::Matrix()\n------------------------------------------------------------------------\n\nconstructors\n\nempty 0-by-0 matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< T > &m)\n------------------------------------------------------------------------\n\nCopy constructor.\n\n>  CasADi::Matrix< T >::Matrix(int n, int m)\n------------------------------------------------------------------------\n\nempty n-by-m matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const T &val)\n------------------------------------------------------------------------\n\ndense n-by-m matrix filled with val constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const std::vector< int > &col, const std::vector< int > &rowind, const std::vector< T > &d=std::vector< T >())\n------------------------------------------------------------------------\n\nsparse n-by-m matrix filled with given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< std::vector< T > > &m)\n------------------------------------------------------------------------\n\ndense matrix constructor with data given as vector of vectors\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const T &val=0)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const std::vector< T > &d)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity and non-zero elements.\n\n>  CasADi::Matrix< T >::Matrix(double val)\n------------------------------------------------------------------------\n\nThis constructor enables implicit type conversion from a numeric type.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x)\n------------------------------------------------------------------------\n\nConstruct from a vector.\n\nThanks to implicit conversion, you can pretend that Matrix(const SX& x);\nexists. Note: above remark applies only to C++, not python or octave\ninterfaces\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x, int n, int m)\n------------------------------------------------------------------------\n\nConstruct dense matrix from a vector with the elements in column major\nordering.\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< A > &x)\n------------------------------------------------------------------------\n\nCreate a matrix from a matrix with a different type of matrix entries\n(assuming that the scalar conversion is valid)\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x)\n------------------------------------------------------------------------\n\nCreate an expression from an stl vector.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x, int n, int m)\n------------------------------------------------------------------------\n\nCreate a non-vector expression from an stl vector.\n\n") ,
        Method (Name "SXMatrix'''''") valSXMatrix [valCInt,valCInt,constrefCIntVec,constrefCIntVec] Constructor (Doc "\n\n>  CasADi::Matrix< T >::Matrix()\n------------------------------------------------------------------------\n\nconstructors\n\nempty 0-by-0 matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< T > &m)\n------------------------------------------------------------------------\n\nCopy constructor.\n\n>  CasADi::Matrix< T >::Matrix(int n, int m)\n------------------------------------------------------------------------\n\nempty n-by-m matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const T &val)\n------------------------------------------------------------------------\n\ndense n-by-m matrix filled with val constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const std::vector< int > &col, const std::vector< int > &rowind, const std::vector< T > &d=std::vector< T >())\n------------------------------------------------------------------------\n\nsparse n-by-m matrix filled with given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< std::vector< T > > &m)\n------------------------------------------------------------------------\n\ndense matrix constructor with data given as vector of vectors\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const T &val=0)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const std::vector< T > &d)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity and non-zero elements.\n\n>  CasADi::Matrix< T >::Matrix(double val)\n------------------------------------------------------------------------\n\nThis constructor enables implicit type conversion from a numeric type.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x)\n------------------------------------------------------------------------\n\nConstruct from a vector.\n\nThanks to implicit conversion, you can pretend that Matrix(const SX& x);\nexists. Note: above remark applies only to C++, not python or octave\ninterfaces\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x, int n, int m)\n------------------------------------------------------------------------\n\nConstruct dense matrix from a vector with the elements in column major\nordering.\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< A > &x)\n------------------------------------------------------------------------\n\nCreate a matrix from a matrix with a different type of matrix entries\n(assuming that the scalar conversion is valid)\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x)\n------------------------------------------------------------------------\n\nCreate an expression from an stl vector.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x, int n, int m)\n------------------------------------------------------------------------\n\nCreate a non-vector expression from an stl vector.\n\n") ,
        Method (Name "SXMatrix''''''") valSXMatrix [constrefSXVecVec] Constructor (Doc "\n\n>  CasADi::Matrix< T >::Matrix()\n------------------------------------------------------------------------\n\nconstructors\n\nempty 0-by-0 matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< T > &m)\n------------------------------------------------------------------------\n\nCopy constructor.\n\n>  CasADi::Matrix< T >::Matrix(int n, int m)\n------------------------------------------------------------------------\n\nempty n-by-m matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const T &val)\n------------------------------------------------------------------------\n\ndense n-by-m matrix filled with val constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const std::vector< int > &col, const std::vector< int > &rowind, const std::vector< T > &d=std::vector< T >())\n------------------------------------------------------------------------\n\nsparse n-by-m matrix filled with given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< std::vector< T > > &m)\n------------------------------------------------------------------------\n\ndense matrix constructor with data given as vector of vectors\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const T &val=0)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const std::vector< T > &d)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity and non-zero elements.\n\n>  CasADi::Matrix< T >::Matrix(double val)\n------------------------------------------------------------------------\n\nThis constructor enables implicit type conversion from a numeric type.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x)\n------------------------------------------------------------------------\n\nConstruct from a vector.\n\nThanks to implicit conversion, you can pretend that Matrix(const SX& x);\nexists. Note: above remark applies only to C++, not python or octave\ninterfaces\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x, int n, int m)\n------------------------------------------------------------------------\n\nConstruct dense matrix from a vector with the elements in column major\nordering.\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< A > &x)\n------------------------------------------------------------------------\n\nCreate a matrix from a matrix with a different type of matrix entries\n(assuming that the scalar conversion is valid)\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x)\n------------------------------------------------------------------------\n\nCreate an expression from an stl vector.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x, int n, int m)\n------------------------------------------------------------------------\n\nCreate a non-vector expression from an stl vector.\n\n") ,
        Method (Name "SXMatrix'''''''") valSXMatrix [constrefCRSSparsity,constrefSX] Constructor (Doc "\n\n>  CasADi::Matrix< T >::Matrix()\n------------------------------------------------------------------------\n\nconstructors\n\nempty 0-by-0 matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< T > &m)\n------------------------------------------------------------------------\n\nCopy constructor.\n\n>  CasADi::Matrix< T >::Matrix(int n, int m)\n------------------------------------------------------------------------\n\nempty n-by-m matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const T &val)\n------------------------------------------------------------------------\n\ndense n-by-m matrix filled with val constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const std::vector< int > &col, const std::vector< int > &rowind, const std::vector< T > &d=std::vector< T >())\n------------------------------------------------------------------------\n\nsparse n-by-m matrix filled with given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< std::vector< T > > &m)\n------------------------------------------------------------------------\n\ndense matrix constructor with data given as vector of vectors\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const T &val=0)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const std::vector< T > &d)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity and non-zero elements.\n\n>  CasADi::Matrix< T >::Matrix(double val)\n------------------------------------------------------------------------\n\nThis constructor enables implicit type conversion from a numeric type.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x)\n------------------------------------------------------------------------\n\nConstruct from a vector.\n\nThanks to implicit conversion, you can pretend that Matrix(const SX& x);\nexists. Note: above remark applies only to C++, not python or octave\ninterfaces\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x, int n, int m)\n------------------------------------------------------------------------\n\nConstruct dense matrix from a vector with the elements in column major\nordering.\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< A > &x)\n------------------------------------------------------------------------\n\nCreate a matrix from a matrix with a different type of matrix entries\n(assuming that the scalar conversion is valid)\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x)\n------------------------------------------------------------------------\n\nCreate an expression from an stl vector.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x, int n, int m)\n------------------------------------------------------------------------\n\nCreate a non-vector expression from an stl vector.\n\n") ,
        Method (Name "SXMatrix''''''''") valSXMatrix [constrefCRSSparsity] Constructor (Doc "\n\n>  CasADi::Matrix< T >::Matrix()\n------------------------------------------------------------------------\n\nconstructors\n\nempty 0-by-0 matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< T > &m)\n------------------------------------------------------------------------\n\nCopy constructor.\n\n>  CasADi::Matrix< T >::Matrix(int n, int m)\n------------------------------------------------------------------------\n\nempty n-by-m matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const T &val)\n------------------------------------------------------------------------\n\ndense n-by-m matrix filled with val constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const std::vector< int > &col, const std::vector< int > &rowind, const std::vector< T > &d=std::vector< T >())\n------------------------------------------------------------------------\n\nsparse n-by-m matrix filled with given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< std::vector< T > > &m)\n------------------------------------------------------------------------\n\ndense matrix constructor with data given as vector of vectors\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const T &val=0)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const std::vector< T > &d)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity and non-zero elements.\n\n>  CasADi::Matrix< T >::Matrix(double val)\n------------------------------------------------------------------------\n\nThis constructor enables implicit type conversion from a numeric type.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x)\n------------------------------------------------------------------------\n\nConstruct from a vector.\n\nThanks to implicit conversion, you can pretend that Matrix(const SX& x);\nexists. Note: above remark applies only to C++, not python or octave\ninterfaces\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x, int n, int m)\n------------------------------------------------------------------------\n\nConstruct dense matrix from a vector with the elements in column major\nordering.\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< A > &x)\n------------------------------------------------------------------------\n\nCreate a matrix from a matrix with a different type of matrix entries\n(assuming that the scalar conversion is valid)\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x)\n------------------------------------------------------------------------\n\nCreate an expression from an stl vector.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x, int n, int m)\n------------------------------------------------------------------------\n\nCreate a non-vector expression from an stl vector.\n\n") ,
        Method (Name "SXMatrix'''''''''") valSXMatrix [constrefCRSSparsity,constrefSXVec] Constructor (Doc "\n\n>  CasADi::Matrix< T >::Matrix()\n------------------------------------------------------------------------\n\nconstructors\n\nempty 0-by-0 matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< T > &m)\n------------------------------------------------------------------------\n\nCopy constructor.\n\n>  CasADi::Matrix< T >::Matrix(int n, int m)\n------------------------------------------------------------------------\n\nempty n-by-m matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const T &val)\n------------------------------------------------------------------------\n\ndense n-by-m matrix filled with val constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const std::vector< int > &col, const std::vector< int > &rowind, const std::vector< T > &d=std::vector< T >())\n------------------------------------------------------------------------\n\nsparse n-by-m matrix filled with given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< std::vector< T > > &m)\n------------------------------------------------------------------------\n\ndense matrix constructor with data given as vector of vectors\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const T &val=0)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const std::vector< T > &d)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity and non-zero elements.\n\n>  CasADi::Matrix< T >::Matrix(double val)\n------------------------------------------------------------------------\n\nThis constructor enables implicit type conversion from a numeric type.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x)\n------------------------------------------------------------------------\n\nConstruct from a vector.\n\nThanks to implicit conversion, you can pretend that Matrix(const SX& x);\nexists. Note: above remark applies only to C++, not python or octave\ninterfaces\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x, int n, int m)\n------------------------------------------------------------------------\n\nConstruct dense matrix from a vector with the elements in column major\nordering.\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< A > &x)\n------------------------------------------------------------------------\n\nCreate a matrix from a matrix with a different type of matrix entries\n(assuming that the scalar conversion is valid)\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x)\n------------------------------------------------------------------------\n\nCreate an expression from an stl vector.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x, int n, int m)\n------------------------------------------------------------------------\n\nCreate a non-vector expression from an stl vector.\n\n") ,
        Method (Name "SXMatrix''''''''''") valSXMatrix [valCDouble] Constructor (Doc "\n\n>  CasADi::Matrix< T >::Matrix()\n------------------------------------------------------------------------\n\nconstructors\n\nempty 0-by-0 matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< T > &m)\n------------------------------------------------------------------------\n\nCopy constructor.\n\n>  CasADi::Matrix< T >::Matrix(int n, int m)\n------------------------------------------------------------------------\n\nempty n-by-m matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const T &val)\n------------------------------------------------------------------------\n\ndense n-by-m matrix filled with val constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const std::vector< int > &col, const std::vector< int > &rowind, const std::vector< T > &d=std::vector< T >())\n------------------------------------------------------------------------\n\nsparse n-by-m matrix filled with given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< std::vector< T > > &m)\n------------------------------------------------------------------------\n\ndense matrix constructor with data given as vector of vectors\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const T &val=0)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const std::vector< T > &d)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity and non-zero elements.\n\n>  CasADi::Matrix< T >::Matrix(double val)\n------------------------------------------------------------------------\n\nThis constructor enables implicit type conversion from a numeric type.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x)\n------------------------------------------------------------------------\n\nConstruct from a vector.\n\nThanks to implicit conversion, you can pretend that Matrix(const SX& x);\nexists. Note: above remark applies only to C++, not python or octave\ninterfaces\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x, int n, int m)\n------------------------------------------------------------------------\n\nConstruct dense matrix from a vector with the elements in column major\nordering.\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< A > &x)\n------------------------------------------------------------------------\n\nCreate a matrix from a matrix with a different type of matrix entries\n(assuming that the scalar conversion is valid)\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x)\n------------------------------------------------------------------------\n\nCreate an expression from an stl vector.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x, int n, int m)\n------------------------------------------------------------------------\n\nCreate a non-vector expression from an stl vector.\n\n") ,
        Method (Name "SXMatrix'''''''''''") valSXMatrix [constrefSXVec] Constructor (Doc "\n\n>  CasADi::Matrix< T >::Matrix()\n------------------------------------------------------------------------\n\nconstructors\n\nempty 0-by-0 matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< T > &m)\n------------------------------------------------------------------------\n\nCopy constructor.\n\n>  CasADi::Matrix< T >::Matrix(int n, int m)\n------------------------------------------------------------------------\n\nempty n-by-m matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const T &val)\n------------------------------------------------------------------------\n\ndense n-by-m matrix filled with val constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const std::vector< int > &col, const std::vector< int > &rowind, const std::vector< T > &d=std::vector< T >())\n------------------------------------------------------------------------\n\nsparse n-by-m matrix filled with given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< std::vector< T > > &m)\n------------------------------------------------------------------------\n\ndense matrix constructor with data given as vector of vectors\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const T &val=0)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const std::vector< T > &d)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity and non-zero elements.\n\n>  CasADi::Matrix< T >::Matrix(double val)\n------------------------------------------------------------------------\n\nThis constructor enables implicit type conversion from a numeric type.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x)\n------------------------------------------------------------------------\n\nConstruct from a vector.\n\nThanks to implicit conversion, you can pretend that Matrix(const SX& x);\nexists. Note: above remark applies only to C++, not python or octave\ninterfaces\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x, int n, int m)\n------------------------------------------------------------------------\n\nConstruct dense matrix from a vector with the elements in column major\nordering.\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< A > &x)\n------------------------------------------------------------------------\n\nCreate a matrix from a matrix with a different type of matrix entries\n(assuming that the scalar conversion is valid)\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x)\n------------------------------------------------------------------------\n\nCreate an expression from an stl vector.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x, int n, int m)\n------------------------------------------------------------------------\n\nCreate a non-vector expression from an stl vector.\n\n") ,
        Method (Name "SXMatrix''''''''''''") valSXMatrix [constrefSXVec,valCInt,valCInt] Constructor (Doc "\n\n>  CasADi::Matrix< T >::Matrix()\n------------------------------------------------------------------------\n\nconstructors\n\nempty 0-by-0 matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< T > &m)\n------------------------------------------------------------------------\n\nCopy constructor.\n\n>  CasADi::Matrix< T >::Matrix(int n, int m)\n------------------------------------------------------------------------\n\nempty n-by-m matrix constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const T &val)\n------------------------------------------------------------------------\n\ndense n-by-m matrix filled with val constructor\n\n>  CasADi::Matrix< T >::Matrix(int n, int m, const std::vector< int > &col, const std::vector< int > &rowind, const std::vector< T > &d=std::vector< T >())\n------------------------------------------------------------------------\n\nsparse n-by-m matrix filled with given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< std::vector< T > > &m)\n------------------------------------------------------------------------\n\ndense matrix constructor with data given as vector of vectors\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const T &val=0)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity\n\n>  CasADi::Matrix< T >::Matrix(const CRSSparsity &sparsity, const std::vector< T > &d)\n------------------------------------------------------------------------\n\nsparse matrix with a given sparsity and non-zero elements.\n\n>  CasADi::Matrix< T >::Matrix(double val)\n------------------------------------------------------------------------\n\nThis constructor enables implicit type conversion from a numeric type.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x)\n------------------------------------------------------------------------\n\nConstruct from a vector.\n\nThanks to implicit conversion, you can pretend that Matrix(const SX& x);\nexists. Note: above remark applies only to C++, not python or octave\ninterfaces\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< T > &x, int n, int m)\n------------------------------------------------------------------------\n\nConstruct dense matrix from a vector with the elements in column major\nordering.\n\n>  CasADi::Matrix< T >::Matrix(const Matrix< A > &x)\n------------------------------------------------------------------------\n\nCreate a matrix from a matrix with a different type of matrix entries\n(assuming that the scalar conversion is valid)\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x)\n------------------------------------------------------------------------\n\nCreate an expression from an stl vector.\n\n>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x, int n, int m)\n------------------------------------------------------------------------\n\nCreate a non-vector expression from an stl vector.\n\n") 
      ]
    docs = Doc "\n\nGeneral sparse matrix class General sparse matrix class that is designed\nwith the idea that \"everything is a matrix\", that is, also scalars and\nvectors.  This philosophy makes it easy to use and to interface in\nparticularily with Python and Matlab/Octave. .\n\nThe syntax tries to stay as close as possible to the ublas syntax when it\ncomes to vector/matrix operations.\n\nIndex starts with 0.  Index flatten happens as follows: (i,j) -> k =\nj+i*size2()  Vectors are considered to be column vectors.\n\nThe storage format is a (modified) compressed row storage (CRS) format. This\nway, a vector element can always be accessed in constant time.\n\nMatrix<T> is polymorphic with a std::vector<T> that contain all non-\nidentical-zero elements.  The sparsity can be accessed with CRSSparsity&\nsparsity()\n\nJoel Andersson\n\nC++ includes: matrix.hpp "


ipoptsolver :: Class
ipoptsolver = Class IpoptSolver methods docs
  where
    methods =
      [
        Method (Name "getReducedHessian") valDMatrix [] Normal (Doc "\n\nGet the reduced Hessian. Requires a patched sIPOPT installation, see CasADi\ndocumentation.\n\n") ,
        Method (Name "checkNode") valCBool [] Normal (Doc "\n\nCheck if the node is pointing to the right type of object.\n\n") ,
        Method (Name "IpoptSolver") valIpoptSolver [] Constructor (Doc "\n\n>  CasADi::IpoptSolver::IpoptSolver()\n------------------------------------------------------------------------\n\nDefault constructor.\n\n>  CasADi::IpoptSolver::IpoptSolver(const FX &F, const FX &G)\n------------------------------------------------------------------------\n\nCreate an NLP solver instance (legacy syntax)\n\n>  CasADi::IpoptSolver::IpoptSolver(const FX &nlp)\n------------------------------------------------------------------------\n\nCreate an NLP solver instance.\n\n") ,
        Method (Name "IpoptSolver'") valIpoptSolver [constrefFX,constrefFX] Constructor (Doc "\n\n>  CasADi::IpoptSolver::IpoptSolver()\n------------------------------------------------------------------------\n\nDefault constructor.\n\n>  CasADi::IpoptSolver::IpoptSolver(const FX &F, const FX &G)\n------------------------------------------------------------------------\n\nCreate an NLP solver instance (legacy syntax)\n\n>  CasADi::IpoptSolver::IpoptSolver(const FX &nlp)\n------------------------------------------------------------------------\n\nCreate an NLP solver instance.\n\n") ,
        Method (Name "IpoptSolver''") valIpoptSolver [constrefFX] Constructor (Doc "\n\n>  CasADi::IpoptSolver::IpoptSolver()\n------------------------------------------------------------------------\n\nDefault constructor.\n\n>  CasADi::IpoptSolver::IpoptSolver(const FX &F, const FX &G)\n------------------------------------------------------------------------\n\nCreate an NLP solver instance (legacy syntax)\n\n>  CasADi::IpoptSolver::IpoptSolver(const FX &nlp)\n------------------------------------------------------------------------\n\nCreate an NLP solver instance.\n\n") 
      ]
    docs = Doc "\n\ninterface to IPOPT NLP solver\n\nSolves the following parametric nonlinear program (NLP):min          F(x,p)\nx  subject to             LBX <=   x    <= UBX LBG <= G(x,p) <= UBG\np  == P nx: number of decision variables     ng: number of constraints\nnp: number of parameters\n\nWhen in warmstart mode, output NLP_SOLVER_LAM_X may be used as input\n\nNOTE: Even when max_iter == 0, it is not guaranteed that\ninput(NLP_SOLVER_X0) == output(NLP_SOLVER_X). Indeed if bounds on X or\nconstraints are unmet, they will differ.\n\nFor a good tutorial on IPOPT,\nseehttp://drops.dagstuhl.de/volltexte/2009/2089/pdf/09061.WaechterAndreas.Paper.2089.pdf\n\nA good resource about the algorithms in IPOPT is: Wachter and L. T. Biegler,\nOn the Implementation of an Interior-Point Filter Line-Search Algorithm for\nLarge-Scale Nonlinear Programming, Mathematical Programming 106(1), pp.\n25-57, 2006 (As Research Report RC 23149, IBM T. J. Watson Research Center,\nYorktown, USA\n\nCaveats: with default options, multipliers for the decision variables are\nwrong for equality constraints. Change the 'fixed_variable_treatment' to\n'make_constraint' or 'relax_bounds' to obtain correct results.\n\n>Input scheme: CasADi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]\n+------------------------+------------------------+------------------------+\n|       Full name        |         Short          |      Description       |\n+========================+========================+========================+\n| NLP_SOLVER_X0          | x0                     | Decision variables,    |\n|                        |                        | initial guess (nx x 1) |\n|                        |                        | .                      |\n+------------------------+------------------------+------------------------+\n| NLP_SOLVER_P           | p                      | Value of fixed         |\n|                        |                        | parameters (np x 1) .  |\n+------------------------+------------------------+------------------------+\n| NLP_SOLVER_LBX         | lbx                    | Decision variables     |\n|                        |                        | lower bound (nx x 1),  |\n|                        |                        | default -inf .         |\n+------------------------+------------------------+------------------------+\n| NLP_SOLVER_UBX         | ubx                    | Decision variables     |\n|                        |                        | upper bound (nx x 1),  |\n|                        |                        | default +inf .         |\n+------------------------+------------------------+------------------------+\n| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |\n|                        |                        | bound (ng x 1),        |\n|                        |                        | default -inf .         |\n+------------------------+------------------------+------------------------+\n| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |\n|                        |                        | bound (ng x 1),        |\n|                        |                        | default +inf .         |\n+------------------------+------------------------+------------------------+\n| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |\n|                        |                        | for bounds on X,       |\n|                        |                        | initial guess (nx x 1) |\n|                        |                        | .                      |\n+------------------------+------------------------+------------------------+\n| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |\n|                        |                        | for bounds on G,       |\n|                        |                        | initial guess (ng x 1) |\n|                        |                        | .                      |\n+------------------------+------------------------+------------------------+\n\n>Output scheme: CasADi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]\n+------------------------+------------------------+------------------------+\n|       Full name        |         Short          |      Description       |\n+========================+========================+========================+\n| NLP_SOLVER_X           | x                      | Decision variables at  |\n|                        |                        | the optimal solution   |\n|                        |                        | (nx x 1) .             |\n+------------------------+------------------------+------------------------+\n| NLP_SOLVER_F           | f                      | Cost function value at |\n|                        |                        | the optimal solution   |\n|                        |                        | (1 x 1) .              |\n+------------------------+------------------------+------------------------+\n| NLP_SOLVER_G           | g                      | Constraints function   |\n|                        |                        | at the optimal         |\n|                        |                        | solution (ng x 1) .    |\n+------------------------+------------------------+------------------------+\n| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |\n|                        |                        | for bounds on X at the |\n|                        |                        | solution (nx x 1) .    |\n+------------------------+------------------------+------------------------+\n| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |\n|                        |                        | for bounds on G at the |\n|                        |                        | solution (ng x 1) .    |\n+------------------------+------------------------+------------------------+\n| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |\n|                        |                        | for bounds on P at the |\n|                        |                        | solution (np x 1) .    |\n+------------------------+------------------------+------------------------+\n\n>List of available options\n+--------------+--------------+--------------+--------------+--------------+\n|      Id      |     Type     |   Default    | Description  |   Used in    |\n+==============+==============+==============+==============+==============+\n| accept_after | OT_INTEGER   | -1           | Accept a     | CasADi::Ipop |\n| _max_steps   |              |              | trial point  | tInternal    |\n|              |              |              | after        |              |\n|              |              |              | maximal this |              |\n|              |              |              | number of    |              |\n|              |              |              | steps. (see  |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| accept_every | OT_STRING    | no           | Always       | CasADi::Ipop |\n| _trial_step  |              |              | accept the   | tInternal    |\n|              |              |              | first trial  |              |\n|              |              |              | step. (see   |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| acceptable_c | OT_REAL      | 0.010        | \"Acceptance\" | CasADi::Ipop |\n| ompl_inf_tol |              |              | threshold    | tInternal    |\n|              |              |              | for the comp |              |\n|              |              |              | lementarity  |              |\n|              |              |              | conditions.  |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| acceptable_c | OT_REAL      | 0.010        | \"Acceptance\" | CasADi::Ipop |\n| onstr_viol_t |              |              | threshold    | tInternal    |\n| ol           |              |              | for the      |              |\n|              |              |              | constraint   |              |\n|              |              |              | violation.   |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| acceptable_d | OT_REAL      | 1.000e+10    | \"Acceptance\" | CasADi::Ipop |\n| ual_inf_tol  |              |              | threshold    | tInternal    |\n|              |              |              | for the dual |              |\n|              |              |              | infeasibilit |              |\n|              |              |              | y. (see      |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| acceptable_i | OT_INTEGER   | 15           | Number of    | CasADi::Ipop |\n| ter          |              |              | \"acceptable\" | tInternal    |\n|              |              |              | iterates     |              |\n|              |              |              | before       |              |\n|              |              |              | triggering   |              |\n|              |              |              | termination. |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| acceptable_o | OT_REAL      | 1.000e+20    | \"Acceptance\" | CasADi::Ipop |\n| bj_change_to |              |              | stopping     | tInternal    |\n| l            |              |              | criterion    |              |\n|              |              |              | based on     |              |\n|              |              |              | objective    |              |\n|              |              |              | function     |              |\n|              |              |              | change. (see |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| acceptable_t | OT_REAL      | 0.000        | \"Acceptable\" | CasADi::Ipop |\n| ol           |              |              | convergence  | tInternal    |\n|              |              |              | tolerance    |              |\n|              |              |              | (relative).  |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::FXIn |\n|              |              |              | calculate    | ternal       |\n|              |              |              | the          |              |\n|              |              |              | Jacobians.   |              |\n|              |              |              | (forward:    |              |\n|              |              |              | only forward |              |\n|              |              |              | mode|reverse |              |\n|              |              |              | : only       |              |\n|              |              |              | adjoint mode |              |\n|              |              |              | |automatic:  |              |\n|              |              |              | a heuristic  |              |\n|              |              |              | decides      |              |\n|              |              |              | which is     |              |\n|              |              |              | more         |              |\n|              |              |              | appropriate) |              |\n+--------------+--------------+--------------+--------------+--------------+\n| adaptive_mu_ | OT_STRING    | obj-constr-  | Globalizatio | CasADi::Ipop |\n| globalizatio |              | filter       | n strategy   | tInternal    |\n| n            |              |              | for the      |              |\n|              |              |              | adaptive mu  |              |\n|              |              |              | selection    |              |\n|              |              |              | mode. (see   |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| adaptive_mu_ | OT_STRING    | 2-norm-      | Norm used    | CasADi::Ipop |\n| kkt_norm_typ |              | squared      | for the KKT  | tInternal    |\n| e            |              |              | error in the |              |\n|              |              |              | adaptive mu  |              |\n|              |              |              | globalizatio |              |\n|              |              |              | n            |              |\n|              |              |              | strategies.  |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| adaptive_mu_ | OT_REAL      | 1.000        | Sufficient   | CasADi::Ipop |\n| kkterror_red |              |              | decrease     | tInternal    |\n| _fact        |              |              | factor for   |              |\n|              |              |              | \"kkt-error\"  |              |\n|              |              |              | globalizatio |              |\n|              |              |              | n strategy.  |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| adaptive_mu_ | OT_INTEGER   | 4            | Maximum      | CasADi::Ipop |\n| kkterror_red |              |              | number of    | tInternal    |\n| _iters       |              |              | iterations   |              |\n|              |              |              | requiring    |              |\n|              |              |              | sufficient   |              |\n|              |              |              | progress.    |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| adaptive_mu_ | OT_REAL      | 0.800        | Determines   | CasADi::Ipop |\n| monotone_ini |              |              | the initial  | tInternal    |\n| t_factor     |              |              | value of the |              |\n|              |              |              | barrier      |              |\n|              |              |              | parameter    |              |\n|              |              |              | when         |              |\n|              |              |              | switching to |              |\n|              |              |              | the monotone |              |\n|              |              |              | mode. (see   |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| adaptive_mu_ | OT_STRING    | no           | Indicates if | CasADi::Ipop |\n| restore_prev |              |              | the previous | tInternal    |\n| ious_iterate |              |              | iterate      |              |\n|              |              |              | should be    |              |\n|              |              |              | restored if  |              |\n|              |              |              | the monotone |              |\n|              |              |              | mode is      |              |\n|              |              |              | entered.     |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| adaptive_mu_ | OT_REAL      | 0            | (see IPOPT d | CasADi::Ipop |\n| safeguard_fa |              |              | ocumentation | tInternal    |\n| ctor         |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| alpha_for_y  | OT_STRING    | primal       | Method to    | CasADi::Ipop |\n|              |              |              | determine    | tInternal    |\n|              |              |              | the step     |              |\n|              |              |              | size for     |              |\n|              |              |              | constraint   |              |\n|              |              |              | multipliers. |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| alpha_for_y_ | OT_REAL      | 10           | Tolerance    | CasADi::Ipop |\n| tol          |              |              | for          | tInternal    |\n|              |              |              | switching to |              |\n|              |              |              | full         |              |\n|              |              |              | equality     |              |\n|              |              |              | multiplier   |              |\n|              |              |              | steps. (see  |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| alpha_min_fr | OT_REAL      | 0.050        | Safety       | CasADi::Ipop |\n| ac           |              |              | factor for   | tInternal    |\n|              |              |              | the minimal  |              |\n|              |              |              | step size    |              |\n|              |              |              | (before      |              |\n|              |              |              | switching to |              |\n|              |              |              | restoration  |              |\n|              |              |              | phase). (see |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| alpha_red_fa | OT_REAL      | 0.500        | Fractional   | CasADi::Ipop |\n| ctor         |              |              | reduction of | tInternal    |\n|              |              |              | the trial    |              |\n|              |              |              | step size in |              |\n|              |              |              | the          |              |\n|              |              |              | backtracking |              |\n|              |              |              | line search. |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| barrier_tol_ | OT_REAL      | 10           | Factor for   | CasADi::Ipop |\n| factor       |              |              | mu in        | tInternal    |\n|              |              |              | barrier stop |              |\n|              |              |              | test. (see   |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| bound_frac   | OT_REAL      | 0.010        | Desired      | CasADi::Ipop |\n|              |              |              | minimum      | tInternal    |\n|              |              |              | relative     |              |\n|              |              |              | distance     |              |\n|              |              |              | from the     |              |\n|              |              |              | initial      |              |\n|              |              |              | point to     |              |\n|              |              |              | bound. (see  |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| bound_mult_i | OT_STRING    | constant     | Initializati | CasADi::Ipop |\n| nit_method   |              |              | on method    | tInternal    |\n|              |              |              | for bound    |              |\n|              |              |              | multipliers  |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| bound_mult_i | OT_REAL      | 1            | Initial      | CasADi::Ipop |\n| nit_val      |              |              | value for    | tInternal    |\n|              |              |              | the bound    |              |\n|              |              |              | multipliers. |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| bound_mult_r | OT_REAL      | 1000         | Threshold    | CasADi::Ipop |\n| eset_thresho |              |              | for          | tInternal    |\n| ld           |              |              | resetting    |              |\n|              |              |              | bound        |              |\n|              |              |              | multipliers  |              |\n|              |              |              | after the    |              |\n|              |              |              | restoration  |              |\n|              |              |              | phase. (see  |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| bound_push   | OT_REAL      | 0.010        | Desired      | CasADi::Ipop |\n|              |              |              | minimum      | tInternal    |\n|              |              |              | absolute     |              |\n|              |              |              | distance     |              |\n|              |              |              | from the     |              |\n|              |              |              | initial      |              |\n|              |              |              | point to     |              |\n|              |              |              | bound. (see  |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| bound_relax_ | OT_REAL      | 0.000        | Factor for   | CasADi::Ipop |\n| factor       |              |              | initial      | tInternal    |\n|              |              |              | relaxation   |              |\n|              |              |              | of the       |              |\n|              |              |              | bounds. (see |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| check_deriva | OT_STRING    | no           | Indicates    | CasADi::Ipop |\n| tives_for_na |              |              | whether it   | tInternal    |\n| ninf         |              |              | is desired   |              |\n|              |              |              | to check for |              |\n|              |              |              | Nan/Inf in   |              |\n|              |              |              | derivative   |              |\n|              |              |              | matrices     |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| chi_cup      | OT_REAL      | 1.500        | LIFENG       | CasADi::Ipop |\n|              |              |              | WRITES THIS. | tInternal    |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| chi_hat      | OT_REAL      | 2            | LIFENG       | CasADi::Ipop |\n|              |              |              | WRITES THIS. | tInternal    |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| chi_tilde    | OT_REAL      | 5            | LIFENG       | CasADi::Ipop |\n|              |              |              | WRITES THIS. | tInternal    |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| compl_inf_to | OT_REAL      | 0.000        | Desired      | CasADi::Ipop |\n| l            |              |              | threshold    | tInternal    |\n|              |              |              | for the comp |              |\n|              |              |              | lementarity  |              |\n|              |              |              | conditions.  |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| con_integer_ | OT_DICTIONAR | None         | Integer      | CasADi::Ipop |\n| md           | Y            |              | metadata (a  | tInternal    |\n|              |              |              | dictionary   |              |\n|              |              |              | with lists   |              |\n|              |              |              | of integers) |              |\n|              |              |              | about        |              |\n|              |              |              | constraints  |              |\n|              |              |              | to be passed |              |\n|              |              |              | to IPOPT     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| con_numeric_ | OT_DICTIONAR | None         | Numeric      | CasADi::Ipop |\n| md           | Y            |              | metadata (a  | tInternal    |\n|              |              |              | dictionary   |              |\n|              |              |              | with lists   |              |\n|              |              |              | of reals)    |              |\n|              |              |              | about        |              |\n|              |              |              | constraints  |              |\n|              |              |              | to be passed |              |\n|              |              |              | to IPOPT     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| con_string_m | OT_DICTIONAR | None         | String       | CasADi::Ipop |\n| d            | Y            |              | metadata (a  | tInternal    |\n|              |              |              | dictionary   |              |\n|              |              |              | with lists   |              |\n|              |              |              | of strings)  |              |\n|              |              |              | about        |              |\n|              |              |              | constraints  |              |\n|              |              |              | to be passed |              |\n|              |              |              | to IPOPT     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| constr_mult_ | OT_REAL      | 1000         | Maximum      | CasADi::Ipop |\n| init_max     |              |              | allowed      | tInternal    |\n|              |              |              | least-square |              |\n|              |              |              | guess of     |              |\n|              |              |              | constraint   |              |\n|              |              |              | multipliers. |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| constr_mult_ | OT_REAL      | 0            | Threshold    | CasADi::Ipop |\n| reset_thresh |              |              | for          | tInternal    |\n| old          |              |              | resetting    |              |\n|              |              |              | equality and |              |\n|              |              |              | inequality   |              |\n|              |              |              | multipliers  |              |\n|              |              |              | after        |              |\n|              |              |              | restoration  |              |\n|              |              |              | phase. (see  |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| constr_viol_ | OT_REAL      | 0.000        | Desired      | CasADi::Ipop |\n| tol          |              |              | threshold    | tInternal    |\n|              |              |              | for the      |              |\n|              |              |              | constraint   |              |\n|              |              |              | violation.   |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| constraint_v | OT_STRING    | 1-norm       | Norm to be   | CasADi::Ipop |\n| iolation_nor |              |              | used for the | tInternal    |\n| m_type       |              |              | constraint   |              |\n|              |              |              | violation in |              |\n|              |              |              | the line     |              |\n|              |              |              | search. (see |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| corrector_co | OT_REAL      | 1            | Complementar | CasADi::Ipop |\n| mpl_avrg_red |              |              | ity          | tInternal    |\n| _fact        |              |              | tolerance    |              |\n|              |              |              | factor for   |              |\n|              |              |              | accepting    |              |\n|              |              |              | corrector    |              |\n|              |              |              | step (unsupp |              |\n|              |              |              | orted!).     |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| corrector_ty | OT_STRING    | none         | The type of  | CasADi::Ipop |\n| pe           |              |              | corrector    | tInternal    |\n|              |              |              | steps that   |              |\n|              |              |              | should be    |              |\n|              |              |              | taken (unsup |              |\n|              |              |              | ported!).    |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| delta        | OT_REAL      | 1            | Multiplier   | CasADi::Ipop |\n|              |              |              | for          | tInternal    |\n|              |              |              | constraint   |              |\n|              |              |              | violation in |              |\n|              |              |              | the          |              |\n|              |              |              | switching    |              |\n|              |              |              | rule. (see   |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| delta_y_max  | OT_REAL      | 1.000e+12    | a parameter  | CasADi::Ipop |\n|              |              |              | used to      | tInternal    |\n|              |              |              | check if the |              |\n|              |              |              | fast         |              |\n|              |              |              | direction    |              |\n|              |              |              | can be used  |              |\n|              |              |              | asthe line   |              |\n|              |              |              | search       |              |\n|              |              |              | direction    |              |\n|              |              |              | (for Chen-   |              |\n|              |              |              | Goldfarb     |              |\n|              |              |              | line         |              |\n|              |              |              | search).     |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| dependency_d | OT_STRING    | no           | Indicates if | CasADi::Ipop |\n| etection_wit |              |              | the right    | tInternal    |\n| h_rhs        |              |              | hand sides   |              |\n|              |              |              | of the       |              |\n|              |              |              | constraints  |              |\n|              |              |              | should be    |              |\n|              |              |              | considered   |              |\n|              |              |              | during       |              |\n|              |              |              | dependency   |              |\n|              |              |              | detection    |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| dependency_d | OT_STRING    | none         | Indicates    | CasADi::Ipop |\n| etector      |              |              | which linear | tInternal    |\n|              |              |              | solver       |              |\n|              |              |              | should be    |              |\n|              |              |              | used to      |              |\n|              |              |              | detect       |              |\n|              |              |              | linearly     |              |\n|              |              |              | dependent    |              |\n|              |              |              | equality     |              |\n|              |              |              | constraints. |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| derivative_t | OT_STRING    | none         | Enable       | CasADi::Ipop |\n| est          |              |              | derivative   | tInternal    |\n|              |              |              | checker (see |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| derivative_t | OT_INTEGER   | -2           | Index of     | CasADi::Ipop |\n| est_first_in |              |              | first        | tInternal    |\n| dex          |              |              | quantity to  |              |\n|              |              |              | be checked   |              |\n|              |              |              | by           |              |\n|              |              |              | derivative   |              |\n|              |              |              | checker (see |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| derivative_t | OT_REAL      | 0.000        | Size of the  | CasADi::Ipop |\n| est_perturba |              |              | finite       | tInternal    |\n| tion         |              |              | difference   |              |\n|              |              |              | perturbation |              |\n|              |              |              | in           |              |\n|              |              |              | derivative   |              |\n|              |              |              | test. (see   |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| derivative_t | OT_STRING    | no           | Indicates    | CasADi::Ipop |\n| est_print_al |              |              | whether      | tInternal    |\n| l            |              |              | information  |              |\n|              |              |              | for all      |              |\n|              |              |              | estimated    |              |\n|              |              |              | derivatives  |              |\n|              |              |              | should be    |              |\n|              |              |              | printed.     |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| derivative_t | OT_REAL      | 0.000        | Threshold    | CasADi::Ipop |\n| est_tol      |              |              | for          | tInternal    |\n|              |              |              | indicating   |              |\n|              |              |              | wrong        |              |\n|              |              |              | derivative.  |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| diverging_it | OT_REAL      | 1.000e+20    | Threshold    | CasADi::Ipop |\n| erates_tol   |              |              | for maximal  | tInternal    |\n|              |              |              | value of     |              |\n|              |              |              | primal       |              |\n|              |              |              | iterates.    |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| dual_inf_tol | OT_REAL      | 1            | Desired      | CasADi::Ipop |\n|              |              |              | threshold    | tInternal    |\n|              |              |              | for the dual |              |\n|              |              |              | infeasibilit |              |\n|              |              |              | y. (see      |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| epsilon_c    | OT_REAL      | 0.010        | LIFENG       | CasADi::Ipop |\n|              |              |              | WRITES THIS. | tInternal    |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| eta_min      | OT_REAL      | 10           | LIFENG       | CasADi::Ipop |\n|              |              |              | WRITES THIS. | tInternal    |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| eta_penalty  | OT_REAL      | 0.000        | Relaxation   | CasADi::Ipop |\n|              |              |              | factor in    | tInternal    |\n|              |              |              | the Armijo   |              |\n|              |              |              | condition    |              |\n|              |              |              | for the      |              |\n|              |              |              | penalty      |              |\n|              |              |              | function.    |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| eta_phi      | OT_REAL      | 0.000        | Relaxation   | CasADi::Ipop |\n|              |              |              | factor in    | tInternal    |\n|              |              |              | the Armijo   |              |\n|              |              |              | condition.   |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| evaluate_ori | OT_STRING    | yes          | Determines   | CasADi::Ipop |\n| g_obj_at_res |              |              | if the       | tInternal    |\n| to_trial     |              |              | original     |              |\n|              |              |              | objective    |              |\n|              |              |              | function     |              |\n|              |              |              | should be    |              |\n|              |              |              | evaluated at |              |\n|              |              |              | restoration  |              |\n|              |              |              | phase trial  |              |\n|              |              |              | points. (see |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| expand       | OT_BOOLEAN   | false        | Expand the   | CasADi::NLPS |\n|              |              |              | NLP function | olverInterna |\n|              |              |              | in terms of  | l            |\n|              |              |              | scalar       |              |\n|              |              |              | operations,  |              |\n|              |              |              | i.e. MX-> SX |              |\n+--------------+--------------+--------------+--------------+--------------+\n| expand_f     | OT_BOOLEAN   | GenericType( | Expand the   | CasADi::NLPS |\n|              |              | )            | objective    | olverInterna |\n|              |              |              | function in  | l            |\n|              |              |              | terms of     |              |\n|              |              |              | scalar       |              |\n|              |              |              | operations,  |              |\n|              |              |              | i.e. MX-> SX |              |\n|              |              |              | .            |              |\n|              |              |              | Deprecated,  |              |\n|              |              |              | use \"expand\" |              |\n|              |              |              | instead.     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| expand_g     | OT_BOOLEAN   | GenericType( | Expand the   | CasADi::NLPS |\n|              |              | )            | constraint   | olverInterna |\n|              |              |              | function in  | l            |\n|              |              |              | terms of     |              |\n|              |              |              | scalar       |              |\n|              |              |              | operations,  |              |\n|              |              |              | i.e. MX-> SX |              |\n|              |              |              | .            |              |\n|              |              |              | Deprecated,  |              |\n|              |              |              | use \"expand\" |              |\n|              |              |              | instead.     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| expect_infea | OT_STRING    | no           | Enable       | CasADi::Ipop |\n| sible_proble |              |              | heuristics   | tInternal    |\n| m            |              |              | to quickly   |              |\n|              |              |              | detect an    |              |\n|              |              |              | infeasible   |              |\n|              |              |              | problem.     |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| expect_infea | OT_REAL      | 0.001        | Threshold    | CasADi::Ipop |\n| sible_proble |              |              | for          | tInternal    |\n| m_ctol       |              |              | disabling \"e |              |\n|              |              |              | xpect_infeas |              |\n|              |              |              | ible_problem |              |\n|              |              |              | \" option.    |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| expect_infea | OT_REAL      | 100000000    | Multiplier   | CasADi::Ipop |\n| sible_proble |              |              | threshold    | tInternal    |\n| m_ytol       |              |              | for          |              |\n|              |              |              | activating \" |              |\n|              |              |              | expect_infea |              |\n|              |              |              | sible_proble |              |\n|              |              |              | m\" option.   |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| fast_des_fac | OT_REAL      | 0.100        | a parameter  | CasADi::Ipop |\n| t            |              |              | used to      | tInternal    |\n|              |              |              | check if the |              |\n|              |              |              | fast         |              |\n|              |              |              | direction    |              |\n|              |              |              | can be used  |              |\n|              |              |              | asthe line   |              |\n|              |              |              | search       |              |\n|              |              |              | direction    |              |\n|              |              |              | (for Chen-   |              |\n|              |              |              | Goldfarb     |              |\n|              |              |              | line         |              |\n|              |              |              | search).     |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| fast_step_co | OT_STRING    | no           | Indicates if | CasADi::Ipop |\n| mputation    |              |              | the linear   | tInternal    |\n|              |              |              | system       |              |\n|              |              |              | should be    |              |\n|              |              |              | solved       |              |\n|              |              |              | quickly.     |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| file_print_l | OT_INTEGER   | 5            | Verbosity    | CasADi::Ipop |\n| evel         |              |              | level for    | tInternal    |\n|              |              |              | output file. |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| filter_margi | OT_REAL      | 0.000        | Factor       | CasADi::Ipop |\n| n_fact       |              |              | determining  | tInternal    |\n|              |              |              | width of     |              |\n|              |              |              | margin for   |              |\n|              |              |              | obj-constr-  |              |\n|              |              |              | filter       |              |\n|              |              |              | adaptive glo |              |\n|              |              |              | balization   |              |\n|              |              |              | strategy.    |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| filter_max_m | OT_REAL      | 1            | Maximum      | CasADi::Ipop |\n| argin        |              |              | width of     | tInternal    |\n|              |              |              | margin in    |              |\n|              |              |              | obj-constr-  |              |\n|              |              |              | filter       |              |\n|              |              |              | adaptive glo |              |\n|              |              |              | balization   |              |\n|              |              |              | strategy.    |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| filter_reset | OT_INTEGER   | 5            | Number of    | CasADi::Ipop |\n| _trigger     |              |              | iterations   | tInternal    |\n|              |              |              | that trigger |              |\n|              |              |              | the filter   |              |\n|              |              |              | reset. (see  |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| findiff_pert | OT_REAL      | 0.000        | Size of the  | CasADi::Ipop |\n| urbation     |              |              | finite       | tInternal    |\n|              |              |              | difference   |              |\n|              |              |              | perturbation |              |\n|              |              |              | for          |              |\n|              |              |              | derivative a |              |\n|              |              |              | pproximation |              |\n|              |              |              | . (see IPOPT |              |\n|              |              |              | documentatio |              |\n|              |              |              | n)           |              |\n+--------------+--------------+--------------+--------------+--------------+\n| first_hessia | OT_REAL      | 0.000        | Size of      | CasADi::Ipop |\n| n_perturbati |              |              | first x-s    | tInternal    |\n| on           |              |              | perturbation |              |\n|              |              |              | tried. (see  |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| fixed_mu_ora | OT_STRING    | average_comp | Oracle for   | CasADi::Ipop |\n| cle          |              | l            | the barrier  | tInternal    |\n|              |              |              | parameter    |              |\n|              |              |              | when         |              |\n|              |              |              | switching to |              |\n|              |              |              | fixed mode.  |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| fixed_variab | OT_STRING    | make_paramet | Determines   | CasADi::Ipop |\n| le_treatment |              | er           | how fixed    | tInternal    |\n|              |              |              | variables    |              |\n|              |              |              | should be    |              |\n|              |              |              | handled.     |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| gamma_hat    | OT_REAL      | 0.040        | LIFENG       | CasADi::Ipop |\n|              |              |              | WRITES THIS. | tInternal    |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| gamma_phi    | OT_REAL      | 0.000        | Relaxation   | CasADi::Ipop |\n|              |              |              | factor in    | tInternal    |\n|              |              |              | the filter   |              |\n|              |              |              | margin for   |              |\n|              |              |              | the barrier  |              |\n|              |              |              | function.    |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| gamma_theta  | OT_REAL      | 0.000        | Relaxation   | CasADi::Ipop |\n|              |              |              | factor in    | tInternal    |\n|              |              |              | the filter   |              |\n|              |              |              | margin for   |              |\n|              |              |              | the          |              |\n|              |              |              | constraint   |              |\n|              |              |              | violation.   |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| gamma_tilde  | OT_REAL      | 4            | LIFENG       | CasADi::Ipop |\n|              |              |              | WRITES THIS. | tInternal    |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::FXIn |\n|              |              |              | indicate     | ternal       |\n|              |              |              | wether       |              |\n|              |              |              | statistics   |              |\n|              |              |              | must be      |              |\n|              |              |              | gathered     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| gauss_newton | OT_BOOLEAN   | GenericType( | Deprecated   | CasADi::NLPS |\n|              |              | )            | option. Use  | olverInterna |\n|              |              |              | Gauss Newton | l            |\n|              |              |              | Hessian appr |              |\n|              |              |              | oximation    |              |\n+--------------+--------------+--------------+--------------+--------------+\n| generate_gra | OT_BOOLEAN   | GenericType( | Deprecated   | CasADi::NLPS |\n| dient        |              | )            | option.      | olverInterna |\n|              |              |              | Generate a   | l            |\n|              |              |              | function for |              |\n|              |              |              | calculating  |              |\n|              |              |              | the gradient |              |\n|              |              |              | of the       |              |\n|              |              |              | objective.   |              |\n+--------------+--------------+--------------+--------------+--------------+\n| generate_hes | OT_BOOLEAN   | GenericType( | Deprecated   | CasADi::NLPS |\n| sian         |              | )            | option.      | olverInterna |\n|              |              |              | Generate an  | l            |\n|              |              |              | exact        |              |\n|              |              |              | Hessian of   |              |\n|              |              |              | the          |              |\n|              |              |              | Lagrangian   |              |\n|              |              |              | if not       |              |\n|              |              |              | supplied.    |              |\n+--------------+--------------+--------------+--------------+--------------+\n| generate_jac | OT_BOOLEAN   | GenericType( | Deprecated   | CasADi::NLPS |\n| obian        |              | )            | option.      | olverInterna |\n|              |              |              | Generate an  | l            |\n|              |              |              | exact        |              |\n|              |              |              | Jacobian of  |              |\n|              |              |              | the          |              |\n|              |              |              | constraints  |              |\n|              |              |              | if not       |              |\n|              |              |              | supplied.    |              |\n+--------------+--------------+--------------+--------------+--------------+\n| grad_f       | OT_FX        | GenericType( | Function for | CasADi::NLPS |\n|              |              | )            | calculating  | olverInterna |\n|              |              |              | the gradient | l            |\n|              |              |              | of the       |              |\n|              |              |              | objective (a |              |\n|              |              |              | utogenerated |              |\n|              |              |              | by default)  |              |\n+--------------+--------------+--------------+--------------+--------------+\n| grad_lag     | OT_FX        | GenericType( | Function for | CasADi::NLPS |\n|              |              | )            | calculating  | olverInterna |\n|              |              |              | the gradient | l            |\n|              |              |              | of the       |              |\n|              |              |              | Lagrangian ( |              |\n|              |              |              | autogenerate |              |\n|              |              |              | d by         |              |\n|              |              |              | default)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| hess_lag     | OT_FX        | GenericType( | Function for | CasADi::NLPS |\n|              |              | )            | calculating  | olverInterna |\n|              |              |              | the Hessian  | l            |\n|              |              |              | of the       |              |\n|              |              |              | Lagrangian ( |              |\n|              |              |              | autogenerate |              |\n|              |              |              | d by         |              |\n|              |              |              | default)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| hessian_appr | OT_STRING    | exact        | Indicates    | CasADi::Ipop |\n| oximation    |              |              | what Hessian | tInternal    |\n|              |              |              | information  |              |\n|              |              |              | is to be     |              |\n|              |              |              | used. (see   |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| hessian_appr | OT_STRING    | nonlinear-   | Indicates in | CasADi::Ipop |\n| oximation_sp |              | variables    | which        | tInternal    |\n| ace          |              |              | subspace the |              |\n|              |              |              | Hessian      |              |\n|              |              |              | information  |              |\n|              |              |              | is to be app |              |\n|              |              |              | roximated.   |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| hessian_cons | OT_STRING    | no           | Indicates    | CasADi::Ipop |\n| tant         |              |              | whether the  | tInternal    |\n|              |              |              | problem is a |              |\n|              |              |              | quadratic    |              |\n|              |              |              | problem (see |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| honor_origin | OT_STRING    | yes          | Indicates    | CasADi::Ipop |\n| al_bounds    |              |              | whether      | tInternal    |\n|              |              |              | final points |              |\n|              |              |              | should be    |              |\n|              |              |              | projected    |              |\n|              |              |              | into         |              |\n|              |              |              | original     |              |\n|              |              |              | bounds. (see |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| ignore_check | OT_BOOLEAN   | false        | If set to    | CasADi::NLPS |\n| _vec         |              |              | true, the    | olverInterna |\n|              |              |              | input shape  | l            |\n|              |              |              | of F will    |              |\n|              |              |              | not be       |              |\n|              |              |              | checked.     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| inf_pr_outpu | OT_STRING    | original     | Determines   | CasADi::Ipop |\n| t            |              |              | what value   | tInternal    |\n|              |              |              | is printed   |              |\n|              |              |              | in the       |              |\n|              |              |              | \"inf_pr\"     |              |\n|              |              |              | output       |              |\n|              |              |              | column. (see |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::FXIn |\n|              |              |              | exceptions   | ternal       |\n|              |              |              | when the     |              |\n|              |              |              | numerical    |              |\n|              |              |              | values of    |              |\n|              |              |              | the inputs   |              |\n|              |              |              | don't make   |              |\n|              |              |              | sense        |              |\n+--------------+--------------+--------------+--------------+--------------+\n| iteration_ca | OT_CALLBACK  | GenericType( | A function   | CasADi::NLPS |\n| llback       |              | )            | that will be | olverInterna |\n|              |              |              | called at    | l            |\n|              |              |              | each         |              |\n|              |              |              | iteration    |              |\n|              |              |              | with the     |              |\n|              |              |              | solver as    |              |\n|              |              |              | input. Check |              |\n|              |              |              | documentatio |              |\n|              |              |              | n of         |              |\n|              |              |              | Callback .   |              |\n+--------------+--------------+--------------+--------------+--------------+\n| iteration_ca | OT_BOOLEAN   | false        | If set to    | CasADi::NLPS |\n| llback_ignor |              |              | true, errors | olverInterna |\n| e_errors     |              |              | thrown by it | l            |\n|              |              |              | eration_call |              |\n|              |              |              | back will be |              |\n|              |              |              | ignored.     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| iteration_ca | OT_INTEGER   | 1            | Only call    | CasADi::NLPS |\n| llback_step  |              |              | the callback | olverInterna |\n|              |              |              | function     | l            |\n|              |              |              | every few    |              |\n|              |              |              | iterations.  |              |\n+--------------+--------------+--------------+--------------+--------------+\n| jac_c_consta | OT_STRING    | no           | Indicates    | CasADi::Ipop |\n| nt           |              |              | whether all  | tInternal    |\n|              |              |              | equality     |              |\n|              |              |              | constraints  |              |\n|              |              |              | are linear   |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| jac_d_consta | OT_STRING    | no           | Indicates    | CasADi::Ipop |\n| nt           |              |              | whether all  | tInternal    |\n|              |              |              | inequality   |              |\n|              |              |              | constraints  |              |\n|              |              |              | are linear   |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| jac_g        | OT_FX        | GenericType( | Function for | CasADi::NLPS |\n|              |              | )            | calculating  | olverInterna |\n|              |              |              | the Jacobian | l            |\n|              |              |              | of the       |              |\n|              |              |              | constraints  |              |\n|              |              |              | (autogenerat |              |\n|              |              |              | ed by        |              |\n|              |              |              | default)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| jacobian_app | OT_STRING    | exact        | Specifies    | CasADi::Ipop |\n| roximation   |              |              | technique to | tInternal    |\n|              |              |              | compute      |              |\n|              |              |              | constraint   |              |\n|              |              |              | Jacobian     |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| jacobian_gen | OT_JACOBIANG | GenericType( | Function     | CasADi::FXIn |\n| erator       | ENERATOR     | )            | that returns | ternal       |\n|              |              |              | a Jacobian   |              |\n|              |              |              | function     |              |\n|              |              |              | given a set  |              |\n|              |              |              | of desired   |              |\n|              |              |              | Jacobian     |              |\n|              |              |              | blocks,      |              |\n|              |              |              | overrides    |              |\n|              |              |              | internal     |              |\n|              |              |              | routines.    |              |\n|              |              |              | Check docume |              |\n|              |              |              | ntation of J |              |\n|              |              |              | acobianGener |              |\n|              |              |              | ator .       |              |\n+--------------+--------------+--------------+--------------+--------------+\n| jacobian_reg | OT_REAL      | 0.250        | Exponent for | CasADi::Ipop |\n| ularization_ |              |              | mu in the re | tInternal    |\n| exponent     |              |              | gularization |              |\n|              |              |              | for rank-    |              |\n|              |              |              | deficient    |              |\n|              |              |              | constraint   |              |\n|              |              |              | Jacobians.   |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| jacobian_reg | OT_REAL      | 0.000        | Size of the  | CasADi::Ipop |\n| ularization_ |              |              | regularizati | tInternal    |\n| value        |              |              | on for rank- |              |\n|              |              |              | deficient    |              |\n|              |              |              | constraint   |              |\n|              |              |              | Jacobians.   |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| kappa_d      | OT_REAL      | 0.000        | Weight for   | CasADi::Ipop |\n|              |              |              | linear       | tInternal    |\n|              |              |              | damping term |              |\n|              |              |              | (to handle   |              |\n|              |              |              | one-sided    |              |\n|              |              |              | bounds).     |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| kappa_sigma  | OT_REAL      | 1.000e+10    | Factor       | CasADi::Ipop |\n|              |              |              | limiting the | tInternal    |\n|              |              |              | deviation of |              |\n|              |              |              | dual         |              |\n|              |              |              | variables    |              |\n|              |              |              | from primal  |              |\n|              |              |              | estimates.   |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| kappa_soc    | OT_REAL      | 0.990        | Factor in    | CasADi::Ipop |\n|              |              |              | the          | tInternal    |\n|              |              |              | sufficient   |              |\n|              |              |              | reduction    |              |\n|              |              |              | rule for     |              |\n|              |              |              | second order |              |\n|              |              |              | correction.  |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| kappa_x_dis  | OT_REAL      | 100          | a parameter  | CasADi::Ipop |\n|              |              |              | used to      | tInternal    |\n|              |              |              | check if the |              |\n|              |              |              | fast         |              |\n|              |              |              | direction    |              |\n|              |              |              | can be used  |              |\n|              |              |              | asthe line   |              |\n|              |              |              | search       |              |\n|              |              |              | direction    |              |\n|              |              |              | (for Chen-   |              |\n|              |              |              | Goldfarb     |              |\n|              |              |              | line         |              |\n|              |              |              | search).     |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| kappa_y_dis  | OT_REAL      | 10000        | a parameter  | CasADi::Ipop |\n|              |              |              | used to      | tInternal    |\n|              |              |              | check if the |              |\n|              |              |              | fast         |              |\n|              |              |              | direction    |              |\n|              |              |              | can be used  |              |\n|              |              |              | asthe line   |              |\n|              |              |              | search       |              |\n|              |              |              | direction    |              |\n|              |              |              | (for Chen-   |              |\n|              |              |              | Goldfarb     |              |\n|              |              |              | line         |              |\n|              |              |              | search).     |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| least_square | OT_STRING    | no           | Least square | CasADi::Ipop |\n| _init_duals  |              |              | initializati | tInternal    |\n|              |              |              | on of all    |              |\n|              |              |              | dual         |              |\n|              |              |              | variables    |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| least_square | OT_STRING    | no           | Least square | CasADi::Ipop |\n| _init_primal |              |              | initializati | tInternal    |\n|              |              |              | on of the    |              |\n|              |              |              | primal       |              |\n|              |              |              | variables    |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| limited_memo | OT_STRING    | sherman-     | Strategy for | CasADi::Ipop |\n| ry_aug_solve |              | morrison     | solving the  | tInternal    |\n| r            |              |              | augmented    |              |\n|              |              |              | system for   |              |\n|              |              |              | low-rank     |              |\n|              |              |              | Hessian.     |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| limited_memo | OT_REAL      | 1            | Value for B0 | CasADi::Ipop |\n| ry_init_val  |              |              | in low-rank  | tInternal    |\n|              |              |              | update. (see |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| limited_memo | OT_REAL      | 100000000    | Upper bound  | CasADi::Ipop |\n| ry_init_val_ |              |              | on value for | tInternal    |\n| max          |              |              | B0 in low-   |              |\n|              |              |              | rank update. |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| limited_memo | OT_REAL      | 0.000        | Lower bound  | CasADi::Ipop |\n| ry_init_val_ |              |              | on value for | tInternal    |\n| min          |              |              | B0 in low-   |              |\n|              |              |              | rank update. |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| limited_memo | OT_STRING    | scalar1      | Initializati | CasADi::Ipop |\n| ry_initializ |              |              | on strategy  | tInternal    |\n| ation        |              |              | for the      |              |\n|              |              |              | limited      |              |\n|              |              |              | memory       |              |\n|              |              |              | quasi-Newton |              |\n|              |              |              | approximatio |              |\n|              |              |              | n. (see      |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| limited_memo | OT_INTEGER   | 6            | Maximum size | CasADi::Ipop |\n| ry_max_histo |              |              | of the       | tInternal    |\n| ry           |              |              | history for  |              |\n|              |              |              | the limited  |              |\n|              |              |              | quasi-Newton |              |\n|              |              |              | Hessian appr |              |\n|              |              |              | oximation.   |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| limited_memo | OT_INTEGER   | 2            | Threshold    | CasADi::Ipop |\n| ry_max_skipp |              |              | for          | tInternal    |\n| ing          |              |              | successive   |              |\n|              |              |              | iterations   |              |\n|              |              |              | where update |              |\n|              |              |              | is skipped.  |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| limited_memo | OT_STRING    | no           | Determines   | CasADi::Ipop |\n| ry_special_f |              |              | if the       | tInternal    |\n| or_resto     |              |              | quasi-Newton |              |\n|              |              |              | updates      |              |\n|              |              |              | should be    |              |\n|              |              |              | special      |              |\n|              |              |              | during the   |              |\n|              |              |              | restoration  |              |\n|              |              |              | phase. (see  |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| limited_memo | OT_STRING    | bfgs         | Quasi-Newton | CasADi::Ipop |\n| ry_update_ty |              |              | update       | tInternal    |\n| pe           |              |              | formula for  |              |\n|              |              |              | the limited  |              |\n|              |              |              | memory appro |              |\n|              |              |              | ximation.    |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| line_search_ | OT_STRING    | filter       | Globalizatio | CasADi::Ipop |\n| method       |              |              | n method     | tInternal    |\n|              |              |              | used in      |              |\n|              |              |              | backtracking |              |\n|              |              |              | line search  |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| linear_scali | OT_STRING    | yes          | Flag         | CasADi::Ipop |\n| ng_on_demand |              |              | indicating   | tInternal    |\n|              |              |              | that linear  |              |\n|              |              |              | scaling is   |              |\n|              |              |              | only done if |              |\n|              |              |              | it seems     |              |\n|              |              |              | required.    |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| linear_solve | OT_STRING    | ma27         | Linear       | CasADi::Ipop |\n| r            |              |              | solver used  | tInternal    |\n|              |              |              | for step com |              |\n|              |              |              | putations.   |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| linear_syste | OT_STRING    | mc19         | Method for   | CasADi::Ipop |\n| m_scaling    |              |              | scaling the  | tInternal    |\n|              |              |              | linear       |              |\n|              |              |              | system. (see |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| ma27_ignore_ | OT_STRING    | no           | Enables      | CasADi::Ipop |\n| singularity  |              |              | MA27's       | tInternal    |\n|              |              |              | ability to   |              |\n|              |              |              | solve a      |              |\n|              |              |              | linear       |              |\n|              |              |              | system even  |              |\n|              |              |              | if the       |              |\n|              |              |              | matrix is    |              |\n|              |              |              | singular.    |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| ma27_la_init | OT_REAL      | 5            | Real         | CasADi::Ipop |\n| _factor      |              |              | workspace    | tInternal    |\n|              |              |              | memory for   |              |\n|              |              |              | MA27. (see   |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| ma27_liw_ini | OT_REAL      | 5            | Integer      | CasADi::Ipop |\n| t_factor     |              |              | workspace    | tInternal    |\n|              |              |              | memory for   |              |\n|              |              |              | MA27. (see   |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| ma27_meminc_ | OT_REAL      | 10           | Increment    | CasADi::Ipop |\n| factor       |              |              | factor for   | tInternal    |\n|              |              |              | workspace    |              |\n|              |              |              | size for     |              |\n|              |              |              | MA27. (see   |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| ma27_pivtol  | OT_REAL      | 0.000        | Pivot        | CasADi::Ipop |\n|              |              |              | tolerance    | tInternal    |\n|              |              |              | for the      |              |\n|              |              |              | linear       |              |\n|              |              |              | solver MA27. |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| ma27_pivtolm | OT_REAL      | 0.000        | Maximum      | CasADi::Ipop |\n| ax           |              |              | pivot        | tInternal    |\n|              |              |              | tolerance    |              |\n|              |              |              | for the      |              |\n|              |              |              | linear       |              |\n|              |              |              | solver MA27. |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| ma27_skip_in | OT_STRING    | no           | Always       | CasADi::Ipop |\n| ertia_check  |              |              | pretend      | tInternal    |\n|              |              |              | inertia is   |              |\n|              |              |              | correct.     |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| ma28_pivtol  | OT_REAL      | 0.010        | Pivot        | CasADi::Ipop |\n|              |              |              | tolerance    | tInternal    |\n|              |              |              | for linear   |              |\n|              |              |              | solver MA28. |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| ma57_automat | OT_STRING    | yes          | Controls     | CasADi::Ipop |\n| ic_scaling   |              |              | MA57         | tInternal    |\n|              |              |              | automatic    |              |\n|              |              |              | scaling (see |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| ma57_block_s | OT_INTEGER   | 16           | Controls     | CasADi::Ipop |\n| ize          |              |              | block size   | tInternal    |\n|              |              |              | used by      |              |\n|              |              |              | Level 3 BLAS |              |\n|              |              |              | in MA57BD    |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| ma57_node_am | OT_INTEGER   | 16           | Node         | CasADi::Ipop |\n| algamation   |              |              | amalgamation | tInternal    |\n|              |              |              | parameter    |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| ma57_pivot_o | OT_INTEGER   | 5            | Controls     | CasADi::Ipop |\n| rder         |              |              | pivot order  | tInternal    |\n|              |              |              | in MA57 (see |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| ma57_pivtol  | OT_REAL      | 0.000        | Pivot        | CasADi::Ipop |\n|              |              |              | tolerance    | tInternal    |\n|              |              |              | for the      |              |\n|              |              |              | linear       |              |\n|              |              |              | solver MA57. |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| ma57_pivtolm | OT_REAL      | 0.000        | Maximum      | CasADi::Ipop |\n| ax           |              |              | pivot        | tInternal    |\n|              |              |              | tolerance    |              |\n|              |              |              | for the      |              |\n|              |              |              | linear       |              |\n|              |              |              | solver MA57. |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| ma57_pre_all | OT_REAL      | 1.050        | Safety       | CasADi::Ipop |\n| oc           |              |              | factor for   | tInternal    |\n|              |              |              | work space   |              |\n|              |              |              | memory       |              |\n|              |              |              | allocation   |              |\n|              |              |              | for the      |              |\n|              |              |              | linear       |              |\n|              |              |              | solver MA57. |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| ma57_small_p | OT_INTEGER   | 0            | If set to 1, | CasADi::Ipop |\n| ivot_flag    |              |              | then when    | tInternal    |\n|              |              |              | small        |              |\n|              |              |              | entries      |              |\n|              |              |              | defined by   |              |\n|              |              |              | CNTL(2) are  |              |\n|              |              |              | detected     |              |\n|              |              |              | they are     |              |\n|              |              |              | removed and  |              |\n|              |              |              | the correspo |              |\n|              |              |              | nding pivots |              |\n|              |              |              | placed at    |              |\n|              |              |              | the end of   |              |\n|              |              |              | the factoriz |              |\n|              |              |              | ation. This  |              |\n|              |              |              | can be       |              |\n|              |              |              | particularly |              |\n|              |              |              | efficient if |              |\n|              |              |              | the matrix   |              |\n|              |              |              | is highly    |              |\n|              |              |              | rank         |              |\n|              |              |              | deficient.   |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| ma86_nemin   | OT_INTEGER   | 32           | Node         | CasADi::Ipop |\n|              |              |              | Amalgamation | tInternal    |\n|              |              |              | parameter    |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| ma86_print_l | OT_INTEGER   | 0            | Debug        | CasADi::Ipop |\n| evel         |              |              | printing     | tInternal    |\n|              |              |              | level for    |              |\n|              |              |              | the linear   |              |\n|              |              |              | solver MA86  |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| ma86_small   | OT_REAL      | 0.000        | Zero Pivot   | CasADi::Ipop |\n|              |              |              | Threshold    | tInternal    |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| ma86_static  | OT_REAL      | 0            | Static       | CasADi::Ipop |\n|              |              |              | Pivoting     | tInternal    |\n|              |              |              | Threshold    |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| ma86_u       | OT_REAL      | 0.000        | Pivoting     | CasADi::Ipop |\n|              |              |              | Threshold    | tInternal    |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| ma86_umax    | OT_REAL      | 0.000        | Maximum      | CasADi::Ipop |\n|              |              |              | Pivoting     | tInternal    |\n|              |              |              | Threshold    |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| magic_steps  | OT_STRING    | no           | Enables      | CasADi::Ipop |\n|              |              |              | magic steps. | tInternal    |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| max_cpu_time | OT_REAL      | 1000000      | Maximum      | CasADi::Ipop |\n|              |              |              | number of    | tInternal    |\n|              |              |              | CPU seconds. |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| max_filter_r | OT_INTEGER   | 5            | Maximal      | CasADi::Ipop |\n| esets        |              |              | allowed      | tInternal    |\n|              |              |              | number of    |              |\n|              |              |              | filter       |              |\n|              |              |              | resets (see  |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| max_hessian_ | OT_REAL      | 1.000e+20    | Maximum      | CasADi::Ipop |\n| perturbation |              |              | value of reg | tInternal    |\n|              |              |              | ularization  |              |\n|              |              |              | parameter    |              |\n|              |              |              | for handling |              |\n|              |              |              | negative     |              |\n|              |              |              | curvature.   |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| max_iter     | OT_INTEGER   | 3000         | Maximum      | CasADi::Ipop |\n|              |              |              | number of    | tInternal    |\n|              |              |              | iterations.  |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| max_number_o | OT_INTEGER   | optimized_nu | Allow \"numbe | CasADi::FXIn |\n| f_adj_dir    |              | m_dir        | r_of_adj_dir | ternal       |\n|              |              |              | \" to grow    |              |\n|              |              |              | until it     |              |\n|              |              |              | reaches this |              |\n|              |              |              | number       |              |\n+--------------+--------------+--------------+--------------+--------------+\n| max_number_o | OT_INTEGER   | optimized_nu | Allow \"numbe | CasADi::FXIn |\n| f_fwd_dir    |              | m_dir        | r_of_fwd_dir | ternal       |\n|              |              |              | \" to grow    |              |\n|              |              |              | until it     |              |\n|              |              |              | reaches this |              |\n|              |              |              | number       |              |\n+--------------+--------------+--------------+--------------+--------------+\n| max_refineme | OT_INTEGER   | 10           | Maximum      | CasADi::Ipop |\n| nt_steps     |              |              | number of    | tInternal    |\n|              |              |              | iterative    |              |\n|              |              |              | refinement   |              |\n|              |              |              | steps per    |              |\n|              |              |              | linear       |              |\n|              |              |              | system       |              |\n|              |              |              | solve. (see  |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| max_resto_it | OT_INTEGER   | 3000000      | Maximum      | CasADi::Ipop |\n| er           |              |              | number of    | tInternal    |\n|              |              |              | successive   |              |\n|              |              |              | iterations   |              |\n|              |              |              | in           |              |\n|              |              |              | restoration  |              |\n|              |              |              | phase. (see  |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| max_soc      | OT_INTEGER   | 4            | Maximum      | CasADi::Ipop |\n|              |              |              | number of    | tInternal    |\n|              |              |              | second order |              |\n|              |              |              | correction   |              |\n|              |              |              | trial steps  |              |\n|              |              |              | at each      |              |\n|              |              |              | iteration.   |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| max_soft_res | OT_INTEGER   | 10           | Maximum      | CasADi::Ipop |\n| to_iters     |              |              | number of    | tInternal    |\n|              |              |              | iterations   |              |\n|              |              |              | performed    |              |\n|              |              |              | successively |              |\n|              |              |              | in soft      |              |\n|              |              |              | restoration  |              |\n|              |              |              | phase. (see  |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| mehrotra_alg | OT_STRING    | no           | Indicates if | CasADi::Ipop |\n| orithm       |              |              | we want to   | tInternal    |\n|              |              |              | do           |              |\n|              |              |              | Mehrotra's   |              |\n|              |              |              | algorithm.   |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| min_alpha_pr | OT_REAL      | 0.000        | LIFENG       | CasADi::Ipop |\n| imal         |              |              | WRITES THIS. | tInternal    |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| min_hessian_ | OT_REAL      | 0.000        | Smallest     | CasADi::Ipop |\n| perturbation |              |              | perturbation | tInternal    |\n|              |              |              | of the       |              |\n|              |              |              | Hessian      |              |\n|              |              |              | block. (see  |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| min_refineme | OT_INTEGER   | 1            | Minimum      | CasADi::Ipop |\n| nt_steps     |              |              | number of    | tInternal    |\n|              |              |              | iterative    |              |\n|              |              |              | refinement   |              |\n|              |              |              | steps per    |              |\n|              |              |              | linear       |              |\n|              |              |              | system       |              |\n|              |              |              | solve. (see  |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::FXIn |\n|              | TOR          | )            | be activated | ternal   Cas |\n|              |              |              | (inputs|outp | ADi::IpoptIn |\n|              |              |              | uts)  (eval_ | ternal       |\n|              |              |              | f|eval_g|eva |              |\n|              |              |              | l_jac_g|eval |              |\n|              |              |              | _grad_f)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| mu_allow_fas | OT_STRING    | yes          | Allow        | CasADi::Ipop |\n| t_monotone_d |              |              | skipping of  | tInternal    |\n| ecrease      |              |              | barrier      |              |\n|              |              |              | problem if   |              |\n|              |              |              | barrier test |              |\n|              |              |              | is already   |              |\n|              |              |              | met. (see    |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| mu_init      | OT_REAL      | 0.100        | Initial      | CasADi::Ipop |\n|              |              |              | value for    | tInternal    |\n|              |              |              | the barrier  |              |\n|              |              |              | parameter.   |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| mu_linear_de | OT_REAL      | 0.200        | Determines   | CasADi::Ipop |\n| crease_facto |              |              | linear       | tInternal    |\n| r            |              |              | decrease     |              |\n|              |              |              | rate of      |              |\n|              |              |              | barrier      |              |\n|              |              |              | parameter.   |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| mu_max       | OT_REAL      | 100000       | Maximum      | CasADi::Ipop |\n|              |              |              | value for    | tInternal    |\n|              |              |              | barrier      |              |\n|              |              |              | parameter.   |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| mu_max_fact  | OT_REAL      | 1000         | Factor for i | CasADi::Ipop |\n|              |              |              | nitializatio | tInternal    |\n|              |              |              | n of maximum |              |\n|              |              |              | value for    |              |\n|              |              |              | barrier      |              |\n|              |              |              | parameter.   |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| mu_min       | OT_REAL      | 0.000        | Minimum      | CasADi::Ipop |\n|              |              |              | value for    | tInternal    |\n|              |              |              | barrier      |              |\n|              |              |              | parameter.   |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| mu_oracle    | OT_STRING    | quality-     | Oracle for a | CasADi::Ipop |\n|              |              | function     | new barrier  | tInternal    |\n|              |              |              | parameter in |              |\n|              |              |              | the adaptive |              |\n|              |              |              | strategy.    |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| mu_strategy  | OT_STRING    | monotone     | Update       | CasADi::Ipop |\n|              |              |              | strategy for | tInternal    |\n|              |              |              | barrier      |              |\n|              |              |              | parameter.   |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| mu_superline | OT_REAL      | 1.500        | Determines   | CasADi::Ipop |\n| ar_decrease_ |              |              | superlinear  | tInternal    |\n| power        |              |              | decrease     |              |\n|              |              |              | rate of      |              |\n|              |              |              | barrier      |              |\n|              |              |              | parameter.   |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| mu_target    | OT_REAL      | 0            | Desired      | CasADi::Ipop |\n|              |              |              | value of com | tInternal    |\n|              |              |              | plementarity |              |\n|              |              |              | . (see IPOPT |              |\n|              |              |              | documentatio |              |\n|              |              |              | n)           |              |\n+--------------+--------------+--------------+--------------+--------------+\n| mult_diverg_ | OT_REAL      | 0.000        | tolerance    | CasADi::Ipop |\n| feasibility_ |              |              | for deciding | tInternal    |\n| tol          |              |              | if the       |              |\n|              |              |              | multipliers  |              |\n|              |              |              | are          |              |\n|              |              |              | diverging    |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| mult_diverg_ | OT_REAL      | 100000000    | tolerance    | CasADi::Ipop |\n| y_tol        |              |              | for deciding | tInternal    |\n|              |              |              | if the       |              |\n|              |              |              | multipliers  |              |\n|              |              |              | are          |              |\n|              |              |              | diverging    |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| mumps_dep_to | OT_REAL      | -1           | Pivot        | CasADi::Ipop |\n| l            |              |              | threshold    | tInternal    |\n|              |              |              | for          |              |\n|              |              |              | detection of |              |\n|              |              |              | linearly     |              |\n|              |              |              | dependent    |              |\n|              |              |              | constraints  |              |\n|              |              |              | in MUMPS.    |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| mumps_mem_pe | OT_INTEGER   | 1000         | Percentage   | CasADi::Ipop |\n| rcent        |              |              | increase in  | tInternal    |\n|              |              |              | the          |              |\n|              |              |              | estimated    |              |\n|              |              |              | working      |              |\n|              |              |              | space for    |              |\n|              |              |              | MUMPS. (see  |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| mumps_permut | OT_INTEGER   | 7            | Controls     | CasADi::Ipop |\n| ing_scaling  |              |              | permuting    | tInternal    |\n|              |              |              | and scaling  |              |\n|              |              |              | in MUMPS     |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| mumps_pivot_ | OT_INTEGER   | 7            | Controls     | CasADi::Ipop |\n| order        |              |              | pivot order  | tInternal    |\n|              |              |              | in MUMPS     |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| mumps_pivtol | OT_REAL      | 0.000        | Pivot        | CasADi::Ipop |\n|              |              |              | tolerance    | tInternal    |\n|              |              |              | for the      |              |\n|              |              |              | linear       |              |\n|              |              |              | solver       |              |\n|              |              |              | MUMPS. (see  |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| mumps_pivtol | OT_REAL      | 0.100        | Maximum      | CasADi::Ipop |\n| max          |              |              | pivot        | tInternal    |\n|              |              |              | tolerance    |              |\n|              |              |              | for the      |              |\n|              |              |              | linear       |              |\n|              |              |              | solver       |              |\n|              |              |              | MUMPS. (see  |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| mumps_scalin | OT_INTEGER   | 77           | Controls     | CasADi::Ipop |\n| g            |              |              | scaling in   | tInternal    |\n|              |              |              | MUMPS (see   |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |\n|              |              | red_object\"  | object       | onsFunctiona |\n|              |              |              |              | lityNode     |\n+--------------+--------------+--------------+--------------+--------------+\n| neg_curv_tes | OT_REAL      | 0            | Tolerance    | CasADi::Ipop |\n| t_tol        |              |              | for          | tInternal    |\n|              |              |              | heuristic to |              |\n|              |              |              | ignore wrong |              |\n|              |              |              | inertia.     |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| never_use_fa | OT_STRING    | no           | Toggle to    | CasADi::Ipop |\n| ct_cgpen_dir |              |              | switch off   | tInternal    |\n| ection       |              |              | the fast     |              |\n|              |              |              | Chen-        |              |\n|              |              |              | Goldfarb     |              |\n|              |              |              | direction    |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| never_use_pi | OT_STRING    | no           | Toggle to    | CasADi::Ipop |\n| ecewise_pena |              |              | switch off   | tInternal    |\n| lty_ls       |              |              | the          |              |\n|              |              |              | piecewise    |              |\n|              |              |              | penalty      |              |\n|              |              |              | method (see  |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| nlp_lower_bo | OT_REAL      | -1.000e+19   | any bound    | CasADi::Ipop |\n| und_inf      |              |              | less or      | tInternal    |\n|              |              |              | equal this   |              |\n|              |              |              | value will   |              |\n|              |              |              | be           |              |\n|              |              |              | considered   |              |\n|              |              |              | -inf (i.e.   |              |\n|              |              |              | not lower    |              |\n|              |              |              | bounded).    |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| nlp_scaling_ | OT_REAL      | 0            | Target value | CasADi::Ipop |\n| constr_targe |              |              | for          | tInternal    |\n| t_gradient   |              |              | constraint   |              |\n|              |              |              | function     |              |\n|              |              |              | gradient     |              |\n|              |              |              | size. (see   |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| nlp_scaling_ | OT_REAL      | 100          | Maximum      | CasADi::Ipop |\n| max_gradient |              |              | gradient     | tInternal    |\n|              |              |              | after NLP    |              |\n|              |              |              | scaling.     |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| nlp_scaling_ | OT_STRING    | gradient-    | Select the   | CasADi::Ipop |\n| method       |              | based        | technique    | tInternal    |\n|              |              |              | used for     |              |\n|              |              |              | scaling the  |              |\n|              |              |              | NLP. (see    |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| nlp_scaling_ | OT_REAL      | 0.000        | Minimum      | CasADi::Ipop |\n| min_value    |              |              | value of     | tInternal    |\n|              |              |              | gradient-    |              |\n|              |              |              | based        |              |\n|              |              |              | scaling      |              |\n|              |              |              | values. (see |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| nlp_scaling_ | OT_REAL      | 0            | Target value | CasADi::Ipop |\n| obj_target_g |              |              | for          | tInternal    |\n| radient      |              |              | objective    |              |\n|              |              |              | function     |              |\n|              |              |              | gradient     |              |\n|              |              |              | size. (see   |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| nlp_upper_bo | OT_REAL      | 1.000e+19    | any bound    | CasADi::Ipop |\n| und_inf      |              |              | greater or   | tInternal    |\n|              |              |              | this value   |              |\n|              |              |              | will be      |              |\n|              |              |              | considered   |              |\n|              |              |              | +inf (i.e.   |              |\n|              |              |              | not upper    |              |\n|              |              |              | bounded).    |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| nu_inc       | OT_REAL      | 0.000        | Increment of | CasADi::Ipop |\n|              |              |              | the penalty  | tInternal    |\n|              |              |              | parameter.   |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| nu_init      | OT_REAL      | 0.000        | Initial      | CasADi::Ipop |\n|              |              |              | value of the | tInternal    |\n|              |              |              | penalty      |              |\n|              |              |              | parameter.   |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| num_linear_v | OT_INTEGER   | 0            | Number of    | CasADi::Ipop |\n| ariables     |              |              | linear       | tInternal    |\n|              |              |              | variables    |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| number_of_ad | OT_INTEGER   | 1            | number of    | CasADi::FXIn |\n| j_dir        |              |              | adjoint      | ternal       |\n|              |              |              | derivatives  |              |\n|              |              |              | to be        |              |\n|              |              |              | calculated s |              |\n|              |              |              | imultanously |              |\n+--------------+--------------+--------------+--------------+--------------+\n| number_of_fw | OT_INTEGER   | 1            | number of    | CasADi::FXIn |\n| d_dir        |              |              | forward      | ternal       |\n|              |              |              | derivatives  |              |\n|              |              |              | to be        |              |\n|              |              |              | calculated s |              |\n|              |              |              | imultanously |              |\n+--------------+--------------+--------------+--------------+--------------+\n| numeric_hess | OT_BOOLEAN   | false        | Calculate    | CasADi::FXIn |\n| ian          |              |              | Hessians     | ternal       |\n|              |              |              | numerically  |              |\n|              |              |              | (using       |              |\n|              |              |              | directional  |              |\n|              |              |              | derivatives) |              |\n|              |              |              | rather than  |              |\n|              |              |              | with the     |              |\n|              |              |              | built-in     |              |\n|              |              |              | method       |              |\n+--------------+--------------+--------------+--------------+--------------+\n| numeric_jaco | OT_BOOLEAN   | false        | Calculate    | CasADi::FXIn |\n| bian         |              |              | Jacobians    | ternal       |\n|              |              |              | numerically  |              |\n|              |              |              | (using       |              |\n|              |              |              | directional  |              |\n|              |              |              | derivatives) |              |\n|              |              |              | rather than  |              |\n|              |              |              | with the     |              |\n|              |              |              | built-in     |              |\n|              |              |              | method       |              |\n+--------------+--------------+--------------+--------------+--------------+\n| obj_max_inc  | OT_REAL      | 5            | Determines   | CasADi::Ipop |\n|              |              |              | the upper    | tInternal    |\n|              |              |              | bound on the |              |\n|              |              |              | acceptable   |              |\n|              |              |              | increase of  |              |\n|              |              |              | barrier      |              |\n|              |              |              | objective    |              |\n|              |              |              | function.    |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| obj_scaling_ | OT_REAL      | 1            | Scaling      | CasADi::Ipop |\n| factor       |              |              | factor for   | tInternal    |\n|              |              |              | the          |              |\n|              |              |              | objective    |              |\n|              |              |              | function.    |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| option_file_ | OT_STRING    |              | File name of | CasADi::Ipop |\n| name         |              |              | options file | tInternal    |\n|              |              |              | (to          |              |\n|              |              |              | overwrite    |              |\n|              |              |              | default).    |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| output_file  | OT_STRING    |              | File name of | CasADi::Ipop |\n|              |              |              | desired      | tInternal    |\n|              |              |              | output file  |              |\n|              |              |              | (leave unset |              |\n|              |              |              | for no file  |              |\n|              |              |              | output).     |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| parametric   | OT_BOOLEAN   | GenericType( | Deprecated   | CasADi::NLPS |\n|              |              | )            | option.      | olverInterna |\n|              |              |              | Expect F, G, | l            |\n|              |              |              | H, J to have |              |\n|              |              |              | an           |              |\n|              |              |              | additional   |              |\n|              |              |              | input        |              |\n|              |              |              | argument     |              |\n|              |              |              | appended at  |              |\n|              |              |              | the end,     |              |\n|              |              |              | denoting     |              |\n|              |              |              | fixed        |              |\n|              |              |              | parameters.  |              |\n+--------------+--------------+--------------+--------------+--------------+\n| pardiso_iter | OT_INTEGER   | 5000         | Maximum Size | CasADi::Ipop |\n| _coarse_size |              |              | of Coarse    | tInternal    |\n|              |              |              | Grid Matrix  |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| pardiso_iter | OT_REAL      | 0.500        | dropping     | CasADi::Ipop |\n| _dropping_fa |              |              | value for    | tInternal    |\n| ctor         |              |              | incomplete   |              |\n|              |              |              | factor (see  |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| pardiso_iter | OT_REAL      | 0.100        | dropping     | CasADi::Ipop |\n| _dropping_sc |              |              | value for    | tInternal    |\n| hur          |              |              | sparsify     |              |\n|              |              |              | schur        |              |\n|              |              |              | complement   |              |\n|              |              |              | factor (see  |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| pardiso_iter | OT_REAL      | 5000000      | (see IPOPT d | CasADi::Ipop |\n| _inverse_nor |              |              | ocumentation | tInternal    |\n| m_factor     |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| pardiso_iter | OT_INTEGER   | 10           | Maximum Size | CasADi::Ipop |\n| _max_levels  |              |              | of Grid      | tInternal    |\n|              |              |              | Levels (see  |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| pardiso_iter | OT_INTEGER   | 10000000     | max fill for | CasADi::Ipop |\n| _max_row_fil |              |              | each row     | tInternal    |\n| l            |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| pardiso_iter | OT_REAL      | 0.000        | Relative     | CasADi::Ipop |\n| _relative_to |              |              | Residual     | tInternal    |\n| l            |              |              | Convergence  |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| pardiso_iter | OT_STRING    | no           | Switch on    | CasADi::Ipop |\n| ative        |              |              | iterative    | tInternal    |\n|              |              |              | solver in    |              |\n|              |              |              | Pardiso      |              |\n|              |              |              | library (see |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| pardiso_matc | OT_STRING    | complete+2x2 | Matching     | CasADi::Ipop |\n| hing_strateg |              |              | strategy to  | tInternal    |\n| y            |              |              | be used by   |              |\n|              |              |              | Pardiso (see |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| pardiso_max_ | OT_INTEGER   | 4            | Maximal      | CasADi::Ipop |\n| droptol_corr |              |              | number of    | tInternal    |\n| ections      |              |              | decreases of |              |\n|              |              |              | drop         |              |\n|              |              |              | tolerance    |              |\n|              |              |              | during one   |              |\n|              |              |              | solve. (see  |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| pardiso_max_ | OT_INTEGER   | 500          | Maximum      | CasADi::Ipop |\n| iter         |              |              | number of    | tInternal    |\n|              |              |              | Krylov-      |              |\n|              |              |              | Subspace     |              |\n|              |              |              | Iteration    |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| pardiso_msgl | OT_INTEGER   | 0            | Pardiso      | CasADi::Ipop |\n| vl           |              |              | message      | tInternal    |\n|              |              |              | level (see   |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| pardiso_out_ | OT_INTEGER   | 0            | Enables out- | CasADi::Ipop |\n| of_core_powe |              |              | of-core      | tInternal    |\n| r            |              |              | variant of   |              |\n|              |              |              | Pardiso (see |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| pardiso_redo | OT_STRING    | no           | Toggle for   | CasADi::Ipop |\n| _symbolic_fa |              |              | handling     | tInternal    |\n| ct_only_if_i |              |              | case when    |              |\n| nertia_wrong |              |              | elements     |              |\n|              |              |              | were         |              |\n|              |              |              | perturbed by |              |\n|              |              |              | Pardiso.     |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| pardiso_repe | OT_STRING    | no           | Interpretati | CasADi::Ipop |\n| ated_perturb |              |              | on of        | tInternal    |\n| ation_means_ |              |              | perturbed    |              |\n| singular     |              |              | elements.    |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| pardiso_skip | OT_STRING    | no           | Always       | CasADi::Ipop |\n| _inertia_che |              |              | pretend      | tInternal    |\n| ck           |              |              | inertia is   |              |\n|              |              |              | correct.     |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| pass_nonline | OT_BOOLEAN   | False        | n/a          | CasADi::Ipop |\n| ar_variables |              |              |              | tInternal    |\n+--------------+--------------+--------------+--------------+--------------+\n| pen_des_fact | OT_REAL      | 0.200        | a parameter  | CasADi::Ipop |\n|              |              |              | used in      | tInternal    |\n|              |              |              | penalty      |              |\n|              |              |              | parameter    |              |\n|              |              |              | computation  |              |\n|              |              |              | (for Chen-   |              |\n|              |              |              | Goldfarb     |              |\n|              |              |              | line         |              |\n|              |              |              | search).     |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| pen_init_fac | OT_REAL      | 50           | a parameter  | CasADi::Ipop |\n|              |              |              | used to      | tInternal    |\n|              |              |              | choose       |              |\n|              |              |              | initial      |              |\n|              |              |              | penalty para |              |\n|              |              |              | meterswhen   |              |\n|              |              |              | the          |              |\n|              |              |              | regularized  |              |\n|              |              |              | Newton       |              |\n|              |              |              | method is    |              |\n|              |              |              | used. (see   |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| pen_theta_ma | OT_REAL      | 10000        | Determines   | CasADi::Ipop |\n| x_fact       |              |              | upper bound  | tInternal    |\n|              |              |              | for          |              |\n|              |              |              | constraint   |              |\n|              |              |              | violation in |              |\n|              |              |              | the filter.  |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| penalty_init | OT_REAL      | 100000       | Maximal      | CasADi::Ipop |\n| _max         |              |              | value for    | tInternal    |\n|              |              |              | the intial   |              |\n|              |              |              | penalty      |              |\n|              |              |              | parameter    |              |\n|              |              |              | (for Chen-   |              |\n|              |              |              | Goldfarb     |              |\n|              |              |              | line         |              |\n|              |              |              | search).     |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| penalty_init | OT_REAL      | 1            | Minimal      | CasADi::Ipop |\n| _min         |              |              | value for    | tInternal    |\n|              |              |              | the intial   |              |\n|              |              |              | penalty      |              |\n|              |              |              | parameter    |              |\n|              |              |              | for line     |              |\n|              |              |              | search(for   |              |\n|              |              |              | Chen-        |              |\n|              |              |              | Goldfarb     |              |\n|              |              |              | line         |              |\n|              |              |              | search).     |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| penalty_max  | OT_REAL      | 1.000e+30    | Maximal      | CasADi::Ipop |\n|              |              |              | value for    | tInternal    |\n|              |              |              | the penalty  |              |\n|              |              |              | parameter    |              |\n|              |              |              | (for Chen-   |              |\n|              |              |              | Goldfarb     |              |\n|              |              |              | line         |              |\n|              |              |              | search).     |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| penalty_upda | OT_REAL      | 10           | LIFENG       | CasADi::Ipop |\n| te_compl_tol |              |              | WRITES THIS. | tInternal    |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| penalty_upda | OT_REAL      | 0.000        | Threshold    | CasADi::Ipop |\n| te_infeasibi |              |              | for infeasib | tInternal    |\n| lity_tol     |              |              | ility in     |              |\n|              |              |              | penalty      |              |\n|              |              |              | parameter    |              |\n|              |              |              | update test. |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| perturb_alwa | OT_STRING    | no           | Active       | CasADi::Ipop |\n| ys_cd        |              |              | permanent    | tInternal    |\n|              |              |              | perturbation |              |\n|              |              |              | of           |              |\n|              |              |              | constraint l |              |\n|              |              |              | inearization |              |\n|              |              |              | . (see IPOPT |              |\n|              |              |              | documentatio |              |\n|              |              |              | n)           |              |\n+--------------+--------------+--------------+--------------+--------------+\n| perturb_dec_ | OT_REAL      | 0.333        | Decrease     | CasADi::Ipop |\n| fact         |              |              | factor for   | tInternal    |\n|              |              |              | x-s perturba |              |\n|              |              |              | tion. (see   |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| perturb_inc_ | OT_REAL      | 8            | Increase     | CasADi::Ipop |\n| fact         |              |              | factor for   | tInternal    |\n|              |              |              | x-s perturba |              |\n|              |              |              | tion. (see   |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| perturb_inc_ | OT_REAL      | 100          | Increase     | CasADi::Ipop |\n| fact_first   |              |              | factor for   | tInternal    |\n|              |              |              | x-s          |              |\n|              |              |              | perturbation |              |\n|              |              |              | for very     |              |\n|              |              |              | first pertur |              |\n|              |              |              | bation. (see |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| piecewisepen | OT_REAL      | 0.000        | LIFENG       | CasADi::Ipop |\n| alty_gamma_i |              |              | WRITES THIS. | tInternal    |\n| nfeasi       |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| piecewisepen | OT_REAL      | 0.000        | LIFENG       | CasADi::Ipop |\n| alty_gamma_o |              |              | WRITES THIS. | tInternal    |\n| bj           |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| point_pertur | OT_REAL      | 10           | Maximal      | CasADi::Ipop |\n| bation_radiu |              |              | perturbation | tInternal    |\n| s            |              |              | of an        |              |\n|              |              |              | evaluation   |              |\n|              |              |              | point. (see  |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| print_info_s | OT_STRING    | no           | Enables      | CasADi::Ipop |\n| tring        |              |              | printing of  | tInternal    |\n|              |              |              | additional   |              |\n|              |              |              | info string  |              |\n|              |              |              | at end of    |              |\n|              |              |              | iteration    |              |\n|              |              |              | output. (see |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| print_level  | OT_INTEGER   | 5            | Output       | CasADi::Ipop |\n|              |              |              | verbosity    | tInternal    |\n|              |              |              | level. (see  |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| print_option | OT_STRING    | no           | Switch to    | CasADi::Ipop |\n| s_documentat |              |              | print all    | tInternal    |\n| ion          |              |              | algorithmic  |              |\n|              |              |              | options.     |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| print_option | OT_STRING    | no           | Undocumented | CasADi::Ipop |\n| s_latex_mode |              |              | (see IPOPT d | tInternal    |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| print_time   | OT_BOOLEAN   | True         | print        | CasADi::Ipop |\n|              |              |              | information  | tInternal    |\n|              |              |              | about        |              |\n|              |              |              | execution    |              |\n|              |              |              | time         |              |\n+--------------+--------------+--------------+--------------+--------------+\n| print_timing | OT_STRING    | no           | Switch to    | CasADi::Ipop |\n| _statistics  |              |              | print timing | tInternal    |\n|              |              |              | statistics.  |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| print_user_o | OT_STRING    | no           | Print all    | CasADi::Ipop |\n| ptions       |              |              | options set  | tInternal    |\n|              |              |              | by the user. |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| quality_func | OT_STRING    | none         | The          | CasADi::Ipop |\n| tion_balanci |              |              | balancing    | tInternal    |\n| ng_term      |              |              | term         |              |\n|              |              |              | included in  |              |\n|              |              |              | the quality  |              |\n|              |              |              | function for |              |\n|              |              |              | centrality.  |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| quality_func | OT_STRING    | none         | The penalty  | CasADi::Ipop |\n| tion_central |              |              | term for     | tInternal    |\n| ity          |              |              | centrality   |              |\n|              |              |              | that is      |              |\n|              |              |              | included in  |              |\n|              |              |              | quality      |              |\n|              |              |              | function.    |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| quality_func | OT_INTEGER   | 8            | Maximum      | CasADi::Ipop |\n| tion_max_sec |              |              | number of    | tInternal    |\n| tion_steps   |              |              | search steps |              |\n|              |              |              | during       |              |\n|              |              |              | direct       |              |\n|              |              |              | search       |              |\n|              |              |              | procedure    |              |\n|              |              |              | determining  |              |\n|              |              |              | the optimal  |              |\n|              |              |              | centering    |              |\n|              |              |              | parameter.   |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| quality_func | OT_STRING    | 2-norm-      | Norm used    | CasADi::Ipop |\n| tion_norm_ty |              | squared      | for          | tInternal    |\n| pe           |              |              | components   |              |\n|              |              |              | of the       |              |\n|              |              |              | quality      |              |\n|              |              |              | function.    |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| quality_func | OT_REAL      | 0            | Tolerance    | CasADi::Ipop |\n| tion_section |              |              | for the      | tInternal    |\n| _qf_tol      |              |              | golden       |              |\n|              |              |              | section      |              |\n|              |              |              | search       |              |\n|              |              |              | procedure    |              |\n|              |              |              | determining  |              |\n|              |              |              | the optimal  |              |\n|              |              |              | centering    |              |\n|              |              |              | parameter    |              |\n|              |              |              | (in the      |              |\n|              |              |              | function     |              |\n|              |              |              | value        |              |\n|              |              |              | space). (see |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| quality_func | OT_REAL      | 0.010        | Tolerance    | CasADi::Ipop |\n| tion_section |              |              | for the      | tInternal    |\n| _sigma_tol   |              |              | section      |              |\n|              |              |              | search       |              |\n|              |              |              | procedure    |              |\n|              |              |              | determining  |              |\n|              |              |              | the optimal  |              |\n|              |              |              | centering    |              |\n|              |              |              | parameter    |              |\n|              |              |              | (in sigma    |              |\n|              |              |              | space). (see |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| recalc_y     | OT_STRING    | no           | Tells the    | CasADi::Ipop |\n|              |              |              | algorithm to | tInternal    |\n|              |              |              | recalculate  |              |\n|              |              |              | the equality |              |\n|              |              |              | and          |              |\n|              |              |              | inequality   |              |\n|              |              |              | multipliers  |              |\n|              |              |              | as least     |              |\n|              |              |              | square       |              |\n|              |              |              | estimates.   |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| recalc_y_fea | OT_REAL      | 0.000        | Feasibility  | CasADi::Ipop |\n| s_tol        |              |              | threshold    | tInternal    |\n|              |              |              | for recomput |              |\n|              |              |              | ation of     |              |\n|              |              |              | multipliers. |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::FXIn |\n| heck         |              |              | exceptions   | ternal       |\n|              |              |              | when NaN or  |              |\n|              |              |              | Inf appears  |              |\n|              |              |              | during       |              |\n|              |              |              | evaluation   |              |\n+--------------+--------------+--------------+--------------+--------------+\n| replace_boun | OT_STRING    | no           | Indicates if | CasADi::Ipop |\n| ds           |              |              | all variable | tInternal    |\n|              |              |              | bounds       |              |\n|              |              |              | should be    |              |\n|              |              |              | replaced by  |              |\n|              |              |              | inequality   |              |\n|              |              |              | constraints  |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| required_inf | OT_REAL      | 0.900        | Required     | CasADi::Ipop |\n| easibility_r |              |              | reduction of | tInternal    |\n| eduction     |              |              | infeasibilit |              |\n|              |              |              | y before     |              |\n|              |              |              | leaving      |              |\n|              |              |              | restoration  |              |\n|              |              |              | phase. (see  |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| residual_imp | OT_REAL      | 1.000        | Minimal      | CasADi::Ipop |\n| rovement_fac |              |              | required     | tInternal    |\n| tor          |              |              | reduction of |              |\n|              |              |              | residual     |              |\n|              |              |              | test ratio   |              |\n|              |              |              | in iterative |              |\n|              |              |              | refinement.  |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| residual_rat | OT_REAL      | 0.000        | Iterative    | CasADi::Ipop |\n| io_max       |              |              | refinement   | tInternal    |\n|              |              |              | tolerance    |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| residual_rat | OT_REAL      | 0.000        | Threshold    | CasADi::Ipop |\n| io_singular  |              |              | for          | tInternal    |\n|              |              |              | declaring    |              |\n|              |              |              | linear       |              |\n|              |              |              | system       |              |\n|              |              |              | singular     |              |\n|              |              |              | after failed |              |\n|              |              |              | iterative    |              |\n|              |              |              | refinement.  |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| resto_failur | OT_REAL      | 0            | Threshold    | CasADi::Ipop |\n| e_feasibilit |              |              | for primal i | tInternal    |\n| y_threshold  |              |              | nfeasibility |              |\n|              |              |              | to declare   |              |\n|              |              |              | failure of   |              |\n|              |              |              | restoration  |              |\n|              |              |              | phase. (see  |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| resto_penalt | OT_REAL      | 1000         | Penalty      | CasADi::Ipop |\n| y_parameter  |              |              | parameter in | tInternal    |\n|              |              |              | the          |              |\n|              |              |              | restoration  |              |\n|              |              |              | phase        |              |\n|              |              |              | objective    |              |\n|              |              |              | function.    |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| resto_proxim | OT_REAL      | 1            | Weighting    | CasADi::Ipop |\n| ity_weight   |              |              | factor for   | tInternal    |\n|              |              |              | the          |              |\n|              |              |              | proximity    |              |\n|              |              |              | term in      |              |\n|              |              |              | restoration  |              |\n|              |              |              | phase        |              |\n|              |              |              | objective.   |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| rho          | OT_REAL      | 0.100        | Value in     | CasADi::Ipop |\n|              |              |              | penalty      | tInternal    |\n|              |              |              | parameter    |              |\n|              |              |              | update       |              |\n|              |              |              | formula.     |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| s_max        | OT_REAL      | 100          | Scaling      | CasADi::Ipop |\n|              |              |              | threshold    | tInternal    |\n|              |              |              | for the NLP  |              |\n|              |              |              | error. (see  |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| s_phi        | OT_REAL      | 2.300        | Exponent for | CasADi::Ipop |\n|              |              |              | linear       | tInternal    |\n|              |              |              | barrier      |              |\n|              |              |              | function     |              |\n|              |              |              | model in the |              |\n|              |              |              | switching    |              |\n|              |              |              | rule. (see   |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| s_theta      | OT_REAL      | 1.100        | Exponent for | CasADi::Ipop |\n|              |              |              | current      | tInternal    |\n|              |              |              | constraint   |              |\n|              |              |              | violation in |              |\n|              |              |              | the          |              |\n|              |              |              | switching    |              |\n|              |              |              | rule. (see   |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| sb           | OT_STRING    | no           | (see IPOPT d | CasADi::Ipop |\n|              |              |              | ocumentation | tInternal    |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| sigma_max    | OT_REAL      | 100          | Maximum      | CasADi::Ipop |\n|              |              |              | value of the | tInternal    |\n|              |              |              | centering    |              |\n|              |              |              | parameter.   |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| sigma_min    | OT_REAL      | 0.000        | Minimum      | CasADi::Ipop |\n|              |              |              | value of the | tInternal    |\n|              |              |              | centering    |              |\n|              |              |              | parameter.   |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| skip_corr_if | OT_STRING    | yes          | Skip the     | CasADi::Ipop |\n| _neg_curv    |              |              | corrector    | tInternal    |\n|              |              |              | step in      |              |\n|              |              |              | negative     |              |\n|              |              |              | curvature    |              |\n|              |              |              | iteration (u |              |\n|              |              |              | nsupported!) |              |\n|              |              |              | . (see IPOPT |              |\n|              |              |              | documentatio |              |\n|              |              |              | n)           |              |\n+--------------+--------------+--------------+--------------+--------------+\n| skip_corr_in | OT_STRING    | yes          | Skip the     | CasADi::Ipop |\n| _monotone_mo |              |              | corrector    | tInternal    |\n| de           |              |              | step during  |              |\n|              |              |              | monotone     |              |\n|              |              |              | barrier      |              |\n|              |              |              | parameter    |              |\n|              |              |              | mode (unsupp |              |\n|              |              |              | orted!).     |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| skip_finaliz | OT_STRING    | no           | Indicates if | CasADi::Ipop |\n| e_solution_c |              |              | call to NLP: | tInternal    |\n| all          |              |              | :FinalizeSol |              |\n|              |              |              | ution after  |              |\n|              |              |              | optimization |              |\n|              |              |              | should be    |              |\n|              |              |              | suppressed   |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| slack_bound_ | OT_REAL      | 0.010        | Desired      | CasADi::Ipop |\n| frac         |              |              | minimum      | tInternal    |\n|              |              |              | relative     |              |\n|              |              |              | distance     |              |\n|              |              |              | from the     |              |\n|              |              |              | initial      |              |\n|              |              |              | slack to     |              |\n|              |              |              | bound. (see  |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| slack_bound_ | OT_REAL      | 0.010        | Desired      | CasADi::Ipop |\n| push         |              |              | minimum      | tInternal    |\n|              |              |              | absolute     |              |\n|              |              |              | distance     |              |\n|              |              |              | from the     |              |\n|              |              |              | initial      |              |\n|              |              |              | slack to     |              |\n|              |              |              | bound. (see  |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| slack_move   | OT_REAL      | 0.000        | Correction   | CasADi::Ipop |\n|              |              |              | size for     | tInternal    |\n|              |              |              | very small   |              |\n|              |              |              | slacks. (see |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| soft_resto_p | OT_REAL      | 1.000        | Required     | CasADi::Ipop |\n| derror_reduc |              |              | reduction in | tInternal    |\n| tion_factor  |              |              | primal-dual  |              |\n|              |              |              | error in the |              |\n|              |              |              | soft         |              |\n|              |              |              | restoration  |              |\n|              |              |              | phase. (see  |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| sparse       | OT_BOOLEAN   | true         | function is  | CasADi::FXIn |\n|              |              |              | sparse       | ternal       |\n+--------------+--------------+--------------+--------------+--------------+\n| sparsity_gen | OT_SPARSITYG | GenericType( | Function     | CasADi::FXIn |\n| erator       | ENERATOR     | )            | that         | ternal       |\n|              |              |              | provides     |              |\n|              |              |              | sparsity for |              |\n|              |              |              | a given      |              |\n|              |              |              | input output |              |\n|              |              |              | block,       |              |\n|              |              |              | overrides    |              |\n|              |              |              | internal     |              |\n|              |              |              | routines.    |              |\n|              |              |              | Check docume |              |\n|              |              |              | ntation of S |              |\n|              |              |              | parsityGener |              |\n|              |              |              | ator .       |              |\n+--------------+--------------+--------------+--------------+--------------+\n| start_with_r | OT_STRING    | no           | Tells        | CasADi::Ipop |\n| esto         |              |              | algorithm to | tInternal    |\n|              |              |              | switch to    |              |\n|              |              |              | restoration  |              |\n|              |              |              | phase in     |              |\n|              |              |              | first        |              |\n|              |              |              | iteration.   |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| store_jacobi | OT_BOOLEAN   | false        | keep         | CasADi::FXIn |\n| ans          |              |              | references   | ternal       |\n|              |              |              | to generated |              |\n|              |              |              | Jacobians in |              |\n|              |              |              | order to     |              |\n|              |              |              | avoid        |              |\n|              |              |              | generating   |              |\n|              |              |              | identical    |              |\n|              |              |              | Jacobians    |              |\n|              |              |              | multiple     |              |\n|              |              |              | times        |              |\n+--------------+--------------+--------------+--------------+--------------+\n| suppress_all | OT_STRING    | no           | Undocumented | CasADi::Ipop |\n| _output      |              |              | (see IPOPT d | tInternal    |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| tau_min      | OT_REAL      | 0.990        | Lower bound  | CasADi::Ipop |\n|              |              |              | on fraction- | tInternal    |\n|              |              |              | to-the-      |              |\n|              |              |              | boundary     |              |\n|              |              |              | parameter    |              |\n|              |              |              | tau. (see    |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| theta_max_fa | OT_REAL      | 10000        | Determines   | CasADi::Ipop |\n| ct           |              |              | upper bound  | tInternal    |\n|              |              |              | for          |              |\n|              |              |              | constraint   |              |\n|              |              |              | violation in |              |\n|              |              |              | the filter.  |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| theta_min    | OT_REAL      | 0.000        | LIFENG       | CasADi::Ipop |\n|              |              |              | WRITES THIS. | tInternal    |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| theta_min_fa | OT_REAL      | 0.000        | Determines   | CasADi::Ipop |\n| ct           |              |              | constraint   | tInternal    |\n|              |              |              | violation    |              |\n|              |              |              | threshold in |              |\n|              |              |              | the          |              |\n|              |              |              | switching    |              |\n|              |              |              | rule. (see   |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| tiny_step_to | OT_REAL      | 0.000        | Tolerance    | CasADi::Ipop |\n| l            |              |              | for          | tInternal    |\n|              |              |              | detecting    |              |\n|              |              |              | numerically  |              |\n|              |              |              | insignifican |              |\n|              |              |              | t steps.     |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| tiny_step_y_ | OT_REAL      | 0.010        | Tolerance    | CasADi::Ipop |\n| tol          |              |              | for quitting | tInternal    |\n|              |              |              | because of   |              |\n|              |              |              | numerically  |              |\n|              |              |              | insignifican |              |\n|              |              |              | t steps.     |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| tol          | OT_REAL      | 0.000        | Desired      | CasADi::Ipop |\n|              |              |              | convergence  | tInternal    |\n|              |              |              | tolerance    |              |\n|              |              |              | (relative).  |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::FXIn |\n|              |              | )            | defined      | ternal       |\n|              |              |              | field that   |              |\n|              |              |              | can be used  |              |\n|              |              |              | to identify  |              |\n|              |              |              | the function |              |\n|              |              |              | or pass      |              |\n|              |              |              | additional   |              |\n|              |              |              | information  |              |\n+--------------+--------------+--------------+--------------+--------------+\n| var_integer_ | OT_DICTIONAR | None         | Integer      | CasADi::Ipop |\n| md           | Y            |              | metadata (a  | tInternal    |\n|              |              |              | dictionary   |              |\n|              |              |              | with lists   |              |\n|              |              |              | of integers) |              |\n|              |              |              | about        |              |\n|              |              |              | variables to |              |\n|              |              |              | be passed to |              |\n|              |              |              | IPOPT        |              |\n+--------------+--------------+--------------+--------------+--------------+\n| var_numeric_ | OT_DICTIONAR | None         | Numeric      | CasADi::Ipop |\n| md           | Y            |              | metadata (a  | tInternal    |\n|              |              |              | dictionary   |              |\n|              |              |              | with lists   |              |\n|              |              |              | of reals)    |              |\n|              |              |              | about        |              |\n|              |              |              | variables to |              |\n|              |              |              | be passed to |              |\n|              |              |              | IPOPT        |              |\n+--------------+--------------+--------------+--------------+--------------+\n| var_string_m | OT_DICTIONAR | None         | String       | CasADi::Ipop |\n| d            | Y            |              | metadata (a  | tInternal    |\n|              |              |              | dictionary   |              |\n|              |              |              | with lists   |              |\n|              |              |              | of strings)  |              |\n|              |              |              | about        |              |\n|              |              |              | variables to |              |\n|              |              |              | be passed to |              |\n|              |              |              | IPOPT        |              |\n+--------------+--------------+--------------+--------------+--------------+\n| vartheta     | OT_REAL      | 0.500        | a parameter  | CasADi::Ipop |\n|              |              |              | used to      | tInternal    |\n|              |              |              | check if the |              |\n|              |              |              | fast         |              |\n|              |              |              | direction    |              |\n|              |              |              | can be used  |              |\n|              |              |              | asthe line   |              |\n|              |              |              | search       |              |\n|              |              |              | direction    |              |\n|              |              |              | (for Chen-   |              |\n|              |              |              | Goldfarb     |              |\n|              |              |              | line         |              |\n|              |              |              | search).     |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| verbose      | OT_BOOLEAN   | false        | verbose      | CasADi::FXIn |\n|              |              |              | evaluation   | ternal       |\n|              |              |              | for          |              |\n|              |              |              | debugging    |              |\n+--------------+--------------+--------------+--------------+--------------+\n| warm_start_b | OT_REAL      | 0.001        | same as      | CasADi::Ipop |\n| ound_frac    |              |              | bound_frac   | tInternal    |\n|              |              |              | for the      |              |\n|              |              |              | regular      |              |\n|              |              |              | initializer. |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| warm_start_b | OT_REAL      | 0.001        | same as      | CasADi::Ipop |\n| ound_push    |              |              | bound_push   | tInternal    |\n|              |              |              | for the      |              |\n|              |              |              | regular      |              |\n|              |              |              | initializer. |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| warm_start_e | OT_STRING    | no           | Tells        | CasADi::Ipop |\n| ntire_iterat |              |              | algorithm    | tInternal    |\n| e            |              |              | whether to   |              |\n|              |              |              | use the GetW |              |\n|              |              |              | armStartIter |              |\n|              |              |              | ate method   |              |\n|              |              |              | in the NLP.  |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| warm_start_i | OT_STRING    | no           | Warm-start   | CasADi::Ipop |\n| nit_point    |              |              | for initial  | tInternal    |\n|              |              |              | point (see   |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| warm_start_m | OT_REAL      | 0.001        | same as mult | CasADi::Ipop |\n| ult_bound_pu |              |              | _bound_push  | tInternal    |\n| sh           |              |              | for the      |              |\n|              |              |              | regular      |              |\n|              |              |              | initializer. |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| warm_start_m | OT_REAL      | 1000000      | Maximum      | CasADi::Ipop |\n| ult_init_max |              |              | initial      | tInternal    |\n|              |              |              | value for    |              |\n|              |              |              | the equality |              |\n|              |              |              | multipliers. |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| warm_start_s | OT_STRING    | no           | Indicates    | CasADi::Ipop |\n| ame_structur |              |              | whether a    | tInternal    |\n| e            |              |              | problem with |              |\n|              |              |              | a structure  |              |\n|              |              |              | identical to |              |\n|              |              |              | the previous |              |\n|              |              |              | one is to be |              |\n|              |              |              | solved. (see |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| warm_start_s | OT_REAL      | 0.001        | same as slac | CasADi::Ipop |\n| lack_bound_f |              |              | k_bound_frac | tInternal    |\n| rac          |              |              | for the      |              |\n|              |              |              | regular      |              |\n|              |              |              | initializer. |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| warm_start_s | OT_REAL      | 0.001        | same as slac | CasADi::Ipop |\n| lack_bound_p |              |              | k_bound_push | tInternal    |\n| ush          |              |              | for the      |              |\n|              |              |              | regular      |              |\n|              |              |              | initializer. |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| warm_start_t | OT_REAL      | 0            | Unsupported! | CasADi::Ipop |\n| arget_mu     |              |              | (see IPOPT d | tInternal    |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| warn_initial | OT_BOOLEAN   | false        | Warn if the  | CasADi::NLPS |\n| _bounds      |              |              | initial      | olverInterna |\n|              |              |              | guess does   | l            |\n|              |              |              | not satisfy  |              |\n|              |              |              | LBX and UBX  |              |\n+--------------+--------------+--------------+--------------+--------------+\n| watchdog_sho | OT_INTEGER   | 10           | Number of    | CasADi::Ipop |\n| rtened_iter_ |              |              | shortened    | tInternal    |\n| trigger      |              |              | iterations   |              |\n|              |              |              | that trigger |              |\n|              |              |              | the          |              |\n|              |              |              | watchdog.    |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| watchdog_tri | OT_INTEGER   | 3            | Maximum      | CasADi::Ipop |\n| al_iter_max  |              |              | number of    | tInternal    |\n|              |              |              | watchdog     |              |\n|              |              |              | iterations.  |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| wsmp_inexact | OT_REAL      | 0            | Drop         | CasADi::Ipop |\n| _droptol     |              |              | tolerance    | tInternal    |\n|              |              |              | for inexact  |              |\n|              |              |              | factorizatio |              |\n|              |              |              | n preconditi |              |\n|              |              |              | oner in      |              |\n|              |              |              | WISMP. (see  |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| wsmp_inexact | OT_REAL      | 0            | Fill-in      | CasADi::Ipop |\n| _fillin_limi |              |              | limit for    | tInternal    |\n| t            |              |              | inexact fact |              |\n|              |              |              | orization pr |              |\n|              |              |              | econditioner |              |\n|              |              |              | in WISMP.    |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| wsmp_iterati | OT_STRING    | no           | Switches to  | CasADi::Ipop |\n| ve           |              |              | iterative    | tInternal    |\n|              |              |              | solver in    |              |\n|              |              |              | WSMP. (see   |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| wsmp_max_ite | OT_INTEGER   | 1000         | Maximal      | CasADi::Ipop |\n| r            |              |              | number of    | tInternal    |\n|              |              |              | iterations   |              |\n|              |              |              | in iterative |              |\n|              |              |              | WISMP (see   |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| wsmp_no_pivo | OT_STRING    | no           | Use the      | CasADi::Ipop |\n| ting         |              |              | static       | tInternal    |\n|              |              |              | pivoting     |              |\n|              |              |              | option of    |              |\n|              |              |              | WSMP. (see   |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| wsmp_num_thr | OT_INTEGER   | 1            | Number of    | CasADi::Ipop |\n| eads         |              |              | threads to   | tInternal    |\n|              |              |              | be used in   |              |\n|              |              |              | WSMP (see    |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| wsmp_orderin | OT_INTEGER   | 1            | Determines   | CasADi::Ipop |\n| g_option     |              |              | how ordering | tInternal    |\n|              |              |              | is done in   |              |\n|              |              |              | WSMP         |              |\n|              |              |              | (IPARM(16)   |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| wsmp_orderin | OT_INTEGER   | 1            | Determines   | CasADi::Ipop |\n| g_option2    |              |              | how ordering | tInternal    |\n|              |              |              | is done in   |              |\n|              |              |              | WSMP         |              |\n|              |              |              | (IPARM(20)   |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| wsmp_pivtol  | OT_REAL      | 0.000        | Pivot        | CasADi::Ipop |\n|              |              |              | tolerance    | tInternal    |\n|              |              |              | for the      |              |\n|              |              |              | linear       |              |\n|              |              |              | solver WSMP. |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| wsmp_pivtolm | OT_REAL      | 0.100        | Maximum      | CasADi::Ipop |\n| ax           |              |              | pivot        | tInternal    |\n|              |              |              | tolerance    |              |\n|              |              |              | for the      |              |\n|              |              |              | linear       |              |\n|              |              |              | solver WSMP. |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| wsmp_scaling | OT_INTEGER   | 0            | Determines   | CasADi::Ipop |\n|              |              |              | how the      | tInternal    |\n|              |              |              | matrix is    |              |\n|              |              |              | scaled by    |              |\n|              |              |              | WSMP. (see   |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| wsmp_singula | OT_REAL      | 0.000        | WSMP's       | CasADi::Ipop |\n| rity_thresho |              |              | singularity  | tInternal    |\n| ld           |              |              | threshold.   |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| wsmp_skip_in | OT_STRING    | no           | Always       | CasADi::Ipop |\n| ertia_check  |              |              | pretent      | tInternal    |\n|              |              |              | inertia is   |              |\n|              |              |              | correct.     |              |\n|              |              |              | (see IPOPT d |              |\n|              |              |              | ocumentation |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| wsmp_write_m | OT_INTEGER   | -1           | Iteration in | CasADi::Ipop |\n| atrix_iterat |              |              | which the    | tInternal    |\n| ion          |              |              | matrices are |              |\n|              |              |              | written to   |              |\n|              |              |              | files. (see  |              |\n|              |              |              | IPOPT docume |              |\n|              |              |              | ntation)     |              |\n+--------------+--------------+--------------+--------------+--------------+\n\n>List of available monitors\n+-------------+-----------------------+\n|     Id      |        Used in        |\n+=============+=======================+\n| eval_f      | CasADi::IpoptInternal |\n+-------------+-----------------------+\n| eval_g      | CasADi::IpoptInternal |\n+-------------+-----------------------+\n| eval_grad_f | CasADi::IpoptInternal |\n+-------------+-----------------------+\n| eval_jac_g  | CasADi::IpoptInternal |\n+-------------+-----------------------+\n| inputs      | CasADi::FXInternal    |\n+-------------+-----------------------+\n| outputs     | CasADi::FXInternal    |\n+-------------+-----------------------+\n\n>List of available stats\n+--------------------+-----------------------+\n|         Id         |        Used in        |\n+====================+=======================+\n| con_integer_md     | CasADi::IpoptInternal |\n+--------------------+-----------------------+\n| con_numeric_md     | CasADi::IpoptInternal |\n+--------------------+-----------------------+\n| con_string_md      | CasADi::IpoptInternal |\n+--------------------+-----------------------+\n| iter_count         | CasADi::IpoptInternal |\n+--------------------+-----------------------+\n| iteration          | CasADi::IpoptInternal |\n+--------------------+-----------------------+\n| return_status      | CasADi::IpoptInternal |\n+--------------------+-----------------------+\n| t_callback_fun     | CasADi::IpoptInternal |\n+--------------------+-----------------------+\n| t_callback_prepare | CasADi::IpoptInternal |\n+--------------------+-----------------------+\n| t_eval_f           | CasADi::IpoptInternal |\n+--------------------+-----------------------+\n| t_eval_g           | CasADi::IpoptInternal |\n+--------------------+-----------------------+\n| t_eval_grad_f      | CasADi::IpoptInternal |\n+--------------------+-----------------------+\n| t_eval_h           | CasADi::IpoptInternal |\n+--------------------+-----------------------+\n| t_eval_jac_g       | CasADi::IpoptInternal |\n+--------------------+-----------------------+\n| t_mainloop         | CasADi::IpoptInternal |\n+--------------------+-----------------------+\n| var_integer_md     | CasADi::IpoptInternal |\n+--------------------+-----------------------+\n| var_numeric_md     | CasADi::IpoptInternal |\n+--------------------+-----------------------+\n| var_string_md      | CasADi::IpoptInternal |\n+--------------------+-----------------------+\n\nDiagrams\n\nC++ includes: ipopt_solver.hpp "
optionsfunctionality :: Class
optionsfunctionality = Class OptionsFunctionality methods docs
  where
    methods =
      [
        Method (Name "setOption") valCVoid [constrefStdString,constrefGenericType] Normal (Doc "\n\n>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)\n------------------------------------------------------------------------\n\nset an option. For a list of options, check the class documentation of this\nclass.\n\nThe setOptions are only considered before the init function. If properties\nchanges, the init function should be called again.\n\n>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)\n------------------------------------------------------------------------\n\nset a set of options. For a list of options, check the class documentation\nof this class.\n\nThe setOptions are only considered before the init function. If properties\nchanges, the init function should be called again.\n\n") ,
        Method (Name "getOption") valGenericType [constrefStdString] Normal (Doc "\n\nget an option value\n\n") ,
        Method (Name "hasOption") valCBool [constrefStdString] Normal (Doc "\n\ncheck if there is an option str\n\n") ,
        Method (Name "hasSetOption") valCBool [constrefStdString] Normal (Doc "\n\ncheck if the user has there is an option str\n\n") ,
        Method (Name "printOptions") valCVoid [refStdOstream] Normal (Doc "\n\nPrint options to a stream.\n\n") ,
        Method (Name "printOptions'") valCVoid [] Normal (Doc "\n\nPrint options to a stream.\n\n") ,
        Method (Name "copyOptions") valCVoid [constrefOptionsFunctionality,valCBool] Normal (Doc "\n\nCopy all options from another object.\n\n") ,
        Method (Name "copyOptions'") valCVoid [constrefOptionsFunctionality] Normal (Doc "\n\nCopy all options from another object.\n\n") ,
        Method (Name "checkNode") valCBool [] Normal (Doc "\n\nAssert that the node is pointing to the right type of object.\n\n") ,
        Method (Name "getOptionNames") valStdStringVec [] Normal (Doc "\n\nGet a list of all option names.\n\n") ,
        Method (Name "getOptionDescription") valStdString [constrefStdString] Normal (Doc "\n\nGet the description of a certain option.\n\n") ,
        Method (Name "getOptionType") valenumopt_type [constrefStdString] Normal (Doc "\n\nGet the type of a certain option.\n\n") ,
        Method (Name "getOptionTypeName") valStdString [constrefStdString] Normal (Doc "\n\nGet the type name of a certain option.\n\n") ,
        Method (Name "getOptionAllowed") valGenericTypeVec [constrefStdString] Normal (Doc "\n\nGet the allowed values of a certain option.\n\n") ,
        Method (Name "getOptionAllowedIndex") valCInt [constrefStdString] Normal (Doc "\n\nGet the index into allowed options of a certain option.\n\n") ,
        Method (Name "setOptionByAllowedIndex") valCVoid [constrefStdString,valCInt] Normal (Doc "\n\nSet a certain option by giving its index into the allowed values.\n\n") ,
        Method (Name "getOptionEnumValue") valCInt [constrefStdString] Normal (Doc "\n\nGet the enum value corresponding to th certain option.\n\n") ,
        Method (Name "setOptionByEnumValue") valCVoid [constrefStdString,valCInt] Normal (Doc "\n\nSet a certain option by giving an enum value.\n\n") ,
        Method (Name "getOptionDefault") valGenericType [constrefStdString] Normal (Doc "\n\nGet the default of a certain option.\n\n") ,
        Method (Name "OptionsFunctionality") valOptionsFunctionality [] Constructor (Doc "\n\nDefault constructor.\n\n") 
      ]
    docs = Doc "\n\nProvides options setting/getting functionality Gives a derived class the\nability to set and retrieve options in a convenient way. It also contains\nerror checking, making sure that the option exists and that the value type\nis correct.\n\nA derived class should add option names, types and default values to the\ncorresponding vectors.\n\nJoel Andersson\n\n>List of available options\n+--------------+--------------+--------------+--------------+--------------+\n|      Id      |     Type     |   Default    | Description  |   Used in    |\n+==============+==============+==============+==============+==============+\n| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |\n|              |              | red_object\"  | object       | onsFunctiona |\n|              |              |              |              | lityNode     |\n+--------------+--------------+--------------+--------------+--------------+\n\nDiagrams\n\nC++ includes: options_functionality.hpp "

iointerfacefx :: Class
iointerfacefx = Class IOInterfaceFX methods docs
  where
    methods =
      [
        Method (Name "input") valDMatrix [valCInt] Normal (Doc "\n\nAccess input argument.\n\n") ,
        Method (Name "input'") valDMatrix [] Normal (Doc "\n\nAccess input argument.\n\n") ,
        Method (Name "input''") valDMatrix [constrefStdString] Normal (Doc "\n\nAccess input argument.\n\n") ,
        Method (Name "output") valDMatrix [valCInt] Normal (Doc "\n\nAccess output argument.\n\n") ,
        Method (Name "output'") valDMatrix [] Normal (Doc "\n\nAccess output argument.\n\n") ,
        Method (Name "output''") valDMatrix [constrefStdString] Normal (Doc "\n\nAccess output argument.\n\n") ,
        Method (Name "getNumInputs") valCInt [] Normal (Doc "\n\nGet the number of function inputs.\n\n") ,
        Method (Name "getNumOutputs") valCInt [] Normal (Doc "\n\nGet the number of function outputs.\n\n") ,
        Method (Name "getInputScheme") valIOScheme [] Normal (Doc "\n\nGet input scheme.\n\n") ,
        Method (Name "getOutputScheme") valIOScheme [] Normal (Doc "\n\nGet output scheme.\n\n") ,
        Method (Name "inputSchemeEntry") valCInt [constrefStdString] Normal (Doc "\n\nFind the index for a string describing a particular entry of an input scheme\nexample: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FXInternal\nadheres to SCHEME_NLPINput.\n\n") ,
        Method (Name "outputSchemeEntry") valCInt [constrefStdString] Normal (Doc "\n\nFind the index for a string describing a particular entry of an output\nscheme example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FXInternal\nadheres to SCHEME_NLPINput.\n\n") ,
        Method (Name "schemeEntry") valCInt [constrefIOScheme,constrefStdString,valCBool] Normal (Doc "\n\nFind the index for a string describing a particular entry of a scheme\nexample: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FXInternal\nadheres to SCHEME_NLPINput.\n\n") ,
        Method (Name "setInput") valCVoid [valCDouble,valCInt] Normal (Doc "\n\nReads in the input argument from val. T can be double&, double*,\nstd::vector<double>&, Matrix<double> &  Assumes a properly allocated val. .\n\n") ,
        Method (Name "setInput'") valCVoid [valCDouble] Normal (Doc "\n\nReads in the input argument from val. T can be double&, double*,\nstd::vector<double>&, Matrix<double> &  Assumes a properly allocated val. .\n\n") ,
        Method (Name "setOutput") valCVoid [valCDouble,valCInt] Normal (Doc "\n\nReads in the output argument from val. T can be double&, double*,\nstd::vector<double>&, Matrix<double> &  Assumes a properly allocated val. .\n\n") ,
        Method (Name "setOutput'") valCVoid [valCDouble] Normal (Doc "\n\nReads in the output argument from val. T can be double&, double*,\nstd::vector<double>&, Matrix<double> &  Assumes a properly allocated val. .\n\n") ,
        Method (Name "setOutput''") valCVoid [valCDouble,constrefStdString] Normal (Doc "\n\nReads in the output argument from val. T can be double&, double*,\nstd::vector<double>&, Matrix<double> &  Assumes a properly allocated val. .\n\n") ,
        Method (Name "setInput'''") valCVoid [constrefCDoubleVec,valCInt] Normal (Doc "\n\nReads in the input argument from val. T can be double&, double*,\nstd::vector<double>&, Matrix<double> &  Assumes a properly allocated val. .\n\n") ,
        Method (Name "setInput''''") valCVoid [constrefCDoubleVec] Normal (Doc "\n\nReads in the input argument from val. T can be double&, double*,\nstd::vector<double>&, Matrix<double> &  Assumes a properly allocated val. .\n\n") ,
        Method (Name "setOutput'''") valCVoid [constrefCDoubleVec,valCInt] Normal (Doc "\n\nReads in the output argument from val. T can be double&, double*,\nstd::vector<double>&, Matrix<double> &  Assumes a properly allocated val. .\n\n") ,
        Method (Name "setOutput''''") valCVoid [constrefCDoubleVec] Normal (Doc "\n\nReads in the output argument from val. T can be double&, double*,\nstd::vector<double>&, Matrix<double> &  Assumes a properly allocated val. .\n\n") ,
        Method (Name "setInput'''''") valCVoid [constrefCDoubleVec,constrefStdString] Normal (Doc "\n\nReads in the input argument from val. T can be double&, double*,\nstd::vector<double>&, Matrix<double> &  Assumes a properly allocated val. .\n\n") ,
        Method (Name "setOutput'''''") valCVoid [constrefCDoubleVec,constrefStdString] Normal (Doc "\n\nReads in the output argument from val. T can be double&, double*,\nstd::vector<double>&, Matrix<double> &  Assumes a properly allocated val. .\n\n") ,
        Method (Name "setInput''''''") valCVoid [constrefDMatrix,valCInt] Normal (Doc "\n\nReads in the input argument from val. T can be double&, double*,\nstd::vector<double>&, Matrix<double> &  Assumes a properly allocated val. .\n\n") ,
        Method (Name "setInput'''''''") valCVoid [constrefDMatrix] Normal (Doc "\n\nReads in the input argument from val. T can be double&, double*,\nstd::vector<double>&, Matrix<double> &  Assumes a properly allocated val. .\n\n") ,
        Method (Name "setOutput''''''") valCVoid [constrefDMatrix,valCInt] Normal (Doc "\n\nReads in the output argument from val. T can be double&, double*,\nstd::vector<double>&, Matrix<double> &  Assumes a properly allocated val. .\n\n") ,
        Method (Name "setOutput'''''''") valCVoid [constrefDMatrix] Normal (Doc "\n\nReads in the output argument from val. T can be double&, double*,\nstd::vector<double>&, Matrix<double> &  Assumes a properly allocated val. .\n\n") ,
        Method (Name "setInput''''''''") valCVoid [constrefDMatrix,constrefStdString] Normal (Doc "\n\nReads in the input argument from val. T can be double&, double*,\nstd::vector<double>&, Matrix<double> &  Assumes a properly allocated val. .\n\n") ,
        Method (Name "setOutput''''''''") valCVoid [constrefDMatrix,constrefStdString] Normal (Doc "\n\nReads in the output argument from val. T can be double&, double*,\nstd::vector<double>&, Matrix<double> &  Assumes a properly allocated val. .\n\n")
      ]
    docs = Doc "\n\nInterface for accessing input and output data structures.\n\nJoel Andersson\n\nC++ includes: io_interface.hpp "

generictype :: Class
generictype = Class GenericType methods docs
  where
    methods =
      [
        Method (Name "get_type_description") valStdString [constrefenumopt_type] Static (Doc "") ,
        Method (Name "get_description") valStdString [] Normal (Doc "\n\nGet a description of the object's type.\n\n") ,
        Method (Name "from_type") valGenericType [valenumopt_type] Static (Doc "") ,
        Method (Name "getType") valenumopt_type [] Normal (Doc "") ,
        Method (Name "can_cast_to") valCBool [valenumopt_type] Normal (Doc "") ,
        Method (Name "can_cast_to'") valCBool [constrefGenericType] Normal (Doc "") ,
        Method (Name "isBool") valCBool [] Normal (Doc "\n\nIs boolean?\n\n") ,
        Method (Name "isInt") valCBool [] Normal (Doc "\n\nIs an integer?\n\n") ,
        Method (Name "isDouble") valCBool [] Normal (Doc "\n\nIs a double?\n\n") ,
        Method (Name "isString") valCBool [] Normal (Doc "\n\nIs a string?\n\n") ,
        Method (Name "isEmptyVector") valCBool [] Normal (Doc "\n\nIs an empty vector?\n\n") ,
        Method (Name "isIntVector") valCBool [] Normal (Doc "\n\nIs a vector of ints?\n\n") ,
        Method (Name "isDoubleVector") valCBool [] Normal (Doc "\n\nIs a vector of doubles?\n\n") ,
        Method (Name "isStringVector") valCBool [] Normal (Doc "\n\nIs a vector of strings.\n\n") ,
        Method (Name "isSharedObject") valCBool [] Normal (Doc "\n\nIs a shared object?\n\n") ,
        Method (Name "isDictionary") valCBool [] Normal (Doc "\n\nIs a shared object?\n\n") ,
        Method (Name "isFX") valCBool [] Normal (Doc "\n\nIs a shared object?\n\n") ,
        Method (Name "toBool") valCBool [] Normal (Doc "\n\nConvert to boolean.\n\n") ,
        Method (Name "toInt") valCInt [] Normal (Doc "\n\nConvert to int.\n\n") ,
        Method (Name "toDouble") valCDouble [] Normal (Doc "\n\nConvert to double.\n\n") ,
        Method (Name "operator ==") valCBool [constrefGenericType] Normal (Doc "") ,
        Method (Name "operator !=") valCBool [constrefGenericType] Normal (Doc "") ,
        Method (Name "GenericTypeBool") valGenericType [valCBool] Constructor (Doc "") ,
        Method (Name "GenericTypeInt") valGenericType [valCInt] Constructor (Doc "") ,
        Method (Name "GenericTypeDouble") valGenericType [valCDouble] Constructor (Doc "") ,
        Method (Name "GenericTypeString") valGenericType [constrefStdString] Constructor (Doc "") ,
        Method (Name "GenericTypeBoolVec") valGenericType [constrefCBoolVec] Constructor (Doc "") ,
        Method (Name "GenericTypeIntVec") valGenericType [constrefCIntVec] Constructor (Doc "") ,
        Method (Name "GenericTypeDoubleVec") valGenericType [constrefCDoubleVec] Constructor (Doc "") ,
        Method (Name "GenericTypeStringVec") valGenericType [constrefStdStringVec] Constructor (Doc "") ,
        Method (Name "GenericTypeFX") valGenericType [constrefFX] Constructor (Doc "") ,
        Method (Name "GenericTypeCallback") valGenericType [constrefCallback] Constructor (Doc "") ,
        Method (Name "GenericType") valGenericType [] Constructor (Doc "")
        --Method (Name "GenericType''''''''''") valGenericType [constrefSharedObject] Constructor (Doc "") ,
--        Method (Name "GenericType'''''''''''") valGenericType [constrefJacobianGenerator] Constructor (Doc "\n\n>  CasADi::GenericType::GenericType(NLPSolverCreator ptr)\n------------------------------------------------------------------------\n\nCreator functions.\n\n") ,
--        Method (Name "GenericType''''''''''''") valGenericType [constrefSparsityGenerator] Constructor (Doc "\n\n>  CasADi::GenericType::GenericType(NLPSolverCreator ptr)\n------------------------------------------------------------------------\n\nCreator functions.\n\n") ,
--        Method (Name "GenericType'''''''''''''") valGenericType [constrefCallback] Constructor (Doc "\n\n>  CasADi::GenericType::GenericType(NLPSolverCreator ptr)\n------------------------------------------------------------------------\n\nCreator functions.\n\n") 
      ]
    docs = Doc "\n\nGeneric data type.\n\nJoel Andersson\n\nC++ includes: generic_type.hpp "


sxfunction :: Class
sxfunction = Class SXFunction methods docs
  where
    methods =
      [
        Method (Name "jac") valSXMatrix [valCInt,valCInt,valCBool,valCBool] Normal (Doc "\n\nJacobian via source code transformation.\n\nSee:  CasADi::Jacobian for an AD approach\n\n") ,
        Method (Name "grad") valSXMatrix [valCInt,valCInt] Normal (Doc "\n\nGradient via source code transformation.\n\n") ,
        Method (Name "hess") valSXMatrix [valCInt,valCInt] Normal (Doc "\n\nHessian (forward over adjoint) via source code transformation.\n\n") ,
        Method (Name "getAlgorithmSize") valCInt [] Normal (Doc "\n\nGet the number of atomic operations.\n\n") ,
        Method (Name "getWorkSize") valCInt [] Normal (Doc "\n\nGet the length of the work vector.\n\n") ,
        Method (Name "getAtomicOperation") valCInt [valCInt] Normal (Doc "\n\nGet an atomic operation operator index.\n\n") ,
        Method (Name "getAtomicInputReal") valCDouble [valCInt] Normal (Doc "\n\nGet the floating point output argument of an atomic operation.\n\n") ,
        Method (Name "getAtomicOutput") valCInt [valCInt] Normal (Doc "\n\nGet the (integer) output argument of an atomic operation.\n\n") ,
        Method (Name "countNodes") valCInt [] Normal (Doc "\n\nNumber of nodes in the algorithm.\n\n") ,
        Method (Name "getFree") valSXVec [] Normal (Doc "\n\nGet all the free variables of the function.\n\n") ,
        Method (Name "indexed_one_based") valSXFunction [valCInt] Normal (Doc "") ,
        Method (Name "indexed_zero_based") valSXFunction [valCInt] Normal (Doc "") ,
        Method (Name "SXFunction'") valSXFunction [constrefMXFunction] Constructor (Doc "\n\n>  CasADi::SXFunction::SXFunction()\n------------------------------------------------------------------------\n\nDefault constructor.\n\n>  CasADi::SXFunction::SXFunction(const MXFunction &f)\n------------------------------------------------------------------------\n\nExpand an MXFunction.\n\n>  CasADi::SXFunction::SXFunction(const FX &f)\n------------------------------------------------------------------------\n\nExpand an FX.\n\n>  CasADi::SXFunction::SXFunction(const std::vector< SXMatrix > &arg, const std::vector< SXMatrix > &res)\n\n>  CasADi::SXFunction::SXFunction(const std::vector< SXMatrix > &arg, const IOSchemeVector< SXMatrix > &res)\n\n>  CasADi::SXFunction::SXFunction(const IOSchemeVector< SXMatrix > &arg, const std::vector< SXMatrix > &res)\n\n>  CasADi::SXFunction::SXFunction(const IOSchemeVector< SXMatrix > &arg, const IOSchemeVector< SXMatrix > &res)\n------------------------------------------------------------------------\n\nMultiple (matrix valued) input, multiple (matrix valued) output.\n\n>  CasADi::SXFunction::SXFunction(const std::vector< std::vector< SX > > &arg, const std::vector< std::vector< SX > > &res)\n------------------------------------------------------------------------\n\nMultiple (vector valued) input, multiple (vector valued) output.\n\n>  CasADi::SXFunction::SXFunction(const SXMatrix &arg, const SXMatrix &res)\n------------------------------------------------------------------------\n\nSingle (scalar/matrix/vector valued) input, single (scalar/matrix/vector\nvalued) output.\n\n>  CasADi::SXFunction::SXFunction(const std::vector< std::vector< SX > > &arg, const SXMatrix &res)\n------------------------------------------------------------------------\n\nMultiple (vector valued) input, single (scalar/vector/matrix valued) output.\n\n>  CasADi::SXFunction::SXFunction(const std::vector< SXMatrix > &arg, const SXMatrix &res)\n------------------------------------------------------------------------\n\nMultiple (matrix valued) input, single (scalar/vector/matrix valued) output.\n\n>  CasADi::SXFunction::SXFunction(const SXMatrix &arg, const std::vector< std::vector< SX > > &res)\n------------------------------------------------------------------------\n\nSingle (scalar/vector/matrix valued) input, multiple (vector valued) output.\n\n>  CasADi::SXFunction::SXFunction(const SXMatrix &arg, const std::vector< SXMatrix > &res)\n------------------------------------------------------------------------\n\nSingle (scalar/vector/matrix valued) input, multiple (matrix valued) output.\n\n") ,
        Method (Name "SXFunction''") valSXFunction [constrefFX] Constructor (Doc "\n\n>  CasADi::SXFunction::SXFunction()\n------------------------------------------------------------------------\n\nDefault constructor.\n\n>  CasADi::SXFunction::SXFunction(const MXFunction &f)\n------------------------------------------------------------------------\n\nExpand an MXFunction.\n\n>  CasADi::SXFunction::SXFunction(const FX &f)\n------------------------------------------------------------------------\n\nExpand an FX.\n\n>  CasADi::SXFunction::SXFunction(const std::vector< SXMatrix > &arg, const std::vector< SXMatrix > &res)\n\n>  CasADi::SXFunction::SXFunction(const std::vector< SXMatrix > &arg, const IOSchemeVector< SXMatrix > &res)\n\n>  CasADi::SXFunction::SXFunction(const IOSchemeVector< SXMatrix > &arg, const std::vector< SXMatrix > &res)\n\n>  CasADi::SXFunction::SXFunction(const IOSchemeVector< SXMatrix > &arg, const IOSchemeVector< SXMatrix > &res)\n------------------------------------------------------------------------\n\nMultiple (matrix valued) input, multiple (matrix valued) output.\n\n>  CasADi::SXFunction::SXFunction(const std::vector< std::vector< SX > > &arg, const std::vector< std::vector< SX > > &res)\n------------------------------------------------------------------------\n\nMultiple (vector valued) input, multiple (vector valued) output.\n\n>  CasADi::SXFunction::SXFunction(const SXMatrix &arg, const SXMatrix &res)\n------------------------------------------------------------------------\n\nSingle (scalar/matrix/vector valued) input, single (scalar/matrix/vector\nvalued) output.\n\n>  CasADi::SXFunction::SXFunction(const std::vector< std::vector< SX > > &arg, const SXMatrix &res)\n------------------------------------------------------------------------\n\nMultiple (vector valued) input, single (scalar/vector/matrix valued) output.\n\n>  CasADi::SXFunction::SXFunction(const std::vector< SXMatrix > &arg, const SXMatrix &res)\n------------------------------------------------------------------------\n\nMultiple (matrix valued) input, single (scalar/vector/matrix valued) output.\n\n>  CasADi::SXFunction::SXFunction(const SXMatrix &arg, const std::vector< std::vector< SX > > &res)\n------------------------------------------------------------------------\n\nSingle (scalar/vector/matrix valued) input, multiple (vector valued) output.\n\n>  CasADi::SXFunction::SXFunction(const SXMatrix &arg, const std::vector< SXMatrix > &res)\n------------------------------------------------------------------------\n\nSingle (scalar/vector/matrix valued) input, multiple (matrix valued) output.\n\n") ,
        Method (Name "SXFunction'''") valSXFunction [constrefSXMatrixVec,constrefSXMatrixVec] Constructor (Doc "\n\n>  CasADi::SXFunction::SXFunction()\n------------------------------------------------------------------------\n\nDefault constructor.\n\n>  CasADi::SXFunction::SXFunction(const MXFunction &f)\n------------------------------------------------------------------------\n\nExpand an MXFunction.\n\n>  CasADi::SXFunction::SXFunction(const FX &f)\n------------------------------------------------------------------------\n\nExpand an FX.\n\n>  CasADi::SXFunction::SXFunction(const std::vector< SXMatrix > &arg, const std::vector< SXMatrix > &res)\n\n>  CasADi::SXFunction::SXFunction(const std::vector< SXMatrix > &arg, const IOSchemeVector< SXMatrix > &res)\n\n>  CasADi::SXFunction::SXFunction(const IOSchemeVector< SXMatrix > &arg, const std::vector< SXMatrix > &res)\n\n>  CasADi::SXFunction::SXFunction(const IOSchemeVector< SXMatrix > &arg, const IOSchemeVector< SXMatrix > &res)\n------------------------------------------------------------------------\n\nMultiple (matrix valued) input, multiple (matrix valued) output.\n\n>  CasADi::SXFunction::SXFunction(const std::vector< std::vector< SX > > &arg, const std::vector< std::vector< SX > > &res)\n------------------------------------------------------------------------\n\nMultiple (vector valued) input, multiple (vector valued) output.\n\n>  CasADi::SXFunction::SXFunction(const SXMatrix &arg, const SXMatrix &res)\n------------------------------------------------------------------------\n\nSingle (scalar/matrix/vector valued) input, single (scalar/matrix/vector\nvalued) output.\n\n>  CasADi::SXFunction::SXFunction(const std::vector< std::vector< SX > > &arg, const SXMatrix &res)\n------------------------------------------------------------------------\n\nMultiple (vector valued) input, single (scalar/vector/matrix valued) output.\n\n>  CasADi::SXFunction::SXFunction(const std::vector< SXMatrix > &arg, const SXMatrix &res)\n------------------------------------------------------------------------\n\nMultiple (matrix valued) input, single (scalar/vector/matrix valued) output.\n\n>  CasADi::SXFunction::SXFunction(const SXMatrix &arg, const std::vector< std::vector< SX > > &res)\n------------------------------------------------------------------------\n\nSingle (scalar/vector/matrix valued) input, multiple (vector valued) output.\n\n>  CasADi::SXFunction::SXFunction(const SXMatrix &arg, const std::vector< SXMatrix > &res)\n------------------------------------------------------------------------\n\nSingle (scalar/vector/matrix valued) input, multiple (matrix valued) output.\n\n") 
      ]
    docs = Doc "" -- "\n\nDynamically created function that can be expanded into a series of scalar\noperations.\n\nJoel Andersson\n\n>List of available options\n+--------------+--------------+--------------+--------------+--------------+\n|      Id      |     Type     |   Default    | Description  |   Used in    |\n+==============+==============+==============+==============+==============+\n| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::FXIn |\n|              |              |              | calculate    | ternal       |\n|              |              |              | the          |              |\n|              |              |              | Jacobians.   |              |\n|              |              |              | (forward:    |              |\n|              |              |              | only forward |              |\n|              |              |              | mode|reverse |              |\n|              |              |              | : only       |              |\n|              |              |              | adjoint mode |              |\n|              |              |              | |automatic:  |              |\n|              |              |              | a heuristic  |              |\n|              |              |              | decides      |              |\n|              |              |              | which is     |              |\n|              |              |              | more         |              |\n|              |              |              | appropriate) |              |\n+--------------+--------------+--------------+--------------+--------------+\n| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::FXIn |\n|              |              |              | indicate     | ternal       |\n|              |              |              | wether       |              |\n|              |              |              | statistics   |              |\n|              |              |              | must be      |              |\n|              |              |              | gathered     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::FXIn |\n|              |              |              | exceptions   | ternal       |\n|              |              |              | when the     |              |\n|              |              |              | numerical    |              |\n|              |              |              | values of    |              |\n|              |              |              | the inputs   |              |\n|              |              |              | don't make   |              |\n|              |              |              | sense        |              |\n+--------------+--------------+--------------+--------------+--------------+\n| jacobian_gen | OT_JACOBIANG | GenericType( | Function     | CasADi::FXIn |\n| erator       | ENERATOR     | )            | that returns | ternal       |\n|              |              |              | a Jacobian   |              |\n|              |              |              | function     |              |\n|              |              |              | given a set  |              |\n|              |              |              | of desired   |              |\n|              |              |              | Jacobian     |              |\n|              |              |              | blocks,      |              |\n|              |              |              | overrides    |              |\n|              |              |              | internal     |              |\n|              |              |              | routines.    |              |\n|              |              |              | Check docume |              |\n|              |              |              | ntation of J |              |\n|              |              |              | acobianGener |              |\n|              |              |              | ator .       |              |\n+--------------+--------------+--------------+--------------+--------------+\n| just_in_time | OT_BOOLEAN   | false        | Just-in-time | CasADi::SXFu |\n|              |              |              | compilation  | nctionIntern |\n|              |              |              | for numeric  | al           |\n|              |              |              | evaluation ( |              |\n|              |              |              | experimental |              |\n|              |              |              | )            |              |\n+--------------+--------------+--------------+--------------+--------------+\n| just_in_time | OT_BOOLEAN   | false        | Just-in-time | CasADi::SXFu |\n| _opencl      |              |              | compilation  | nctionIntern |\n|              |              |              | for numeric  | al           |\n|              |              |              | evaluation   |              |\n|              |              |              | using OpenCL |              |\n|              |              |              | (experimenta |              |\n|              |              |              | l)           |              |\n+--------------+--------------+--------------+--------------+--------------+\n| just_in_time | OT_BOOLEAN   | false        | Propagate    | CasADi::SXFu |\n| _sparsity    |              |              | sparsity     | nctionIntern |\n|              |              |              | patterns     | al           |\n|              |              |              | using just-  |              |\n|              |              |              | in-time      |              |\n|              |              |              | compilation  |              |\n|              |              |              | to a CPU or  |              |\n|              |              |              | GPU using    |              |\n|              |              |              | OpenCL       |              |\n+--------------+--------------+--------------+--------------+--------------+\n| max_number_o | OT_INTEGER   | optimized_nu | Allow \"numbe | CasADi::FXIn |\n| f_adj_dir    |              | m_dir        | r_of_adj_dir | ternal       |\n|              |              |              | \" to grow    |              |\n|              |              |              | until it     |              |\n|              |              |              | reaches this |              |\n|              |              |              | number       |              |\n+--------------+--------------+--------------+--------------+--------------+\n| max_number_o | OT_INTEGER   | optimized_nu | Allow \"numbe | CasADi::FXIn |\n| f_fwd_dir    |              | m_dir        | r_of_fwd_dir | ternal       |\n|              |              |              | \" to grow    |              |\n|              |              |              | until it     |              |\n|              |              |              | reaches this |              |\n|              |              |              | number       |              |\n+--------------+--------------+--------------+--------------+--------------+\n| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::FXIn |\n|              | TOR          | )            | be activated | ternal       |\n|              |              |              | (inputs|outp |              |\n|              |              |              | uts)         |              |\n+--------------+--------------+--------------+--------------+--------------+\n| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |\n|              |              | red_object\"  | object       | onsFunctiona |\n|              |              |              |              | lityNode     |\n+--------------+--------------+--------------+--------------+--------------+\n| number_of_ad | OT_INTEGER   | 1            | number of    | CasADi::FXIn |\n| j_dir        |              |              | adjoint      | ternal       |\n|              |              |              | derivatives  |              |\n|              |              |              | to be        |              |\n|              |              |              | calculated s |              |\n|              |              |              | imultanously |              |\n+--------------+--------------+--------------+--------------+--------------+\n| number_of_fw | OT_INTEGER   | 1            | number of    | CasADi::FXIn |\n| d_dir        |              |              | forward      | ternal       |\n|              |              |              | derivatives  |              |\n|              |              |              | to be        |              |\n|              |              |              | calculated s |              |\n|              |              |              | imultanously |              |\n+--------------+--------------+--------------+--------------+--------------+\n| numeric_hess | OT_BOOLEAN   | false        | Calculate    | CasADi::FXIn |\n| ian          |              |              | Hessians     | ternal       |\n|              |              |              | numerically  |              |\n|              |              |              | (using       |              |\n|              |              |              | directional  |              |\n|              |              |              | derivatives) |              |\n|              |              |              | rather than  |              |\n|              |              |              | with the     |              |\n|              |              |              | built-in     |              |\n|              |              |              | method       |              |\n+--------------+--------------+--------------+--------------+--------------+\n| numeric_jaco | OT_BOOLEAN   | false        | Calculate    | CasADi::FXIn |\n| bian         |              |              | Jacobians    | ternal       |\n|              |              |              | numerically  |              |\n|              |              |              | (using       |              |\n|              |              |              | directional  |              |\n|              |              |              | derivatives) |              |\n|              |              |              | rather than  |              |\n|              |              |              | with the     |              |\n|              |              |              | built-in     |              |\n|              |              |              | method       |              |\n+--------------+--------------+--------------+--------------+--------------+\n| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::FXIn |\n| heck         |              |              | exceptions   | ternal       |\n|              |              |              | when NaN or  |              |\n|              |              |              | Inf appears  |              |\n|              |              |              | during       |              |\n|              |              |              | evaluation   |              |\n+--------------+--------------+--------------+--------------+--------------+\n| sparse       | OT_BOOLEAN   | true         | function is  | CasADi::FXIn |\n|              |              |              | sparse       | ternal       |\n+--------------+--------------+--------------+--------------+--------------+\n| sparsity_gen | OT_SPARSITYG | GenericType( | Function     | CasADi::FXIn |\n| erator       | ENERATOR     | )            | that         | ternal       |\n|              |              |              | provides     |              |\n|              |              |              | sparsity for |              |\n|              |              |              | a given      |              |\n|              |              |              | input output |              |\n|              |              |              | block,       |              |\n|              |              |              | overrides    |              |\n|              |              |              | internal     |              |\n|              |              |              | routines.    |              |\n|              |              |              | Check docume |              |\n|              |              |              | ntation of S |              |\n|              |              |              | parsityGener |              |\n|              |              |              | ator .       |              |\n+--------------+--------------+--------------+--------------+--------------+\n| store_jacobi | OT_BOOLEAN   | false        | keep         | CasADi::FXIn |\n| ans          |              |              | references   | ternal       |\n|              |              |              | to generated |              |\n|              |              |              | Jacobians in |              |\n|              |              |              | order to     |              |\n|              |              |              | avoid        |              |\n|              |              |              | generating   |              |\n|              |              |              | identical    |              |\n|              |              |              | Jacobians    |              |\n|              |              |              | multiple     |              |\n|              |              |              | times        |              |\n+--------------+--------------+--------------+--------------+--------------+\n| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::FXIn |\n|              |              | )            | defined      | ternal       |\n|              |              |              | field that   |              |\n|              |              |              | can be used  |              |\n|              |              |              | to identify  |              |\n|              |              |              | the function |              |\n|              |              |              | or pass      |              |\n|              |              |              | additional   |              |\n|              |              |              | information  |              |\n+--------------+--------------+--------------+--------------+--------------+\n| verbose      | OT_BOOLEAN   | false        | verbose      | CasADi::FXIn |\n|              |              |              | evaluation   | ternal       |\n|              |              |              | for          |              |\n|              |              |              | debugging    |              |\n+--------------+--------------+--------------+--------------+--------------+\n\nDiagrams\n\nC++ includes: sx_function.hpp "
      



fx :: Class
fx = Class FX methods docs
  where
    methods =
      [
        Method (Name "inputScheme") valIOScheme [] Normal (Doc "\n\nAccess input/output scheme.\n\n") ,
        Method (Name "outputScheme") valIOScheme [] Normal (Doc "\n\nAccess input/output scheme.\n\n") ,
        Method (Name "setInputScheme") valCVoid [constrefIOScheme] Normal (Doc "\n\nSet input scheme.\n\n") ,
        Method (Name "setOutputScheme") valCVoid [constrefIOScheme] Normal (Doc "\n\nSet output scheme.\n\n") ,
        Method (Name "getInputScheme") valIOScheme [] Normal (Doc "\n\nGet input scheme.\n\n") ,
        Method (Name "getOutputScheme") valIOScheme [] Normal (Doc "\n\nGet output scheme.\n\n") ,
        Method (Name "evaluate") valCVoid [] Normal (Doc "\n\nEvaluate.\n\n") ,
        Method (Name "solve") valCVoid [] Normal (Doc "\n\nthe same as evaluate(0,0)\n\n") ,
        Method (Name "jacobian") valFX [valCInt,valCInt,valCBool,valCBool] Normal (Doc "\n\nGenerate a Jacobian function of output oind with respect to input iind.\n\nParameters:\n-----------\n\niind:  The index of the input\n\noind:  The index of the output\n\nThe default behavior of this class is defined by the derived class. If\ncompact is set to true, only the nonzeros of the input and output\nexpressions are considered. If symmetric is set to true, the Jacobian being\ncalculated is known to be symmetric (usually a Hessian), which can be\nexploited by the algorithm.\n\nThe generated Jacobian has one more output than the calling function\ncorresponding to the Jacobian and the same number of inputs.\n\n") ,
        Method (Name "gradient") valFX [valCInt,valCInt] Normal (Doc "\n\nGenerate a gradient function of output oind with respect to input iind.\n\nParameters:\n-----------\n\niind:  The index of the input\n\noind:  The index of the output\n\nThe default behavior of this class is defined by the derived class. Note\nthat the output must be scalar. In other cases, use the Jacobian instead.\n\n") ,
        Method (Name "hessian") valFX [valCInt,valCInt] Normal (Doc "\n\nGenerate a Hessian function of output oind with respect to input iind.\n\nParameters:\n-----------\n\niind:  The index of the input\n\noind:  The index of the output\n\nThe generated Hessian has two more outputs than the calling function\ncorresponding to the Hessian and the gradients.\n\n") ,
        Method (Name "fullJacobian") valFX [] Normal (Doc "\n\nGenerate a Jacobian function of all the inputs nonzeros (\ngetNumScalarInputs()) with respect to all the output nonzeros (\ngetNumScalarOutputs()).\n\n") ,
        Method (Name "call") valMXVec [constrefMXVec] Normal (Doc "\n\n>  vector< MX > CasADi::FX::call(const MX &arg)\n------------------------------------------------------------------------\n\nCreate a function call (single input)\n\n>  std::vector<MX> CasADi::FX::call(const std::vector< MX > &arg)\n------------------------------------------------------------------------\n\nCreate a function call ( MX graph)\n\n>  void CasADi::FX::call(const MXVector &arg, MXVector &res, const MXVectorVector &fseed, MXVectorVector &fsens, const MXVectorVector &aseed, MXVectorVector &asens)\n------------------------------------------------------------------------\n\nCreate a function call with directional derivatives Note: return by\nreference with SWIG.\n\n>  std::vector<std::vector<MX> > CasADi::FX::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())\n------------------------------------------------------------------------\n\nEvaluate symbolically in parallel (matrix graph) paropt: Set of options to\nbe passed to the Parallelizer.\n\n") ,
        Method (Name "call''") valMXVecVec [constrefMXVecVec] Normal (Doc "\n\n>  vector< MX > CasADi::FX::call(const MX &arg)\n------------------------------------------------------------------------\n\nCreate a function call (single input)\n\n>  std::vector<MX> CasADi::FX::call(const std::vector< MX > &arg)\n------------------------------------------------------------------------\n\nCreate a function call ( MX graph)\n\n>  void CasADi::FX::call(const MXVector &arg, MXVector &res, const MXVectorVector &fseed, MXVectorVector &fsens, const MXVectorVector &aseed, MXVectorVector &asens)\n------------------------------------------------------------------------\n\nCreate a function call with directional derivatives Note: return by\nreference with SWIG.\n\n>  std::vector<std::vector<MX> > CasADi::FX::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())\n------------------------------------------------------------------------\n\nEvaluate symbolically in parallel (matrix graph) paropt: Set of options to\nbe passed to the Parallelizer.\n\n") ,
        Method (Name "evalMX") valMXVec [constrefMXVec] Normal (Doc "\n\n>  std::vector<MX> CasADi::FX::evalMX(const std::vector< MX > &arg)\n------------------------------------------------------------------------\n\nevaluate symbolically, MX type (unambiguous)\n\n>  void CasADi::FX::evalMX(const MXVector &arg, MXVector &res, const MXVectorVector &fseed, MXVectorVector &fsens, const MXVectorVector &aseed, MXVectorVector &asens)\n------------------------------------------------------------------------\n\nEvaluate symbolically with with directional derivatives, MX type The first\ntwo arguments are the nondifferentiated inputs and results of the\nevaluation, the next two arguments are a set of forward directional seeds\nand the resulting forward directional derivatives, the length of the vector\nbeing the number of forward directions. The next two arguments are a set of\nadjoint directional seeds and the resulting adjoint directional derivatives,\nthe length of the vector being the number of adjoint directions.\n\n") ,
        Method (Name "evalSX") valSXMatrixVec [constrefSXMatrixVec] Normal (Doc "\n\n>  std::vector<SXMatrix> CasADi::FX::evalSX(const std::vector< SXMatrix > &arg)\n------------------------------------------------------------------------\n\nevaluate symbolically, SX type (unambiguous)\n\n>  void CasADi::FX::evalSX(const SXMatrixVector &arg, SXMatrixVector &res, const SXMatrixVectorVector &fseed, SXMatrixVectorVector &fsens, const SXMatrixVectorVector &aseed, SXMatrixVectorVector &asens)\n------------------------------------------------------------------------\n\nEvaluate symbolically with with directional derivatives, SX type The first\ntwo arguments are the nondifferentiated inputs and results of the\nevaluation, the next two arguments are a set of forward directional seeds\nand the resulting forward directional derivatives, the length of the vector\nbeing the number of forward directions. The next two arguments are a set of\nadjoint directional seeds and the resulting adjoint directional derivatives,\nthe length of the vector being the number of adjoint directions.\n\n") ,
--        Method (Name "derivative") valFX [valCInt,valCInt] Normal (Doc "\n\nGet a function that calculates nfwd forward derivatives and nadj adjoint\nderivatives Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and\n(1+nfwd)*n_out + nadj*n_in outputs. The first n_in inputs corresponds to\nnondifferentiated inputs. The next nfwd*n_in inputs corresponds to forward\nseeds, one direction at a time and the last nadj*n_out inputs corresponds to\nadjoint seeds, one direction at a time. The first n_out outputs corresponds\nto nondifferentiated outputs. The next nfwd*n_out outputs corresponds to\nforward sensitivities, one direction at a time and the last nadj*n_in\noutputs corresponds to adjoint sensitivties, one direction at a time.\n\n(n_in = getNumInputs(), n_out = getNumOutputs())\n\nThe functions returned are cached, meaning that if called multiple timed\nwith the same value, then multiple references to the same function will be\nreturned.\n\n") ,
        Method (Name "generateCode") valCVoid [constrefStdString] Normal (Doc "\n\nExport / Generate C code for the function.\n\n") ,
        Method (Name "checkNode") valCBool [] Normal (Doc "\n\nCheck if the node is pointing to the right type of object.\n\n") ,
        Method (Name "getStat") valGenericType [constrefStdString] Normal (Doc "\n\nGet a single statistic obtained at the end of the last evaluate call.\n\n") ,
        Method (Name "symbolicInput") valMXVec [] Normal (Doc "\n\nGet a vector of symbolic variables with the same dimensions as the inputs\nThere is no guarantee that consecutive calls return identical objects.\n\n") ,
        Method (Name "symbolicInputSX") valSXMatrixVec [] Normal (Doc "\n\nGet a vector of symbolic variables with the same dimensions as the inputs,\nSX graph There is no guarantee that consecutive calls return identical\nobjects.\n\n") ,
        Method (Name "addMonitor") valCVoid [constrefStdString] Normal (Doc "\n\nAdd modules to be monitored.\n\n") ,
        Method (Name "removeMonitor") valCVoid [constrefStdString] Normal (Doc "\n\nRemove modules to be monitored.\n\n") ,
        Method (Name "checkInputs") valCVoid [] Normal (Doc "\n\nCheck if the numerical values of the supplied bounds make sense.\n\n")
      ]
    docs = Doc "\n\nGeneral function.\n\nA general function $f$ in casadi can be multi-input, multi-output.  Number\nof inputs: nin getNumInputs()  Number of outputs: nout getNumOutputs()\n\nWe can view this function as a being composed of a (nin, nout) grid of\nsingle-input, single-output primitive functions.  Each such primitive\nfunction $f_{i,j} \\\\forall i \\\\in [0,nin-1], j \\\\in [0,nout-1]$ can\nmap as $\\\\mathbf{R}^{n,m}\\\\to\\\\mathbf{R}^{p,q}$, in which n,m,p,q can\ntake different values for every (i,j) pair.\n\nWhen passing input, you specify which partition i is active. You pass the\nnumbers flattened, as a vector of size $(n*m)$.  When requesting output, you\nspecify which partition j is active. You get the numbers flattened, as a\nvector of size $(p*q)$.\n\nTo calculate jacobians, you need to have $(m=1,q=1)$.\n\nWrite the jacobian as $J_{i,j} = \\\\nabla f_{i,j} = \\\\frac{\\\\partial\nf_{i,j}(\\\\vec{x})}{\\\\partial \\\\vec{x}}$.\n\nUsing $\\\\vec{v} \\\\in \\\\mathbf{R}^n$ as a forward seed: setFwdSeed(v,i)\nRetrieving $\\\\vec{s}_f \\\\in \\\\mathbf{R}^p$ from: getFwdSens(sf,j)\n\nUsing $\\\\vec{w} \\\\in \\\\mathbf{R}^p$ as a forward seed: setAdjSeed(w,j)\nRetrieving $\\\\vec{s}_a \\\\in \\\\mathbf{R}^n $ from: getAdjSens(sa,i)\n\nWe have the following relationships for function mapping from a column\nvector to a column vector:\n\n$ \\\\vec{s}_f = \\\\nabla f_{i,j} . \\\\vec{v}$ $ \\\\vec{s}_a = (\\\\nabla\nf_{i,j})^T . \\\\vec{w}$\n\nSome quantities is these formulas must be transposed:  input row: transpose\n$ \\\\vec{v} $ and $\\\\vec{s}_a$  output row: transpose $ \\\\vec{w} $ and\n$\\\\vec{s}_f$\n\nNOTE: FX's are allowed to modify their input arguments when evaluating:\nimplicitFunction, IDAS solver Futher releases may disallow this. for\ndevelopers Each function consists of 4 files: public class header file:\nimported in python\n\npublic class implementation\n\ninternal class header file: should only be used by derived classes\n\ninternal class implementation\n\npython and c++ should be 1-to-1  There should be no extra features in 1.\nAll the functionality should exist in 1.  If it means that c++ will be more\n\"pythonic\", so be it.\n\nJoel Andersson\n\n>List of available options\n+--------------+--------------+--------------+--------------+--------------+\n|      Id      |     Type     |   Default    | Description  |   Used in    |\n+==============+==============+==============+==============+==============+\n| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::FXIn |\n|              |              |              | calculate    | ternal       |\n|              |              |              | the          |              |\n|              |              |              | Jacobians.   |              |\n|              |              |              | (forward:    |              |\n|              |              |              | only forward |              |\n|              |              |              | mode|reverse |              |\n|              |              |              | : only       |              |\n|              |              |              | adjoint mode |              |\n|              |              |              | |automatic:  |              |\n|              |              |              | a heuristic  |              |\n|              |              |              | decides      |              |\n|              |              |              | which is     |              |\n|              |              |              | more         |              |\n|              |              |              | appropriate) |              |\n+--------------+--------------+--------------+--------------+--------------+\n| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::FXIn |\n|              |              |              | indicate     | ternal       |\n|              |              |              | wether       |              |\n|              |              |              | statistics   |              |\n|              |              |              | must be      |              |\n|              |              |              | gathered     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::FXIn |\n|              |              |              | exceptions   | ternal       |\n|              |              |              | when the     |              |\n|              |              |              | numerical    |              |\n|              |              |              | values of    |              |\n|              |              |              | the inputs   |              |\n|              |              |              | don't make   |              |\n|              |              |              | sense        |              |\n+--------------+--------------+--------------+--------------+--------------+\n| jacobian_gen | OT_JACOBIANG | GenericType( | Function     | CasADi::FXIn |\n| erator       | ENERATOR     | )            | that returns | ternal       |\n|              |              |              | a Jacobian   |              |\n|              |              |              | function     |              |\n|              |              |              | given a set  |              |\n|              |              |              | of desired   |              |\n|              |              |              | Jacobian     |              |\n|              |              |              | blocks,      |              |\n|              |              |              | overrides    |              |\n|              |              |              | internal     |              |\n|              |              |              | routines.    |              |\n|              |              |              | Check docume |              |\n|              |              |              | ntation of J |              |\n|              |              |              | acobianGener |              |\n|              |              |              | ator .       |              |\n+--------------+--------------+--------------+--------------+--------------+\n| max_number_o | OT_INTEGER   | optimized_nu | Allow \"numbe | CasADi::FXIn |\n| f_adj_dir    |              | m_dir        | r_of_adj_dir | ternal       |\n|              |              |              | \" to grow    |              |\n|              |              |              | until it     |              |\n|              |              |              | reaches this |              |\n|              |              |              | number       |              |\n+--------------+--------------+--------------+--------------+--------------+\n| max_number_o | OT_INTEGER   | optimized_nu | Allow \"numbe | CasADi::FXIn |\n| f_fwd_dir    |              | m_dir        | r_of_fwd_dir | ternal       |\n|              |              |              | \" to grow    |              |\n|              |              |              | until it     |              |\n|              |              |              | reaches this |              |\n|              |              |              | number       |              |\n+--------------+--------------+--------------+--------------+--------------+\n| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::FXIn |\n|              | TOR          | )            | be activated | ternal       |\n|              |              |              | (inputs|outp |              |\n|              |              |              | uts)         |              |\n+--------------+--------------+--------------+--------------+--------------+\n| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |\n|              |              | red_object\"  | object       | onsFunctiona |\n|              |              |              |              | lityNode     |\n+--------------+--------------+--------------+--------------+--------------+\n| number_of_ad | OT_INTEGER   | 1            | number of    | CasADi::FXIn |\n| j_dir        |              |              | adjoint      | ternal       |\n|              |              |              | derivatives  |              |\n|              |              |              | to be        |              |\n|              |              |              | calculated s |              |\n|              |              |              | imultanously |              |\n+--------------+--------------+--------------+--------------+--------------+\n| number_of_fw | OT_INTEGER   | 1            | number of    | CasADi::FXIn |\n| d_dir        |              |              | forward      | ternal       |\n|              |              |              | derivatives  |              |\n|              |              |              | to be        |              |\n|              |              |              | calculated s |              |\n|              |              |              | imultanously |              |\n+--------------+--------------+--------------+--------------+--------------+\n| numeric_hess | OT_BOOLEAN   | false        | Calculate    | CasADi::FXIn |\n| ian          |              |              | Hessians     | ternal       |\n|              |              |              | numerically  |              |\n|              |              |              | (using       |              |\n|              |              |              | directional  |              |\n|              |              |              | derivatives) |              |\n|              |              |              | rather than  |              |\n|              |              |              | with the     |              |\n|              |              |              | built-in     |              |\n|              |              |              | method       |              |\n+--------------+--------------+--------------+--------------+--------------+\n| numeric_jaco | OT_BOOLEAN   | false        | Calculate    | CasADi::FXIn |\n| bian         |              |              | Jacobians    | ternal       |\n|              |              |              | numerically  |              |\n|              |              |              | (using       |              |\n|              |              |              | directional  |              |\n|              |              |              | derivatives) |              |\n|              |              |              | rather than  |              |\n|              |              |              | with the     |              |\n|              |              |              | built-in     |              |\n|              |              |              | method       |              |\n+--------------+--------------+--------------+--------------+--------------+\n| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::FXIn |\n| heck         |              |              | exceptions   | ternal       |\n|              |              |              | when NaN or  |              |\n|              |              |              | Inf appears  |              |\n|              |              |              | during       |              |\n|              |              |              | evaluation   |              |\n+--------------+--------------+--------------+--------------+--------------+\n| sparse       | OT_BOOLEAN   | true         | function is  | CasADi::FXIn |\n|              |              |              | sparse       | ternal       |\n+--------------+--------------+--------------+--------------+--------------+\n| sparsity_gen | OT_SPARSITYG | GenericType( | Function     | CasADi::FXIn |\n| erator       | ENERATOR     | )            | that         | ternal       |\n|              |              |              | provides     |              |\n|              |              |              | sparsity for |              |\n|              |              |              | a given      |              |\n|              |              |              | input output |              |\n|              |              |              | block,       |              |\n|              |              |              | overrides    |              |\n|              |              |              | internal     |              |\n|              |              |              | routines.    |              |\n|              |              |              | Check docume |              |\n|              |              |              | ntation of S |              |\n|              |              |              | parsityGener |              |\n|              |              |              | ator .       |              |\n+--------------+--------------+--------------+--------------+--------------+\n| store_jacobi | OT_BOOLEAN   | false        | keep         | CasADi::FXIn |\n| ans          |              |              | references   | ternal       |\n|              |              |              | to generated |              |\n|              |              |              | Jacobians in |              |\n|              |              |              | order to     |              |\n|              |              |              | avoid        |              |\n|              |              |              | generating   |              |\n|              |              |              | identical    |              |\n|              |              |              | Jacobians    |              |\n|              |              |              | multiple     |              |\n|              |              |              | times        |              |\n+--------------+--------------+--------------+--------------+--------------+\n| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::FXIn |\n|              |              | )            | defined      | ternal       |\n|              |              |              | field that   |              |\n|              |              |              | can be used  |              |\n|              |              |              | to identify  |              |\n|              |              |              | the function |              |\n|              |              |              | or pass      |              |\n|              |              |              | additional   |              |\n|              |              |              | information  |              |\n+--------------+--------------+--------------+--------------+--------------+\n| verbose      | OT_BOOLEAN   | false        | verbose      | CasADi::FXIn |\n|              |              |              | evaluation   | ternal       |\n|              |              |              | for          |              |\n|              |              |              | debugging    |              |\n+--------------+--------------+--------------+--------------+--------------+\n\n>List of available monitors\n+---------+--------------------+\n|   Id    |      Used in       |\n+=========+====================+\n| inputs  | CasADi::FXInternal |\n+---------+--------------------+\n| outputs | CasADi::FXInternal |\n+---------+--------------------+\n\nDiagrams\n\nC++ includes: fx.hpp "


sharedobject :: Class
sharedobject = Class SharedObject methods docs
  where
    methods =
      [
        Method (Name "printPtr") valCVoid [refStdOstream] Normal (Doc "\n\nPrint the pointer to the internal class.\n\n") ,
        Method (Name "printPtr'") valCVoid [] Normal (Doc "\n\nPrint the pointer to the internal class.\n\n") ,
        Method (Name "init") valCVoid [] Normal (Doc "\n\nInitialize or re-initialize the object: more documentation in the node class\n( SharedObjectNode and derived classes)\n\n") ,
        Method (Name "isInit") valCBool [] Normal (Doc "\n\nIs initialized?\n\n") ,
        Method (Name "assertInit") valCVoid [] Normal (Doc "\n\nAssert that it is initialized.\n\n") ,
        Method (Name "checkNode") valCBool [] Normal (Doc "\n\nAssert that the node is pointing to the right type of object.\n\n") ,
        Method (Name "makeUnique") valCVoid [valCBool] Normal (Doc "\n\nIf there are other references to the object, then make a deep copy of it and\npoint to this new object.\n\n") ,
        Method (Name "makeUnique'") valCVoid [] Normal (Doc "\n\nIf there are other references to the object, then make a deep copy of it and\npoint to this new object.\n\n") 
      ]
    docs = Doc "\n\nSharedObject implements a reference counting framework simular for effient\nand easily-maintained memory management.\n\nTo use the class, both the SharedObject class (the public class), and the\nSharedObjectNode class (the internal class) must be inherited from. It can\nbe done in two different files and together with memory management, this\napproach provides a clear destinction of which methods of the class are to\nbe considered \"public\", i.e. methods for public use that can be considered\nto remain over time with small changes, and the internal memory.\n\nWhen interfacing a software, which typically includes including some header\nfile, this is best done only in the file where the internal class is\ndefined, to avoid polluting the global namespace and other side effects.\n\nThe default constructor always means creating a null pointer to an internal\nclass only. To allocate an internal class (this works only when the internal\nclass isn't abstract), use the constructor with arguments.\n\nThe copy constructor and the assignment operator perform shallow copies\nonly, to make a deep copy you must use the clone method explictly. This will\ngive a shared pointer instance.\n\nIn an inheritance hierarchy, you can cast down automatically, e.g. (\nSXFunction is a child class of FX): SXFunction derived(...); FX base =\nderived;\n\nTo cast up, use the shared_cast template function, which works analogously\nto dynamic_cast, static_cast, const_cast etc, e.g.: SXFunction derived(...);\nFX base = derived; SXFunction derived_from_base =\nshared_cast<SXFunction>(base);\n\nA failed shared_cast will result in a null pointer (cf. dynamic_cast)\n\nJoel Andersson\n\nC++ includes: shared_object.hpp "



mxfunction :: Class
mxfunction = Class MXFunction methods docs
  where
    methods =
      [
        Method (Name "getAlgorithmSize") valCInt [] Normal (Doc "\n\nGet the number of atomic operations.\n\n") ,
        Method (Name "getWorkSize") valCInt [] Normal (Doc "\n\nGet the length of the work vector.\n\n") ,
        Method (Name "countNodes") valCInt [] Normal (Doc "\n\nNumber of nodes in the algorithm.\n\n") ,
        Method (Name "checkNode") valCBool [] Normal (Doc "\n\nCheck if the node is pointing to the right type of object.\n\n") ,
        Method (Name "jac") valMX [valCInt,valCInt,valCBool,valCBool] Normal (Doc "\n\nJacobian via source code transformation.\n\n") ,
        Method (Name "grad") valMX [valCInt,valCInt] Normal (Doc "\n\nGradient via source code transformation.\n\n") ,
        Method (Name "getFree") valMXVec [] Normal (Doc "\n\nGet all the free variables of the function.\n\n") ,
        Method (Name "generateLiftingFunctions") valCVoid [refMXFunction,refMXFunction] Normal (Doc "\n\nExtract the functions needed for the Lifted Newton method.\n\n") ,
        Method (Name "MXFunction'") valMXFunction [constrefFX] Constructor (Doc "\n\n>  CasADi::MXFunction::MXFunction()\n------------------------------------------------------------------------\n\nDefault constructor.\n\n>  CasADi::MXFunction::MXFunction(const FX &fx)\n------------------------------------------------------------------------\n\nAttempt to form an MXFunction out of an FX.\n\n>  CasADi::MXFunction::MXFunction(const MX &input, const MX &output)\n------------------------------------------------------------------------\n\nSingle input, single output.\n\n>  CasADi::MXFunction::MXFunction(const MX &input, const std::vector< MX > &output)\n------------------------------------------------------------------------\n\nSingle input, multiple output.\n\n>  CasADi::MXFunction::MXFunction(const std::vector< MX > &input, const MX &output)\n------------------------------------------------------------------------\n\nMultiple input, single output.\n\n>  CasADi::MXFunction::MXFunction(const std::vector< MX > &input, const std::vector< MX > &output)\n\n>  CasADi::MXFunction::MXFunction(const std::vector< MX > &input, const IOSchemeVector< MX > &output)\n\n>  CasADi::MXFunction::MXFunction(const IOSchemeVector< MX > &input, const std::vector< MX > &output)\n\n>  CasADi::MXFunction::MXFunction(const IOSchemeVector< MX > &input, const IOSchemeVector< MX > &output)\n------------------------------------------------------------------------\n\nMultiple input, multiple output.\n\n") ,
        Method (Name "MXFunction") valMXFunction [constrefMXVec,constrefMXVec] Constructor (Doc "\n\n>  CasADi::MXFunction::MXFunction()\n------------------------------------------------------------------------\n\nDefault constructor.\n\n>  CasADi::MXFunction::MXFunction(const FX &fx)\n------------------------------------------------------------------------\n\nAttempt to form an MXFunction out of an FX.\n\n>  CasADi::MXFunction::MXFunction(const MX &input, const MX &output)\n------------------------------------------------------------------------\n\nSingle input, single output.\n\n>  CasADi::MXFunction::MXFunction(const MX &input, const std::vector< MX > &output)\n------------------------------------------------------------------------\n\nSingle input, multiple output.\n\n>  CasADi::MXFunction::MXFunction(const std::vector< MX > &input, const MX &output)\n------------------------------------------------------------------------\n\nMultiple input, single output.\n\n>  CasADi::MXFunction::MXFunction(const std::vector< MX > &input, const std::vector< MX > &output)\n\n>  CasADi::MXFunction::MXFunction(const std::vector< MX > &input, const IOSchemeVector< MX > &output)\n\n>  CasADi::MXFunction::MXFunction(const IOSchemeVector< MX > &input, const std::vector< MX > &output)\n\n>  CasADi::MXFunction::MXFunction(const IOSchemeVector< MX > &input, const IOSchemeVector< MX > &output)\n------------------------------------------------------------------------\n\nMultiple input, multiple output.\n\n")
      ]
    docs = Doc "\n\nGeneral function mapping from/to MX.\n\nJoel Andersson\n\n>List of available options\n+--------------+--------------+--------------+--------------+--------------+\n|      Id      |     Type     |   Default    | Description  |   Used in    |\n+==============+==============+==============+==============+==============+\n| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::FXIn |\n|              |              |              | calculate    | ternal       |\n|              |              |              | the          |              |\n|              |              |              | Jacobians.   |              |\n|              |              |              | (forward:    |              |\n|              |              |              | only forward |              |\n|              |              |              | mode|reverse |              |\n|              |              |              | : only       |              |\n|              |              |              | adjoint mode |              |\n|              |              |              | |automatic:  |              |\n|              |              |              | a heuristic  |              |\n|              |              |              | decides      |              |\n|              |              |              | which is     |              |\n|              |              |              | more         |              |\n|              |              |              | appropriate) |              |\n+--------------+--------------+--------------+--------------+--------------+\n| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::FXIn |\n|              |              |              | indicate     | ternal       |\n|              |              |              | wether       |              |\n|              |              |              | statistics   |              |\n|              |              |              | must be      |              |\n|              |              |              | gathered     |              |\n+--------------+--------------+--------------+--------------+--------------+\n| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::FXIn |\n|              |              |              | exceptions   | ternal       |\n|              |              |              | when the     |              |\n|              |              |              | numerical    |              |\n|              |              |              | values of    |              |\n|              |              |              | the inputs   |              |\n|              |              |              | don't make   |              |\n|              |              |              | sense        |              |\n+--------------+--------------+--------------+--------------+--------------+\n| jacobian_gen | OT_JACOBIANG | GenericType( | Function     | CasADi::FXIn |\n| erator       | ENERATOR     | )            | that returns | ternal       |\n|              |              |              | a Jacobian   |              |\n|              |              |              | function     |              |\n|              |              |              | given a set  |              |\n|              |              |              | of desired   |              |\n|              |              |              | Jacobian     |              |\n|              |              |              | blocks,      |              |\n|              |              |              | overrides    |              |\n|              |              |              | internal     |              |\n|              |              |              | routines.    |              |\n|              |              |              | Check docume |              |\n|              |              |              | ntation of J |              |\n|              |              |              | acobianGener |              |\n|              |              |              | ator .       |              |\n+--------------+--------------+--------------+--------------+--------------+\n| max_number_o | OT_INTEGER   | optimized_nu | Allow \"numbe | CasADi::FXIn |\n| f_adj_dir    |              | m_dir        | r_of_adj_dir | ternal       |\n|              |              |              | \" to grow    |              |\n|              |              |              | until it     |              |\n|              |              |              | reaches this |              |\n|              |              |              | number       |              |\n+--------------+--------------+--------------+--------------+--------------+\n| max_number_o | OT_INTEGER   | optimized_nu | Allow \"numbe | CasADi::FXIn |\n| f_fwd_dir    |              | m_dir        | r_of_fwd_dir | ternal       |\n|              |              |              | \" to grow    |              |\n|              |              |              | until it     |              |\n|              |              |              | reaches this |              |\n|              |              |              | number       |              |\n+--------------+--------------+--------------+--------------+--------------+\n| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::FXIn |\n|              | TOR          | )            | be activated | ternal       |\n|              |              |              | (inputs|outp |              |\n|              |              |              | uts)         |              |\n+--------------+--------------+--------------+--------------+--------------+\n| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |\n|              |              | red_object\"  | object       | onsFunctiona |\n|              |              |              |              | lityNode     |\n+--------------+--------------+--------------+--------------+--------------+\n| number_of_ad | OT_INTEGER   | 1            | number of    | CasADi::FXIn |\n| j_dir        |              |              | adjoint      | ternal       |\n|              |              |              | derivatives  |              |\n|              |              |              | to be        |              |\n|              |              |              | calculated s |              |\n|              |              |              | imultanously |              |\n+--------------+--------------+--------------+--------------+--------------+\n| number_of_fw | OT_INTEGER   | 1            | number of    | CasADi::FXIn |\n| d_dir        |              |              | forward      | ternal       |\n|              |              |              | derivatives  |              |\n|              |              |              | to be        |              |\n|              |              |              | calculated s |              |\n|              |              |              | imultanously |              |\n+--------------+--------------+--------------+--------------+--------------+\n| numeric_hess | OT_BOOLEAN   | false        | Calculate    | CasADi::FXIn |\n| ian          |              |              | Hessians     | ternal       |\n|              |              |              | numerically  |              |\n|              |              |              | (using       |              |\n|              |              |              | directional  |              |\n|              |              |              | derivatives) |              |\n|              |              |              | rather than  |              |\n|              |              |              | with the     |              |\n|              |              |              | built-in     |              |\n|              |              |              | method       |              |\n+--------------+--------------+--------------+--------------+--------------+\n| numeric_jaco | OT_BOOLEAN   | false        | Calculate    | CasADi::FXIn |\n| bian         |              |              | Jacobians    | ternal       |\n|              |              |              | numerically  |              |\n|              |              |              | (using       |              |\n|              |              |              | directional  |              |\n|              |              |              | derivatives) |              |\n|              |              |              | rather than  |              |\n|              |              |              | with the     |              |\n|              |              |              | built-in     |              |\n|              |              |              | method       |              |\n+--------------+--------------+--------------+--------------+--------------+\n| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::FXIn |\n| heck         |              |              | exceptions   | ternal       |\n|              |              |              | when NaN or  |              |\n|              |              |              | Inf appears  |              |\n|              |              |              | during       |              |\n|              |              |              | evaluation   |              |\n+--------------+--------------+--------------+--------------+--------------+\n| sparse       | OT_BOOLEAN   | true         | function is  | CasADi::FXIn |\n|              |              |              | sparse       | ternal       |\n+--------------+--------------+--------------+--------------+--------------+\n| sparsity_gen | OT_SPARSITYG | GenericType( | Function     | CasADi::FXIn |\n| erator       | ENERATOR     | )            | that         | ternal       |\n|              |              |              | provides     |              |\n|              |              |              | sparsity for |              |\n|              |              |              | a given      |              |\n|              |              |              | input output |              |\n|              |              |              | block,       |              |\n|              |              |              | overrides    |              |\n|              |              |              | internal     |              |\n|              |              |              | routines.    |              |\n|              |              |              | Check docume |              |\n|              |              |              | ntation of S |              |\n|              |              |              | parsityGener |              |\n|              |              |              | ator .       |              |\n+--------------+--------------+--------------+--------------+--------------+\n| store_jacobi | OT_BOOLEAN   | false        | keep         | CasADi::FXIn |\n| ans          |              |              | references   | ternal       |\n|              |              |              | to generated |              |\n|              |              |              | Jacobians in |              |\n|              |              |              | order to     |              |\n|              |              |              | avoid        |              |\n|              |              |              | generating   |              |\n|              |              |              | identical    |              |\n|              |              |              | Jacobians    |              |\n|              |              |              | multiple     |              |\n|              |              |              | times        |              |\n+--------------+--------------+--------------+--------------+--------------+\n| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::FXIn |\n|              |              | )            | defined      | ternal       |\n|              |              |              | field that   |              |\n|              |              |              | can be used  |              |\n|              |              |              | to identify  |              |\n|              |              |              | the function |              |\n|              |              |              | or pass      |              |\n|              |              |              | additional   |              |\n|              |              |              | information  |              |\n+--------------+--------------+--------------+--------------+--------------+\n| verbose      | OT_BOOLEAN   | false        | verbose      | CasADi::FXIn |\n|              |              |              | evaluation   | ternal       |\n|              |              |              | for          |              |\n|              |              |              | debugging    |              |\n+--------------+--------------+--------------+--------------+--------------+\n\nDiagrams\n\nC++ includes: mx_function.hpp "

printableobject :: Class
printableobject = Class PrintableObject methods docs
  where
    methods =
      [
        Method (Name "getRepresentation") valStdString [] Normal (Doc "\n\nReturn a string with a representation (for SWIG)\n\n") ,
        Method (Name "getDescription") valStdString [] Normal (Doc "\n\nReturn a string with a destription (for SWIG)\n\n") 
      ]
    docs = Doc "\n\nBase class for objects that have a natural string representation.\n\nJoel Andersson\n\nC++ includes: printable_object.hpp "




crssparsity :: Class
crssparsity = Class CRSSparsity methods docs
  where
    methods =
      [
        Method (Name "size1") valCInt [] Normal (Doc "\n\nGet the number of rows.\n\n") ,
        Method (Name "size2") valCInt [] Normal (Doc "\n\nGet the number of columns.\n\n") ,
        Method (Name "numel") valCInt [] Normal (Doc "\n\nThe total number of elements, including structural zeros, i.e.\nsize1()*size2()\n\nSee:   size()\n\n") ,
        Method (Name "empty") valCBool [] Normal (Doc "\n\nCheck if the sparsity is empty, i.e. one of its dimensions is 0.\n\n") ,
        Method (Name "null") valCBool [] Normal (Doc "\n\nCheck if the sparsity is null, i.e. dimension is 0-by-0.\n\n") ,
        Method (Name "size") valCInt [] Normal (Doc "\n\nGet the number of (structural) non-zeros.\n\nSee:   numel()\n\n") ,
        Method (Name "sizeU") valCInt [] Normal (Doc "\n\nNumber of non-zeros in the upper triangular half, i.e. the number of\nelements (i,j) with j>=i.\n\n") ,
        Method (Name "sizeL") valCInt [] Normal (Doc "\n\nNumber of non-zeros in the lower triangular half, i.e. the number of\nelements (i,j) with j<=i.\n\n") ,
        Method (Name "sizeD") valCInt [] Normal (Doc "\n\nNumber of non-zeros on the diagonal, i.e. the number of elements (i,j) with\nj==i.\n\n") ,
        Method (Name "col") valCInt [valCInt] Normal (Doc "\n\n>  const vector< int > & CasADi::CRSSparsity::col() const \n------------------------------------------------------------------------\n\nGet a reference to col-vector, containing columns for all non-zero elements\n(see class description)\n\n>  int CasADi::CRSSparsity::col(int el) const \n------------------------------------------------------------------------\n\nGet the column of a non-zero element.\n\n") ,
        Method (Name "rowind") valCInt [valCInt] Normal (Doc "\n\n>  const vector< int > & CasADi::CRSSparsity::rowind() const \n------------------------------------------------------------------------\n\nGet a reference to the rowindex of all row element (see class description)\n\n>  int CasADi::CRSSparsity::rowind(int i) const \n------------------------------------------------------------------------\n\nGet a reference to the rowindex of row i (see class description)\n\n") ,
        Method (Name "colRef") valCIntVec [] Normal (Doc "\n\nGet a reference to the columns of all non-zero element (copy if not unique!)\n\n") ,
        Method (Name "rowindRef") valCIntVec [] Normal (Doc "\n\nGet a reference to the rowindex of all row element (copy if not unique!)\n\n") ,
        Method (Name "getRow") valCIntVec [] Normal (Doc "\n\nGet the row for each non-zero entry Together with the col-vector, this\nvector gives the sparsity of the matrix in sparse triplet format, i.e. the\nrow and column for each non-zero elements.\n\n") ,
        Method (Name "getNZ") valCInt [valCInt,valCInt] Normal (Doc "\n\n>  int CasADi::CRSSparsity::getNZ(int i, int j)\n------------------------------------------------------------------------\n\nGet the index of a non-zero element Add the element if it does not exist and\ncopy object if it's not unique.\n\n>  int CasADi::CRSSparsity::getNZ(int i, int j) const \n------------------------------------------------------------------------\n\nGet the index of an existing non-zero element return -1 if the element does\nnot exists.\n\n>  std::vector<int> CasADi::CRSSparsity::getNZ(const std::vector< int > &ii, const std::vector< int > &jj) const \n------------------------------------------------------------------------\n\nGet a set of non-zero element return -1 if the element does not exists.\n\n") ,
        Method (Name "getNZ''") valCIntVec [constrefCIntVec,constrefCIntVec] Normal (Doc "\n\n>  int CasADi::CRSSparsity::getNZ(int i, int j)\n------------------------------------------------------------------------\n\nGet the index of a non-zero element Add the element if it does not exist and\ncopy object if it's not unique.\n\n>  int CasADi::CRSSparsity::getNZ(int i, int j) const \n------------------------------------------------------------------------\n\nGet the index of an existing non-zero element return -1 if the element does\nnot exists.\n\n>  std::vector<int> CasADi::CRSSparsity::getNZ(const std::vector< int > &ii, const std::vector< int > &jj) const \n------------------------------------------------------------------------\n\nGet a set of non-zero element return -1 if the element does not exists.\n\n") ,
        Method (Name "hasNZ") valCBool [valCInt,valCInt] Normal (Doc "\n\nReturns true if the pattern has a non-zero at location i,j.\n\n") ,
        Method (Name "getNZInplace") valCVoid [refCIntVec] Normal (Doc "\n\nGet the nonzero index for a set of elements The index vector is used both\nfor input and outputs and must be sorted by increasing nonzero index, i.e.\nrow-wise. Elements not found in the sparsity pattern are set to -1.\n\n") ,
        Method (Name "columnsSequential") valCBool [valCBool] Normal (Doc "\n\nDoes the columns appear sequentially on each row (if strictly==true, then do\nnot allow multiple entries)\n\n") ,
        Method (Name "getElements") valCIntVec [valCBool] Normal (Doc "\n\n>  std::vector< int > CasADi::CRSSparsity::getElements(bool row_major=true) const \n------------------------------------------------------------------------\n\nGet the location of all nonzero elements.\n\n>  void CasADi::CRSSparsity::getElements(std::vector< int > &loc, bool row_major=true) const \n------------------------------------------------------------------------\n\nGet the location of all nonzero elements (inplace version)\n\n") ,
        Method (Name "unidirectionalColoring") valCRSSparsity [constrefCRSSparsity,valCInt] Normal (Doc "\n\nPerform a unidirectional coloring: A greedy distance-2 coloring algorithm\n(Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN)\n\n") ,
        Method (Name "unidirectionalColoring'") valCRSSparsity [constrefCRSSparsity] Normal (Doc "\n\nPerform a unidirectional coloring: A greedy distance-2 coloring algorithm\n(Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN)\n\n") ,
        Method (Name "unidirectionalColoring''") valCRSSparsity [] Normal (Doc "\n\nPerform a unidirectional coloring: A greedy distance-2 coloring algorithm\n(Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN)\n\n") ,
        Method (Name "starColoring") valCRSSparsity [valCInt,valCInt] Normal (Doc "\n\nPerform a star coloring of a symmetric matrix: A greedy distance-2 coloring\nalgorithm (Algorithm 4.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN) Ordering\noptions: None (0), largest first (1)\n\n") ,
        Method (Name "starColoring'") valCRSSparsity [valCInt] Normal (Doc "\n\nPerform a star coloring of a symmetric matrix: A greedy distance-2 coloring\nalgorithm (Algorithm 4.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN) Ordering\noptions: None (0), largest first (1)\n\n") ,
        Method (Name "starColoring''") valCRSSparsity [] Normal (Doc "\n\nPerform a star coloring of a symmetric matrix: A greedy distance-2 coloring\nalgorithm (Algorithm 4.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN) Ordering\noptions: None (0), largest first (1)\n\n") ,
        Method (Name "starColoring2") valCRSSparsity [valCInt,valCInt] Normal (Doc "\n\nPerform a star coloring of a symmetric matrix: A new greedy distance-2\ncoloring algorithm (Algorithm 4.1 in A. H. GEBREMEDHIN, A. TARAFDAR, F.\nMANNE, A. POTHEN) Ordering options: None (0), largest first (1)\n\n") ,
        Method (Name "starColoring2'") valCRSSparsity [valCInt] Normal (Doc "\n\nPerform a star coloring of a symmetric matrix: A new greedy distance-2\ncoloring algorithm (Algorithm 4.1 in A. H. GEBREMEDHIN, A. TARAFDAR, F.\nMANNE, A. POTHEN) Ordering options: None (0), largest first (1)\n\n") ,
        Method (Name "starColoring2''") valCRSSparsity [] Normal (Doc "\n\nPerform a star coloring of a symmetric matrix: A new greedy distance-2\ncoloring algorithm (Algorithm 4.1 in A. H. GEBREMEDHIN, A. TARAFDAR, F.\nMANNE, A. POTHEN) Ordering options: None (0), largest first (1)\n\n") ,
        Method (Name "dimString") valStdString [] Normal (Doc "\n\nGet the dimension as a string.\n\n") ,
        Method (Name "spy") valCVoid [refStdOstream] Normal (Doc "\n\nPrint a textual representation of sparsity.\n\n") ,
        Method (Name "spy'") valCVoid [] Normal (Doc "\n\nPrint a textual representation of sparsity.\n\n") ,
        Method (Name "spyMatlab") valCVoid [constrefStdString] Normal (Doc "\n\nGenerate a script for Matlab or Octave which visualizes the sparsity using\nthe spy command.\n\n") ,
        Method (Name "hash") valCSize [] Normal (Doc "") ,
        Method (Name "CRSSparsity") valCRSSparsity [valCInt,valCInt,constrefCIntVec,constrefCIntVec] Constructor (Doc "\n\n>  CasADi::CRSSparsity::CRSSparsity(int dummy=0)\n------------------------------------------------------------------------\n\nDefault constructor.\n\n>  CasADi::CRSSparsity::CRSSparsity(int nrow, int ncol, bool dense=false)\n------------------------------------------------------------------------\n\nConstruct a sparsity pattern (sparse/dense)\n\n>  CasADi::CRSSparsity::CRSSparsity(int nrow, int ncol, const std::vector< int > &col, const std::vector< int > &rowind)\n------------------------------------------------------------------------\n\nConstruct a sparsity pattern from vectors.\n\n") ,
        Method (Name "CRSSparsity'") valCRSSparsity [] Constructor (Doc "\n\n>  CasADi::CRSSparsity::CRSSparsity(int dummy=0)\n------------------------------------------------------------------------\n\nDefault constructor.\n\n>  CasADi::CRSSparsity::CRSSparsity(int nrow, int ncol, bool dense=false)\n------------------------------------------------------------------------\n\nConstruct a sparsity pattern (sparse/dense)\n\n>  CasADi::CRSSparsity::CRSSparsity(int nrow, int ncol, const std::vector< int > &col, const std::vector< int > &rowind)\n------------------------------------------------------------------------\n\nConstruct a sparsity pattern from vectors.\n\n")
      ]
    docs = Doc "\n\nGeneral sparsity class.\n\nThe storage format is a compressed row storage (CRS) format.\n\nIn this format, the structural non-zero elements are stored in row- major\norder, starting from the upper left corner of the matrix and ending in the\nlower right corner.\n\nIn addition to the dimension ( size1(), size2()), (i.e. the number of rows\nand the number of columns respectively), there are also two vectors of\nintegers:\n\n\"rowind\" [length size1()+1], which contains the index to the first non-\nzero element on or after the corresponding row. All the non-zero elements of\na particular i are thus the elements with index el that fulfils: rowind[i]\n<= el < rowind[i+1].\n\n\"col\" [same length as the number of non-zero elements, size()] The columns\nfor each of the structural non-zeros.\n\nNote that with this format, it is cheap to loop over all the non-zero\nelements of a particular row, constant time per elment, but expensive to\njump to access a location (i,j).\n\nIf the matrix is dense, i.e. length(col) == size1()*size2(), the format\nreduces to standard dense row major format, which allows access to an\narbitrary element in constant time.\n\nSince the object is reference counted (it inherits from SharedObject),\nseveral matrices are allowed to share the same sparsity pattern.\n\nThe implementations of some methods of this class has been taken from the\nCSparse package and modified to use STL and CasADi data structures.\n\nSee:   Matrix\n\nJoel Andersson\n\nC++ includes: crs_sparsity.hpp "








-- valIOSchemeVectorGradFOutputSXMatrix :: Type
-- valIOSchemeVectorGradFOutputSXMatrix = Val (NonVec (CasadiClass IOSchemeVectorGradFOutputSXMatrix))
-- valIOSchemeVectorOCPInputCRSSparsity :: Type
-- valIOSchemeVectorOCPInputCRSSparsity = Val (NonVec (CasadiClass IOSchemeVectorOCPInputCRSSparsity))
valenumopt_type :: Type
valenumopt_type = Val (NonVec (CasadiEnum Opt_type))
--valVariableVec :: Type
--valVariableVec = Val (Vec (NonVec (CasadiClass Variable)))
--constrefCInt :: Type
--constrefCInt = ConstRef (NonVec CInt)
-- valIOSchemeVectorRDAEOutputCRSSparsity :: Type
-- valIOSchemeVectorRDAEOutputCRSSparsity = Val (NonVec (CasadiClass IOSchemeVectorRDAEOutputCRSSparsity))
-- valIOSchemeVectorMayerInputMX :: Type
-- valIOSchemeVectorMayerInputMX = Val (NonVec (CasadiClass IOSchemeVectorMayerInputMX))
-- valIOSchemeVectorQPSolverInputCRSSparsity :: Type
-- valIOSchemeVectorQPSolverInputCRSSparsity = Val (NonVec (CasadiClass IOSchemeVectorQPSolverInputCRSSparsity))
--valNLPQPSolver :: Type
--valNLPQPSolver = Val (NonVec (CasadiClass NLPQPSolver))
--refSymbolicOCP :: Type
--refSymbolicOCP = Ref (NonVec (CasadiClass SymbolicOCP))
--valIMatrixVec :: Type
--valIMatrixVec = Val (Vec (NonVec (CasadiClass IMatrix)))
-- valIOSchemeVectorHessLagOutputSXMatrix :: Type
-- valIOSchemeVectorHessLagOutputSXMatrix = Val (NonVec (CasadiClass IOSchemeVectorHessLagOutputSXMatrix))
-- valIOSchemeVectorStabilizedQPSolverInputCRSSparsity :: Type
-- valIOSchemeVectorStabilizedQPSolverInputCRSSparsity = Val (NonVec (CasadiClass IOSchemeVectorStabilizedQPSolverInputCRSSparsity))
constrefOptionsFunctionality :: Type
constrefOptionsFunctionality = ConstRef (NonVec (CasadiClass OptionsFunctionality))
-- valIOSchemeVectorOCPOutputMX :: Type
-- valIOSchemeVectorOCPOutputMX = Val (NonVec (CasadiClass IOSchemeVectorOCPOutputMX))
refMXFunction :: Type
refMXFunction = Ref (NonVec (CasadiClass MXFunction))
valCustomFunction :: Type
valCustomFunction = Val (NonVec (CasadiClass CustomFunction))
--valLPStructure :: Type
--valLPStructure = Val (NonVec (CasadiClass LPStructure))
-- valIOSchemeVectorSOCPInputMX :: Type
-- valIOSchemeVectorSOCPInputMX = Val (NonVec (CasadiClass IOSchemeVectorSOCPInputMX))
-- valIOSchemeVectorControlSimulatorInputSXMatrix :: Type
-- valIOSchemeVectorControlSimulatorInputSXMatrix = Val (NonVec (CasadiClass IOSchemeVectorControlSimulatorInputSXMatrix))
valCVoid :: Type
valCVoid = Val (NonVec CVoid)
-- valIOSchemeVectorNLPSolverInputSXMatrix :: Type
-- valIOSchemeVectorNLPSolverInputSXMatrix = Val (NonVec (CasadiClass IOSchemeVectorNLPSolverInputSXMatrix))
constrefCDoubleVecVec :: Type
constrefCDoubleVecVec = ConstRef (Vec (Vec (NonVec CDouble)))
--valSOCPSolver :: Type
--valSOCPSolver = Val (NonVec (CasadiClass SOCPSolver))
--valSQPMethod :: Type
--valSQPMethod = Val (NonVec (CasadiClass SQPMethod))
--valIMatrix :: Type
--valIMatrix = Val (NonVec (CasadiClass IMatrix))
-- valIOSchemeVectorDAEOutputMX :: Type
-- valIOSchemeVectorDAEOutputMX = Val (NonVec (CasadiClass IOSchemeVectorDAEOutputMX))
--constrefSXFunction :: Type
--constrefSXFunction = ConstRef (NonVec (CasadiClass SXFunction))
valCIntVec :: Type
valCIntVec = Val (Vec (NonVec CInt))
-- valIOSchemeVectorControlSimulatorInputCRSSparsity :: Type
-- valIOSchemeVectorControlSimulatorInputCRSSparsity = Val (NonVec (CasadiClass IOSchemeVectorControlSimulatorInputCRSSparsity))
-- valIOSchemeVectorSDQPOutputCRSSparsity :: Type
-- valIOSchemeVectorSDQPOutputCRSSparsity = Val (NonVec (CasadiClass IOSchemeVectorSDQPOutputCRSSparsity))
--constrefQCQPStructure :: Type
--constrefQCQPStructure = ConstRef (NonVec (CasadiClass QCQPStructure))
--valenumAlias :: Type
--valenumAlias = Val (NonVec (CasadiEnum Alias))
-- valIOSchemeVectorOCPInputMX :: Type
-- valIOSchemeVectorOCPInputMX = Val (NonVec (CasadiClass IOSchemeVectorOCPInputMX))
-- valIOSchemeVectorACADO_OutputSXMatrix :: Type
-- valIOSchemeVectorACADO_OutputSXMatrix = Val (NonVec (CasadiClass IOSchemeVectorACADO_OutputSXMatrix))
valCSize :: Type
valCSize = Val (NonVec CSize)
-- valIOSchemeVectorHessLagOutputMX :: Type
-- valIOSchemeVectorHessLagOutputMX = Val (NonVec (CasadiClass IOSchemeVectorHessLagOutputMX))
-- valIOSchemeVectorQCQPSolverInputCRSSparsity :: Type
-- valIOSchemeVectorQCQPSolverInputCRSSparsity = Val (NonVec (CasadiClass IOSchemeVectorQCQPSolverInputCRSSparsity))
-- valIOSchemeVectorIntegratorInputMX :: Type
-- valIOSchemeVectorIntegratorInputMX = Val (NonVec (CasadiClass IOSchemeVectorIntegratorInputMX))
-- valIOSchemeVectorQCQPSolverInputMX :: Type
-- valIOSchemeVectorQCQPSolverInputMX = Val (NonVec (CasadiClass IOSchemeVectorQCQPSolverInputMX))
--valDMatrixVec :: Type
--valDMatrixVec = Val (Vec (NonVec (CasadiClass DMatrix)))
valGenericType :: Type
valGenericType = Val (NonVec (CasadiClass GenericType))
valMXVecVec :: Type
valMXVecVec = Val (Vec (Vec (NonVec (CasadiClass MX))))
-- valIOSchemeVectorGradFInputSXMatrix :: Type
-- valIOSchemeVectorGradFInputSXMatrix = Val (NonVec (CasadiClass IOSchemeVectorGradFInputSXMatrix))
-- valIOSchemeVectorLinsolOutputSXMatrix :: Type
-- valIOSchemeVectorLinsolOutputSXMatrix = Val (NonVec (CasadiClass IOSchemeVectorLinsolOutputSXMatrix))
-- valIOSchemeVectorLPSolverInputCRSSparsity :: Type
-- valIOSchemeVectorLPSolverInputCRSSparsity = Val (NonVec (CasadiClass IOSchemeVectorLPSolverInputCRSSparsity))
-- valIOSchemeVectorJacGOutputCRSSparsity :: Type
-- valIOSchemeVectorJacGOutputCRSSparsity = Val (NonVec (CasadiClass IOSchemeVectorJacGOutputCRSSparsity))
-- valIOSchemeVectorMayerInputSXMatrix :: Type
-- valIOSchemeVectorMayerInputSXMatrix = Val (NonVec (CasadiClass IOSchemeVectorMayerInputSXMatrix))
--valSOCPStructure :: Type
--valSOCPStructure = Val (NonVec (CasadiClass SOCPStructure))
-- valIOSchemeVectorIntegratorOutputSXMatrix :: Type
-- valIOSchemeVectorIntegratorOutputSXMatrix = Val (NonVec (CasadiClass IOSchemeVectorIntegratorOutputSXMatrix))
--valOCPSolver :: Type
--valOCPSolver = Val (NonVec (CasadiClass OCPSolver))
--refCUCharVec :: Type
--refCUCharVec = Ref (Vec (NonVec CUChar))
--valQPLPSolver :: Type
--valQPLPSolver = Val (NonVec (CasadiClass QPLPSolver))
--constrefSlice :: Type
--constrefSlice = ConstRef (NonVec (CasadiClass Slice))
-- valIOSchemeVectorGradFInputMX :: Type
-- valIOSchemeVectorGradFInputMX = Val (NonVec (CasadiClass IOSchemeVectorGradFInputMX))
valGenericTypeVec :: Type
valGenericTypeVec = Val (Vec (NonVec (CasadiClass GenericType)))
refSXVec :: Type
refSXVec = Ref (Vec (NonVec (CasadiClass SX)))
valSX :: Type
valSX = Val (NonVec (CasadiClass SX))
-- valIOSchemeVectorSDPOutputMX :: Type
-- valIOSchemeVectorSDPOutputMX = Val (NonVec (CasadiClass IOSchemeVectorSDPOutputMX))
-- valIOSchemeVectorLPSolverOutputSXMatrix :: Type
-- valIOSchemeVectorLPSolverOutputSXMatrix = Val (NonVec (CasadiClass IOSchemeVectorLPSolverOutputSXMatrix))
-- valIOSchemeVectorControlledDAEInputMX :: Type
-- valIOSchemeVectorControlledDAEInputMX = Val (NonVec (CasadiClass IOSchemeVectorControlledDAEInputMX))
-- valIOSchemeVectorACADO_FCN_InputCRSSparsity :: Type
-- valIOSchemeVectorACADO_FCN_InputCRSSparsity = Val (NonVec (CasadiClass IOSchemeVectorACADO_FCN_InputCRSSparsity))
--refCInt :: Type
--refCInt = Ref (NonVec CInt)
constrefenumopt_type :: Type
constrefenumopt_type = ConstRef (NonVec (CasadiEnum Opt_type))
constrefCustomEvaluate :: Type
constrefCustomEvaluate = ConstRef (NonVec (CasadiClass CustomEvaluate))
-- valIOSchemeVectorDAEInputCRSSparsity :: Type
-- valIOSchemeVectorDAEInputCRSSparsity = Val (NonVec (CasadiClass IOSchemeVectorDAEInputCRSSparsity))
--refSlice :: Type
--refSlice = Ref (NonVec (CasadiClass Slice))
-- valIOSchemeVectorNLPInputCRSSparsity :: Type
-- valIOSchemeVectorNLPInputCRSSparsity = Val (NonVec (CasadiClass IOSchemeVectorNLPInputCRSSparsity))
-- valIOSchemeVectorNLPInputSXMatrix :: Type
-- valIOSchemeVectorNLPInputSXMatrix = Val (NonVec (CasadiClass IOSchemeVectorNLPInputSXMatrix))
-- valIOSchemeVectorLPSolverOutputMX :: Type
-- valIOSchemeVectorLPSolverOutputMX = Val (NonVec (CasadiClass IOSchemeVectorLPSolverOutputMX))
-- valIOSchemeVectorJacGOutputMX :: Type
-- valIOSchemeVectorJacGOutputMX = Val (NonVec (CasadiClass IOSchemeVectorJacGOutputMX))
-- valIOSchemeVectorRDAEInputSXMatrix :: Type
-- valIOSchemeVectorRDAEInputSXMatrix = Val (NonVec (CasadiClass IOSchemeVectorRDAEInputSXMatrix))
--valSOCPQCQPSolver :: Type
--valSOCPQCQPSolver = Val (NonVec (CasadiClass SOCPQCQPSolver))
-- valIOSchemeVectorACADO_FCN_InputMX :: Type
-- valIOSchemeVectorACADO_FCN_InputMX = Val (NonVec (CasadiClass IOSchemeVectorACADO_FCN_InputMX))
--valVariable :: Type
--valVariable = Val (NonVec (CasadiClass Variable))
-- valIOSchemeVectorSDPInputMX :: Type
-- valIOSchemeVectorSDPInputMX = Val (NonVec (CasadiClass IOSchemeVectorSDPInputMX))
-- valIOSchemeVectorHessLagOutputCRSSparsity :: Type
-- valIOSchemeVectorHessLagOutputCRSSparsity = Val (NonVec (CasadiClass IOSchemeVectorHessLagOutputCRSSparsity))
--constrefSXMatrixVecVec :: Type
--constrefSXMatrixVecVec = ConstRef (Vec (Vec (NonVec (CasadiClass SXMatrix))))
valIpoptSolver :: Type
valIpoptSolver = Val (NonVec (CasadiClass IpoptSolver))
--valLinearSolver :: Type
--valLinearSolver = Val (NonVec (CasadiClass LinearSolver))
valStdString :: Type
valStdString = Val (NonVec StdString)
constrefMXFunction :: Type
constrefMXFunction = ConstRef (NonVec (CasadiClass MXFunction))
-- valIOSchemeVectorQPSolverInputMX :: Type
-- valIOSchemeVectorQPSolverInputMX = Val (NonVec (CasadiClass IOSchemeVectorQPSolverInputMX))
refCIntVec :: Type
refCIntVec = Ref (Vec (NonVec CInt))
valenumSparsity :: Type
valenumSparsity = Val (NonVec (CasadiEnum Sparsity))
--valSDPSDQPSolver :: Type
--valSDPSDQPSolver = Val (NonVec (CasadiClass SDPSDQPSolver))
constrefIOScheme :: Type
constrefIOScheme = ConstRef (NonVec (CasadiClass IOScheme))
constrefDMatrix :: Type
constrefDMatrix = ConstRef (NonVec (CasadiClass DMatrix))
-- valIOSchemeVectorSDQPOutputMX :: Type
-- valIOSchemeVectorSDQPOutputMX = Val (NonVec (CasadiClass IOSchemeVectorSDQPOutputMX))
--constrefSharedObject :: Type
--constrefSharedObject = ConstRef (NonVec (CasadiClass SharedObject))
-- valIOSchemeVectorQCQPSolverOutputSXMatrix :: Type
-- valIOSchemeVectorQCQPSolverOutputSXMatrix = Val (NonVec (CasadiClass IOSchemeVectorQCQPSolverOutputSXMatrix))
valSXMatrix :: Type
valSXMatrix = Val (NonVec (CasadiClass SXMatrix))
--valIndexList :: Type
--valIndexList = Val (NonVec (CasadiClass IndexList))
valSXMatrixVec :: Type
valSXMatrixVec = Val (Vec (NonVec (CasadiClass SXMatrix)))
--valenumCausality :: Type
--valenumCausality = Val (NonVec (CasadiEnum Causality))
--constrefLPStructure :: Type
--constrefLPStructure = ConstRef (NonVec (CasadiClass LPStructure))
-- valIOSchemeVectorRDAEOutputMX :: Type
-- valIOSchemeVectorRDAEOutputMX = Val (NonVec (CasadiClass IOSchemeVectorRDAEOutputMX))
-- valIOSchemeVectorSOCPOutputCRSSparsity :: Type
-- valIOSchemeVectorSOCPOutputCRSSparsity = Val (NonVec (CasadiClass IOSchemeVectorSOCPOutputCRSSparsity))
--valSCPgen :: Type
--valSCPgen = Val (NonVec (CasadiClass SCPgen))
--valQPStructure :: Type
--valQPStructure = Val (NonVec (CasadiClass QPStructure))
valExternalFunction :: Type
valExternalFunction = Val (NonVec (CasadiClass ExternalFunction))
--valSDPStructure :: Type
--valSDPStructure = Val (NonVec (CasadiClass SDPStructure))
--valSymbolicOCP :: Type
--valSymbolicOCP = Val (NonVec (CasadiClass SymbolicOCP))
valCBool :: Type
valCBool = Val (NonVec CBool)
--constrefIMatrixVec :: Type
--constrefIMatrixVec = ConstRef (Vec (NonVec (CasadiClass IMatrix)))
--constrefIOSchemeVectorMX :: Type
--constrefIOSchemeVectorMX = ConstRef (NonVec (CasadiClass IOSchemeVectorMX))
valCSparse :: Type
valCSparse = Val (NonVec (CasadiClass CSparse))
constrefStdString :: Type
constrefStdString = ConstRef (NonVec StdString)
valMXVec :: Type
valMXVec = Val (Vec (NonVec (CasadiClass MX)))
--valenumSymbolicOCPVariables :: Type
--valenumSymbolicOCPVariables = Val (NonVec (CasadiEnum SymbolicOCPVariables))
-- valIOSchemeVectorControlledDAEInputCRSSparsity :: Type
-- valIOSchemeVectorControlledDAEInputCRSSparsity = Val (NonVec (CasadiClass IOSchemeVectorControlledDAEInputCRSSparsity))
-- valIOSchemeVectorLinsolOutputMX :: Type
-- valIOSchemeVectorLinsolOutputMX = Val (NonVec (CasadiClass IOSchemeVectorLinsolOutputMX))
-- valIOSchemeVectorStabilizedQPSolverInputMX :: Type
-- valIOSchemeVectorStabilizedQPSolverInputMX = Val (NonVec (CasadiClass IOSchemeVectorStabilizedQPSolverInputMX))
-- valIOSchemeVectorLPSolverInputSXMatrix :: Type
-- valIOSchemeVectorLPSolverInputSXMatrix = Val (NonVec (CasadiClass IOSchemeVectorLPSolverInputSXMatrix))
--valQCQPQPSolver :: Type
--valQCQPQPSolver = Val (NonVec (CasadiClass QCQPQPSolver))
valIOScheme :: Type
valIOScheme = Val (NonVec (CasadiClass IOScheme))
--constrefIMatrixVecVec :: Type
--constrefIMatrixVecVec = ConstRef (Vec (Vec (NonVec (CasadiClass IMatrix))))
-- valIOSchemeVectorIntegratorInputCRSSparsity :: Type
-- valIOSchemeVectorIntegratorInputCRSSparsity = Val (NonVec (CasadiClass IOSchemeVectorIntegratorInputCRSSparsity))
--refSXMatrixVec :: Type
--refSXMatrixVec = Ref (Vec (NonVec (CasadiClass SXMatrix)))
-- valIOSchemeVectorDAEOutputSXMatrix :: Type
-- valIOSchemeVectorDAEOutputSXMatrix = Val (NonVec (CasadiClass IOSchemeVectorDAEOutputSXMatrix))
-- valIOSchemeVectorSDPOutputSXMatrix :: Type
-- valIOSchemeVectorSDPOutputSXMatrix = Val (NonVec (CasadiClass IOSchemeVectorSDPOutputSXMatrix))
--valLPSolver :: Type
--valLPSolver = Val (NonVec (CasadiClass LPSolver))
-- valIOSchemeVectorDAEOutputCRSSparsity :: Type
-- valIOSchemeVectorDAEOutputCRSSparsity = Val (NonVec (CasadiClass IOSchemeVectorDAEOutputCRSSparsity))
--valGenericIntegrator :: Type
--valGenericIntegrator = Val (NonVec (CasadiClass GenericIntegrator))
--refCSize :: Type
--refCSize = Ref (NonVec CSize)
--valSDPSolver :: Type
--valSDPSolver = Val (NonVec (CasadiClass SDPSolver))
--valSDQPSolver :: Type
--valSDQPSolver = Val (NonVec (CasadiClass SDQPSolver))
--valImplicitFunction :: Type
--valImplicitFunction = Val (NonVec (CasadiClass ImplicitFunction))
-- valIOSchemeVectorJacGOutputSXMatrix :: Type
-- valIOSchemeVectorJacGOutputSXMatrix = Val (NonVec (CasadiClass IOSchemeVectorJacGOutputSXMatrix))
-- valIOSchemeVectorACADO_OutputMX :: Type
-- valIOSchemeVectorACADO_OutputMX = Val (NonVec (CasadiClass IOSchemeVectorACADO_OutputMX))
--constrefGenMX :: Type
--constrefGenMX = ConstRef (NonVec (CasadiClass GenMX))
--valQCQPStructure :: Type
--valQCQPStructure = Val (NonVec (CasadiClass QCQPStructure))
-- valIOSchemeVectorJacGInputCRSSparsity :: Type
-- valIOSchemeVectorJacGInputCRSSparsity = Val (NonVec (CasadiClass IOSchemeVectorJacGInputCRSSparsity))
-- valIOSchemeVectorGradFOutputCRSSparsity :: Type
-- valIOSchemeVectorGradFOutputCRSSparsity = Val (NonVec (CasadiClass IOSchemeVectorGradFOutputCRSSparsity))
--valDirectCollocation :: Type
--valDirectCollocation = Val (NonVec (CasadiClass DirectCollocation))
-- valIOSchemeVectorNLPSolverOutputMX :: Type
-- valIOSchemeVectorNLPSolverOutputMX = Val (NonVec (CasadiClass IOSchemeVectorNLPSolverOutputMX))
-- valIOSchemeVectorNLPInputMX :: Type
-- valIOSchemeVectorNLPInputMX = Val (NonVec (CasadiClass IOSchemeVectorNLPInputMX))
constrefCRSSparsityVec :: Type
constrefCRSSparsityVec = ConstRef (Vec (NonVec (CasadiClass CRSSparsity)))
--valNLPImplicitSolver :: Type
--valNLPImplicitSolver = Val (NonVec (CasadiClass NLPImplicitSolver))
constrefCIntVec :: Type
constrefCIntVec = ConstRef (Vec (NonVec CInt))

constrefFX :: Type
constrefFX = ConstRef (NonVec (CasadiClass FX))

-- valIOSchemeVectorSDQPOutputSXMatrix :: Type
-- valIOSchemeVectorSDQPOutputSXMatrix = Val (NonVec (CasadiClass IOSchemeVectorSDQPOutputSXMatrix))
--valDirectSingleShooting :: Type
--valDirectSingleShooting = Val (NonVec (CasadiClass DirectSingleShooting))
--valQPSolver :: Type
--valQPSolver = Val (NonVec (CasadiClass QPSolver))
--valSimulator :: Type
--valSimulator = Val (NonVec (CasadiClass Simulator))
--constrefIntegrator :: Type
--constrefIntegrator = ConstRef (NonVec (CasadiClass Integrator))
constrefCBoolVec :: Type
constrefCBoolVec = ConstRef (Vec (NonVec CBool))
--valSymbolicQR :: Type
--valSymbolicQR = Val (NonVec (CasadiClass SymbolicQR))
--valKinsolSolver :: Type
--valKinsolSolver = Val (NonVec (CasadiClass KinsolSolver))
--valIMatrixVecVec :: Type
--valIMatrixVecVec = Val (Vec (Vec (NonVec (CasadiClass IMatrix))))
-- valIOSchemeVectorACADO_FCN_InputSXMatrix :: Type
-- valIOSchemeVectorACADO_FCN_InputSXMatrix = Val (NonVec (CasadiClass IOSchemeVectorACADO_FCN_InputSXMatrix))
-- valIOSchemeVectorSDQPInputSXMatrix :: Type
-- valIOSchemeVectorSDQPInputSXMatrix = Val (NonVec (CasadiClass IOSchemeVectorSDQPInputSXMatrix))
--constrefIOSchemeVectorCRSSparsity :: Type
--constrefIOSchemeVectorCRSSparsity = ConstRef (NonVec (CasadiClass IOSchemeVectorCRSSparsity))
--constrefQPStructure :: Type
--constrefQPStructure = ConstRef (NonVec (CasadiClass QPStructure))
--valParallelizer :: Type
--valParallelizer = Val (NonVec (CasadiClass Parallelizer))
--valSDQPStructure :: Type
--valSDQPStructure = Val (NonVec (CasadiClass SDQPStructure))
--valenumCategory :: Type
--valenumCategory = Val (NonVec (CasadiEnum Category))
-- valIOSchemeVectorLinsolOutputCRSSparsity :: Type
-- valIOSchemeVectorLinsolOutputCRSSparsity = Val (NonVec (CasadiClass IOSchemeVectorLinsolOutputCRSSparsity))
-- valIOSchemeVectorMayerInputCRSSparsity :: Type
-- valIOSchemeVectorMayerInputCRSSparsity = Val (NonVec (CasadiClass IOSchemeVectorMayerInputCRSSparsity))
--constrefFXVec :: Type
--constrefFXVec = ConstRef (Vec (NonVec (CasadiClass FX)))
refStdOstream :: Type
refStdOstream = Ref (NonVec StdOstream)
--valSparsityGenerator :: Type
--valSparsityGenerator = Val (NonVec (CasadiClass SparsityGenerator))
--constrefSOCPStructure :: Type
--constrefSOCPStructure = ConstRef (NonVec (CasadiClass SOCPStructure))
valenumInputOutputScheme :: Type
valenumInputOutputScheme = Val (NonVec (CasadiEnum InputOutputScheme))
constrefSX :: Type
constrefSX = ConstRef (NonVec (CasadiClass SX))
--refSXMatrixVecVec :: Type
--refSXMatrixVecVec = Ref (Vec (Vec (NonVec (CasadiClass SXMatrix))))
-- valIOSchemeVectorHessLagInputCRSSparsity :: Type
-- valIOSchemeVectorHessLagInputCRSSparsity = Val (NonVec (CasadiClass IOSchemeVectorHessLagInputCRSSparsity))
valCInt :: Type
valCInt = Val (NonVec CInt)
valMXFunction :: Type
valMXFunction = Val (NonVec (CasadiClass MXFunction))
-- valIOSchemeVectorCRSSparsity :: Type
-- valIOSchemeVectorCRSSparsity = Val (NonVec (CasadiClass IOSchemeVectorCRSSparsity))
--valControlSimulator :: Type
--valControlSimulator = Val (NonVec (CasadiClass ControlSimulator))
-- valIOSchemeVectorGradFOutputMX :: Type
-- valIOSchemeVectorGradFOutputMX = Val (NonVec (CasadiClass IOSchemeVectorGradFOutputMX))
--constrefLinearSolver :: Type
--constrefLinearSolver = ConstRef (NonVec (CasadiClass LinearSolver))
--valRKIntegrator :: Type
--valRKIntegrator = Val (NonVec (CasadiClass RKIntegrator))
-- valIOSchemeVectorGradFInputCRSSparsity :: Type
-- valIOSchemeVectorGradFInputCRSSparsity = Val (NonVec (CasadiClass IOSchemeVectorGradFInputCRSSparsity))
--valIntegrator :: Type
--valIntegrator = Val (NonVec (CasadiClass Integrator))
-- valIOSchemeVectorSDQPInputMX :: Type
-- valIOSchemeVectorSDQPInputMX = Val (NonVec (CasadiClass IOSchemeVectorSDQPInputMX))
-- valIOSchemeVectorHessLagInputSXMatrix :: Type
-- valIOSchemeVectorHessLagInputSXMatrix = Val (NonVec (CasadiClass IOSchemeVectorHessLagInputSXMatrix))
valCRSSparsity :: Type
valCRSSparsity = Val (NonVec (CasadiClass CRSSparsity))
-- valIOSchemeVectorJacGInputSXMatrix :: Type
-- valIOSchemeVectorJacGInputSXMatrix = Val (NonVec (CasadiClass IOSchemeVectorJacGInputSXMatrix))
valCallback :: Type
valCallback = Val (NonVec (CasadiClass Callback))
--valCSparseCholesky :: Type
--valCSparseCholesky = Val (NonVec (CasadiClass CSparseCholesky))
--constrefSDQPStructure :: Type
--constrefSDQPStructure = ConstRef (NonVec (CasadiClass SDQPStructure))
--valWeakRef :: Type
--valWeakRef = Val (NonVec (CasadiClass WeakRef))
refSX :: Type
refSX = Ref (NonVec (CasadiClass SX))
--constrefVariable :: Type
--constrefVariable = ConstRef (NonVec (CasadiClass Variable))
--valIdasIntegrator :: Type
--valIdasIntegrator = Val (NonVec (CasadiClass IdasIntegrator))
-- valIOSchemeVectorLPSolverInputMX :: Type
-- valIOSchemeVectorLPSolverInputMX = Val (NonVec (CasadiClass IOSchemeVectorLPSolverInputMX))
-- valIOSchemeVectorACADO_InputMX :: Type
-- valIOSchemeVectorACADO_InputMX = Val (NonVec (CasadiClass IOSchemeVectorACADO_InputMX))
-- valIOSchemeVectorNLPSolverOutputCRSSparsity :: Type
-- valIOSchemeVectorNLPSolverOutputCRSSparsity = Val (NonVec (CasadiClass IOSchemeVectorNLPSolverOutputCRSSparsity))
--valSDPSOCPSolver :: Type
--valSDPSOCPSolver = Val (NonVec (CasadiClass SDPSOCPSolver))
constrefStdStringVec :: Type
constrefStdStringVec = ConstRef (Vec (NonVec StdString))
-- valIOSchemeVectorIntegratorInputSXMatrix :: Type
-- valIOSchemeVectorIntegratorInputSXMatrix = Val (NonVec (CasadiClass IOSchemeVectorIntegratorInputSXMatrix))
--refMX :: Type
--refMX = Ref (NonVec (CasadiClass MX))
--refMXVecVec :: Type
--refMXVecVec = Ref (Vec (Vec (NonVec (CasadiClass MX))))
-- valIOSchemeVectorOCPInputSXMatrix :: Type
-- valIOSchemeVectorOCPInputSXMatrix = Val (NonVec (CasadiClass IOSchemeVectorOCPInputSXMatrix))
constrefSXMatrix :: Type
constrefSXMatrix = ConstRef (NonVec (CasadiClass SXMatrix))
-- valIOSchemeVectorControlSimulatorInputMX :: Type
-- valIOSchemeVectorControlSimulatorInputMX = Val (NonVec (CasadiClass IOSchemeVectorControlSimulatorInputMX))
-- valIOSchemeVectorJacGInputMX :: Type
-- valIOSchemeVectorJacGInputMX = Val (NonVec (CasadiClass IOSchemeVectorJacGInputMX))
-- valIOSchemeVectorNLPSolverInputCRSSparsity :: Type
-- valIOSchemeVectorNLPSolverInputCRSSparsity = Val (NonVec (CasadiClass IOSchemeVectorNLPSolverInputCRSSparsity))
-- valIOSchemeVectorLinsolInputMX :: Type
-- valIOSchemeVectorLinsolInputMX = Val (NonVec (CasadiClass IOSchemeVectorLinsolInputMX))
valSXVec :: Type
valSXVec = Val (Vec (NonVec (CasadiClass SX)))
-- valIOSchemeVectorRDAEOutputSXMatrix :: Type
-- valIOSchemeVectorRDAEOutputSXMatrix = Val (NonVec (CasadiClass IOSchemeVectorRDAEOutputSXMatrix))
-- valIOSchemeVectorSDPInputSXMatrix :: Type
-- valIOSchemeVectorSDPInputSXMatrix = Val (NonVec (CasadiClass IOSchemeVectorSDPInputSXMatrix))
--valSXMatrixVecVec :: Type
--valSXMatrixVecVec = Val (Vec (Vec (NonVec (CasadiClass SXMatrix))))
-- valIOSchemeVectorQPSolverOutputCRSSparsity :: Type
-- valIOSchemeVectorQPSolverOutputCRSSparsity = Val (NonVec (CasadiClass IOSchemeVectorQPSolverOutputCRSSparsity))
--refFX :: Type
--refFX = Ref (NonVec (CasadiClass FX))
--constrefJacobianGenerator :: Type
--constrefJacobianGenerator = ConstRef (NonVec (CasadiClass JacobianGenerator))
-- valIOSchemeVectorControlledDAEInputSXMatrix :: Type
-- valIOSchemeVectorControlledDAEInputSXMatrix = Val (NonVec (CasadiClass IOSchemeVectorControlledDAEInputSXMatrix))
valCDouble :: Type
valCDouble = Val (NonVec CDouble)
refSXMatrix :: Type
refSXMatrix = Ref (NonVec (CasadiClass SXMatrix))
-- valIOSchemeVectorStabilizedQPSolverInputSXMatrix :: Type
-- valIOSchemeVectorStabilizedQPSolverInputSXMatrix = Val (NonVec (CasadiClass IOSchemeVectorStabilizedQPSolverInputSXMatrix))
-- valIOSchemeVectorLPSolverOutputCRSSparsity :: Type
-- valIOSchemeVectorLPSolverOutputCRSSparsity = Val (NonVec (CasadiClass IOSchemeVectorLPSolverOutputCRSSparsity))
valSXFunction :: Type
valSXFunction = Val (NonVec (CasadiClass SXFunction))
-- valIOSchemeVectorQCQPSolverOutputMX :: Type
-- valIOSchemeVectorQCQPSolverOutputMX = Val (NonVec (CasadiClass IOSchemeVectorQCQPSolverOutputMX))
-- valIOSchemeVectorNLPSolverOutputSXMatrix :: Type
-- valIOSchemeVectorNLPSolverOutputSXMatrix = Val (NonVec (CasadiClass IOSchemeVectorNLPSolverOutputSXMatrix))
--valSundialsIntegrator :: Type
--valSundialsIntegrator = Val (NonVec (CasadiClass SundialsIntegrator))
-- valIOSchemeVectorSXMatrix :: Type
-- valIOSchemeVectorSXMatrix = Val (NonVec (CasadiClass IOSchemeVectorSXMatrix))
constrefMXVecVec :: Type
constrefMXVecVec = ConstRef (Vec (Vec (NonVec (CasadiClass MX))))
--refCDoubleVecVec :: Type
--refCDoubleVecVec = Ref (Vec (Vec (NonVec CDouble)))
--valJacobianGenerator :: Type
--valJacobianGenerator = Val (NonVec (CasadiClass JacobianGenerator))
--valCVodesIntegrator :: Type
--valCVodesIntegrator = Val (NonVec (CasadiClass CVodesIntegrator))
valOptionsFunctionality :: Type
valOptionsFunctionality = Val (NonVec (CasadiClass OptionsFunctionality))
--refIMatrix :: Type
--refIMatrix = Ref (NonVec (CasadiClass IMatrix))
constrefSXVecVec :: Type
constrefSXVecVec = ConstRef (Vec (Vec (NonVec (CasadiClass SX))))
valCustomEvaluate :: Type
valCustomEvaluate = Val (NonVec (CasadiClass CustomEvaluate))
--valDirectMultipleShooting :: Type
--valDirectMultipleShooting = Val (NonVec (CasadiClass DirectMultipleShooting))
--constrefIndexList :: Type
--constrefIndexList = ConstRef (NonVec (CasadiClass IndexList))
constrefSXVec :: Type
constrefSXVec = ConstRef (Vec (NonVec (CasadiClass SX)))
-- valIOSchemeVectorNLPOutputSXMatrix :: Type
-- valIOSchemeVectorNLPOutputSXMatrix = Val (NonVec (CasadiClass IOSchemeVectorNLPOutputSXMatrix))
--constrefGenSXMatrix :: Type
--constrefGenSXMatrix = ConstRef (NonVec (CasadiClass GenSXMatrix))
--valNewtonImplicitSolver :: Type
--valNewtonImplicitSolver = Val (NonVec (CasadiClass NewtonImplicitSolver))
-- valIOSchemeVectorSDQPInputCRSSparsity :: Type
-- valIOSchemeVectorSDQPInputCRSSparsity = Val (NonVec (CasadiClass IOSchemeVectorSDQPInputCRSSparsity))
-- valIOSchemeVectorOCPOutputSXMatrix :: Type
-- valIOSchemeVectorOCPOutputSXMatrix = Val (NonVec (CasadiClass IOSchemeVectorOCPOutputSXMatrix))
valCDoubleVec :: Type
valCDoubleVec = Val (Vec (NonVec CDouble))
--constrefIMatrix :: Type
--constrefIMatrix = ConstRef (NonVec (CasadiClass IMatrix))
-- valIOSchemeVectorRDAEInputCRSSparsity :: Type
-- valIOSchemeVectorRDAEInputCRSSparsity = Val (NonVec (CasadiClass IOSchemeVectorRDAEInputCRSSparsity))
--valenumVariability :: Type
--valenumVariability = Val (NonVec (CasadiEnum Variability))
--refSharedObject :: Type
--refSharedObject = Ref (NonVec (CasadiClass SharedObject))
-- valIOSchemeVectorQPSolverOutputSXMatrix :: Type
-- valIOSchemeVectorQPSolverOutputSXMatrix = Val (NonVec (CasadiClass IOSchemeVectorQPSolverOutputSXMatrix))
-- valIOSchemeVectorRDAEInputMX :: Type
-- valIOSchemeVectorRDAEInputMX = Val (NonVec (CasadiClass IOSchemeVectorRDAEInputMX))
--valCRSSparsityVec :: Type
--valCRSSparsityVec = Val (Vec (NonVec (CasadiClass CRSSparsity)))
-- valIOSchemeVectorQPSolverInputSXMatrix :: Type
-- valIOSchemeVectorQPSolverInputSXMatrix = Val (NonVec (CasadiClass IOSchemeVectorQPSolverInputSXMatrix))
constrefMXVec :: Type
constrefMXVec = ConstRef (Vec (NonVec (CasadiClass MX)))
valFX :: Type
valFX = Val (NonVec (CasadiClass FX))
--valSlice :: Type
--valSlice = Val (NonVec (CasadiClass Slice))
constrefGenericType :: Type
constrefGenericType = ConstRef (NonVec (CasadiClass GenericType))
--constrefCIntVecVec :: Type
--constrefCIntVecVec = ConstRef (Vec (Vec (NonVec CInt)))
-- valIOSchemeVectorHessLagInputMX :: Type
-- valIOSchemeVectorHessLagInputMX = Val (NonVec (CasadiClass IOSchemeVectorHessLagInputMX))
-- valIOSchemeVectorNLPSolverInputMX :: Type
-- valIOSchemeVectorNLPSolverInputMX = Val (NonVec (CasadiClass IOSchemeVectorNLPSolverInputMX))
--refMXVec :: Type
--refMXVec = Ref (Vec (NonVec (CasadiClass MX)))
-- valIOSchemeVectorNLPOutputCRSSparsity :: Type
-- valIOSchemeVectorNLPOutputCRSSparsity = Val (NonVec (CasadiClass IOSchemeVectorNLPOutputCRSSparsity))
-- valIOSchemeVectorQPSolverOutputMX :: Type
-- valIOSchemeVectorQPSolverOutputMX = Val (NonVec (CasadiClass IOSchemeVectorQPSolverOutputMX))
-- valIOSchemeVectorOCPOutputCRSSparsity :: Type
-- valIOSchemeVectorOCPOutputCRSSparsity = Val (NonVec (CasadiClass IOSchemeVectorOCPOutputCRSSparsity))
-- valIOSchemeVectorLinsolInputSXMatrix :: Type
-- valIOSchemeVectorLinsolInputSXMatrix = Val (NonVec (CasadiClass IOSchemeVectorLinsolInputSXMatrix))
-- valIOSchemeVectorLinsolInputCRSSparsity :: Type
-- valIOSchemeVectorLinsolInputCRSSparsity = Val (NonVec (CasadiClass IOSchemeVectorLinsolInputCRSSparsity))
-- valIOSchemeVectorQCQPSolverOutputCRSSparsity :: Type
-- valIOSchemeVectorQCQPSolverOutputCRSSparsity = Val (NonVec (CasadiClass IOSchemeVectorQCQPSolverOutputCRSSparsity))
--constrefSparsityGenerator :: Type
--constrefSparsityGenerator = ConstRef (NonVec (CasadiClass SparsityGenerator))
-- valIOSchemeVectorDAEInputMX :: Type
-- valIOSchemeVectorDAEInputMX = Val (NonVec (CasadiClass IOSchemeVectorDAEInputMX))
--valCollocationIntegrator :: Type
--valCollocationIntegrator = Val (NonVec (CasadiClass CollocationIntegrator))
--constrefDMatrixVecVec :: Type
--constrefDMatrixVecVec = ConstRef (Vec (Vec (NonVec (CasadiClass DMatrix))))
--valDMatrixVecVec :: Type
--valDMatrixVecVec = Val (Vec (Vec (NonVec (CasadiClass DMatrix))))
-- valIOSchemeVectorACADO_OutputCRSSparsity :: Type
-- valIOSchemeVectorACADO_OutputCRSSparsity = Val (NonVec (CasadiClass IOSchemeVectorACADO_OutputCRSSparsity))
-- valIOSchemeVectorSOCPOutputMX :: Type
-- valIOSchemeVectorSOCPOutputMX = Val (NonVec (CasadiClass IOSchemeVectorSOCPOutputMX))
-- valIOSchemeVectorDAEInputSXMatrix :: Type
-- valIOSchemeVectorDAEInputSXMatrix = Val (NonVec (CasadiClass IOSchemeVectorDAEInputSXMatrix))
constrefCRSSparsity :: Type
constrefCRSSparsity = ConstRef (NonVec (CasadiClass CRSSparsity))
-- valIOSchemeVectorSDPOutputCRSSparsity :: Type
-- valIOSchemeVectorSDPOutputCRSSparsity = Val (NonVec (CasadiClass IOSchemeVectorSDPOutputCRSSparsity))
--valNLPSolver :: Type
--valNLPSolver = Val (NonVec (CasadiClass NLPSolver))
--valQCQPSolver :: Type
--valQCQPSolver = Val (NonVec (CasadiClass QCQPSolver))
--constrefDMatrixVec :: Type
--constrefDMatrixVec = ConstRef (Vec (NonVec (CasadiClass DMatrix)))
-- valIOSchemeVectorIntegratorOutputMX :: Type
-- valIOSchemeVectorIntegratorOutputMX = Val (NonVec (CasadiClass IOSchemeVectorIntegratorOutputMX))
-- valIOSchemeVectorSOCPInputSXMatrix :: Type
-- valIOSchemeVectorSOCPInputSXMatrix = Val (NonVec (CasadiClass IOSchemeVectorSOCPInputSXMatrix))
constrefMX :: Type
constrefMX = ConstRef (NonVec (CasadiClass MX))
valCLong :: Type
valCLong = Val (NonVec CLong)
-- valIOSchemeVectorACADO_InputCRSSparsity :: Type
-- valIOSchemeVectorACADO_InputCRSSparsity = Val (NonVec (CasadiClass IOSchemeVectorACADO_InputCRSSparsity))
--refCBoolVec :: Type
--refCBoolVec = Ref (Vec (NonVec CBool))
--valQPStabilizer :: Type
--valQPStabilizer = Val (NonVec (CasadiClass QPStabilizer))
-- valIOSchemeVectorMX :: Type
-- valIOSchemeVectorMX = Val (NonVec (CasadiClass IOSchemeVectorMX))
-- valIOSchemeVectorSDPInputCRSSparsity :: Type
-- valIOSchemeVectorSDPInputCRSSparsity = Val (NonVec (CasadiClass IOSchemeVectorSDPInputCRSSparsity))
valStdStringVec :: Type
valStdStringVec = Val (Vec (NonVec StdString))
-- valIOSchemeVectorACADO_InputSXMatrix :: Type
-- valIOSchemeVectorACADO_InputSXMatrix = Val (NonVec (CasadiClass IOSchemeVectorACADO_InputSXMatrix))
valMX :: Type
valMX = Val (NonVec (CasadiClass MX))
--valCIntVecVec :: Type
--valCIntVecVec = Val (Vec (Vec (NonVec CInt)))
-- valIOSchemeVectorSOCPInputCRSSparsity :: Type
-- valIOSchemeVectorSOCPInputCRSSparsity = Val (NonVec (CasadiClass IOSchemeVectorSOCPInputCRSSparsity))
constrefCallback :: Type
constrefCallback = ConstRef (NonVec (CasadiClass Callback))
-- valIOSchemeVectorIntegratorOutputCRSSparsity :: Type
-- valIOSchemeVectorIntegratorOutputCRSSparsity = Val (NonVec (CasadiClass IOSchemeVectorIntegratorOutputCRSSparsity))
valDMatrix :: Type
valDMatrix = Val (NonVec (CasadiClass DMatrix))
-- valIOSchemeVectorQCQPSolverInputSXMatrix :: Type
-- valIOSchemeVectorQCQPSolverInputSXMatrix = Val (NonVec (CasadiClass IOSchemeVectorQCQPSolverInputSXMatrix))
-- valIOSchemeVectorNLPOutputMX :: Type
-- valIOSchemeVectorNLPOutputMX = Val (NonVec (CasadiClass IOSchemeVectorNLPOutputMX))
refCDouble :: Type
refCDouble = Ref (NonVec CDouble)
refCDoubleVec :: Type
refCDoubleVec = Ref (Vec (NonVec CDouble))
--constrefGenIMatrix :: Type
--constrefGenIMatrix = ConstRef (NonVec (CasadiClass GenIMatrix))
refDMatrix :: Type
refDMatrix = Ref (NonVec (CasadiClass DMatrix))
--valStabilizedSQPMethod :: Type
--valStabilizedSQPMethod = Val (NonVec (CasadiClass StabilizedSQPMethod))
-- valIOSchemeVectorSOCPOutputSXMatrix :: Type
-- valIOSchemeVectorSOCPOutputSXMatrix = Val (NonVec (CasadiClass IOSchemeVectorSOCPOutputSXMatrix))
--valIndexSet :: Type
--valIndexSet = Val (NonVec (CasadiClass IndexSet))
--constrefGenDMatrix :: Type
--constrefGenDMatrix = ConstRef (NonVec (CasadiClass GenDMatrix))
--valSharedObject :: Type
--valSharedObject = Val (NonVec (CasadiClass SharedObject))
constrefSXMatrixVec :: Type
constrefSXMatrixVec = ConstRef (Vec (NonVec (CasadiClass SXMatrix)))
constrefCDouble :: Type
constrefCDouble = ConstRef (NonVec CDouble)
--valStabilizedQPSolver :: Type
--valStabilizedQPSolver = Val (NonVec (CasadiClass StabilizedQPSolver))
constrefCDoubleVec :: Type
constrefCDoubleVec = ConstRef (Vec (NonVec CDouble))
